[
	{
		"kind": "module",
		"file": "source\\vibe\\core\\args.d",
		"members": [
			{
				"kind": "template",
				"line": 47,
				"members": [
					{
						"kind": "function",
						"line": 47,
						"endchar": 1,
						"char": 6,
						"type": "bool(string names, T* pvalue, string help_text)",
						"parameters": [
							{
								"type": "string",
								"name": "names"
							},
							{
								"type": "T*",
								"name": "pvalue"
							},
							{
								"type": "string",
								"name": "help_text"
							}
						],
						"name": "readOption",
						"endline": 72
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tFinds and reads an option from the configuration file or command line.\n\n\tCommand line options take precedence over configuration file entries.\n\n\tParams:\n\t\tnames = Option names. Separate multiple name variants with \"|\",\n\t\t\tas for $(D std.getopt).\n\t\tpvalue = Pointer to store the value. Unchanged if value was not found.\n\t\thelp_text = Text to be displayed when the application is run with\n\t\t\t--help.\n\n\tReturns:\n\t\t$(D true) if the value was found, $(D false) otherwise.\n\n\tSee_Also: readRequiredOption\n",
				"name": "readOption"
			},
			{
				"kind": "alias",
				"line": 75,
				"char": 1,
				"name": "getOption",
				"comment": "Compatibility alias\n"
			},
			{
				"kind": "template",
				"line": 83,
				"members": [
					{
						"kind": "function",
						"line": 83,
						"endchar": 1,
						"char": 3,
						"type": "T(string names, string help_text)",
						"parameters": [
							{
								"type": "string",
								"name": "names"
							},
							{
								"type": "string",
								"name": "help_text"
							}
						],
						"name": "readRequiredOption",
						"endline": 92
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tThe same as getOption, but throws an exception if the given option is missing.\n\n\tSee_Also: readOption\n",
				"name": "readRequiredOption"
			},
			{
				"kind": "function",
				"line": 98,
				"deco": "FZv",
				"endchar": 1,
				"char": 6,
				"name": "printCommandLineHelp",
				"comment": "\tPrints a help screen consisting of all options encountered in getOption calls.\n",
				"endline": 132
			},
			{
				"kind": "function",
				"line": 151,
				"deco": "FPAAyaZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "PAAya",
						"default": "null",
						"name": "args_out"
					}
				],
				"name": "finalizeCommandLineOptions",
				"comment": "\tChecks for unrecognized command line options and display a help screen.\n\n\tThis function is called automatically from vibe.appmain to check for\n\tcorrect command line usage. It will print a help screen in case of\n\tunrecognized options.\n\n\tParams:\n\t\targs_out = Optional parameter for storing any arguments not handled\n\t\t           by any getOption call. If this is left to null, an error\n\t\t           will be triggered whenever unhandled arguments exist.\n\n\tReturns:\n\t\tIf \"--help\" was passed, the function returns false. In all other\n\t\tcases either true is returned or an exception is thrown.\n",
				"endline": 169
			}
		],
		"name": "vibe.core.args",
		"comment": "\tParses and allows querying the command line arguments and configuration\n\tfile.\n\n\tThe optional configuration file (vibe.conf) is a JSON file, containing an\n\tobject with the keys corresponding to option names, and values corresponding\n\tto their values. It is searched for in the local directory, user's home\n\tdirectory, or /etc/vibe/ (POSIX only), whichever is found first.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Vladimir Panteleev\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\core\\concurrency.d",
		"members": [
			{
				"kind": "template",
				"line": 37,
				"members": [
					{
						"kind": "function",
						"line": 37,
						"endchar": 1,
						"char": 14,
						"type": "pure nothrow @safe ScopedLock!T(shared(T) object)",
						"parameters": [
							{
								"type": "shared(T)",
								"name": "object"
							}
						],
						"name": "lock",
						"endline": 40
					}
				],
				"char": 14,
				"parameters": [
					{
						"kind": "type",
						"deco": "xC6Object",
						"name": "T"
					}
				],
				"comment": "\tLocks the given shared object and returns a ScopedLock for accessing any unshared members.\n\n\tUsing this function will ensure that there are no data races. For this reason, the class\n\ttype T is required to contain no unshared or unisolated aliasing.\n\n\tSee_Also: core.concurrency.isWeaklyIsolated\nExample:\n\n---\nimport vibe.core.concurrency;\n\nstatic class Item {\n\tprivate double m_value;\n\n\tthis(double value) pure { m_value = value; }\n\n\t@property double value() const pure { return m_value; }\n}\n\nstatic class Manager {\n\tprivate {\n\t\tstring m_name;\n\t\tIsolated!(Item) m_ownedItem;\n\t\tIsolated!(shared(Item)[]) m_items;\n\t}\n\n\tpure this(string name)\n\t{\n\t\tm_name = name;\n\t\tauto itm = makeIsolated!Item(3.5);\n\t\tm_ownedItem = itm.move;\n\t}\n\n\tvoid addItem(shared(Item) item) pure { m_items ~= item; }\n\n\tdouble getTotalValue()\n\tconst pure {\n\t\tdouble sum = 0;\n\n\t\t// lock() is required to access shared objects\n\t\tforeach (itm; m_items.unsafeGet) {\n\t\t\tauto l = itm.lock();\n\t\t\tsum += l.value;\n\t\t}\n\n\t\t// owned objects can be accessed without locking\n\t\tsum += m_ownedItem.value;\n\n\t\treturn sum;\n\t}\n}\n\nvoid test()\n{\n\timport std.stdio;\n\n\tauto man = cast(shared)new Manager(\"My manager\");\n\t{\n\t\tauto l = man.lock();\n\t\tl.addItem(new shared(Item)(1.5));\n\t\tl.addItem(new shared(Item)(0.5));\n\t}\n\n\twritefln(\"Total value: %s\", man.lock().getTotalValue());\n}\n\n---\n",
				"name": "lock"
			},
			{
				"kind": "template",
				"line": 42,
				"members": [
					{
						"kind": "function",
						"line": 42,
						"endchar": 1,
						"char": 6,
						"type": "nothrow void(shared(T) object, scope void delegate(scope T) accessor)",
						"parameters": [
							{
								"type": "shared(T)",
								"name": "object"
							},
							{
								"storageClass": [
									"scope"
								],
								"type": "void delegate(scope T)",
								"name": "accessor"
							}
						],
						"name": "lock",
						"endline": 46
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"deco": "xC6Object",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "lock"
			},
			{
				"kind": "template",
				"line": 118,
				"members": [
					{
						"kind": "struct",
						"line": 118,
						"members": [
							{
								"kind": "variable",
								"line": 123,
								"char": 23,
								"type": "Rebindable!T",
								"name": "m_ref"
							},
							{
								"kind": "constructor",
								"line": 127,
								"endchar": 2,
								"char": 2,
								"type": "pure nothrow @trusted (shared(T) obj)",
								"parameters": [
									{
										"type": "shared(T)",
										"name": "obj"
									}
								],
								"name": "this",
								"endline": 134
							},
							{
								"kind": "destructor",
								"line": 136,
								"storageClass": [
									"nothrow",
									"pure",
									"@trusted"
								],
								"endchar": 2,
								"char": 2,
								"name": "~this",
								"endline": 142
							},
							{
								"kind": "function",
								"line": 150,
								"endchar": 63,
								"char": 21,
								"type": "inout nothrow @property inout(T)()",
								"name": "unsafeGet",
								"comment": "\t\tReturns an unshared reference to the locked object.\n\n\t\tNote that using this function breaks type safety. Be sure to not escape the reference beyond\n\t\tthe life time of the lock.\n",
								"endline": 150
							},
							{
								"kind": "function",
								"line": 152,
								"endchar": 49,
								"char": 11,
								"type": "inout nothrow inout(T)()",
								"name": "opDot",
								"endline": 152
							},
							{
								"kind": "function",
								"line": 157,
								"endchar": 3,
								"char": 17,
								"type": "pure nothrow Object()",
								"name": "getObject",
								"endline": 161
							}
						],
						"char": 1,
						"name": "ScopedLock"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tProxy structure that keeps the monitor of the given object locked until it\n\tgoes out of scope.\n\n\tAny unshared members of the object are safely accessible during this time. The usual\n\tway to use it is by calling lock.\n\n\tSee_Also: lock\n",
				"name": "ScopedLock"
			},
			{
				"kind": "template",
				"line": 175,
				"members": [
					{
						"kind": "function",
						"line": 175,
						"endchar": 1,
						"char": 17,
						"type": "pure Isolated!T(ARGS args)",
						"parameters": [
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"name": "makeIsolated",
						"endline": 183
					}
				],
				"char": 17,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"comment": "\tCreates a new isolated object.\n\n\tIsolated objects contain no mutable aliasing outside of their own reference tree. They can thus\n\tbe safely converted to immutable and they can be safely passed between threads.\n\n\tThe function returns an instance of Isolated that will allow proxied access to the members of\n\tthe object, as well as providing means to convert the object to immutable or to an ordinary\n\tmutable object.\nExample:\n\n---\nimport vibe.core.concurrency;\nimport vibe.core.core;\n\nstatic class Item {\n\tdouble value;\n\tstring name;\n}\n\nstatic void modifyItem(Isolated!Item itm)\n{\n\titm.value = 1.3;\n\t// TODO: send back to initiating thread\n}\n\nvoid test()\n{\n\timmutable(Item)[] items;\n\n\t// create immutable item procedurally\n\tauto itm = makeIsolated!Item();\n\titm.value = 2.4;\n\titm.name = \"Test\";\n\titems ~= itm.freeze();\n\n\t// send isolated item to other thread\n\tauto itm2 = makeIsolated!Item();\n\trunWorkerTask(&modifyItem, itm2.move());\n\t// ...\n}\n\n---\n",
				"name": "makeIsolated"
			},
			{
				"kind": "template",
				"line": 237,
				"members": [
					{
						"kind": "function",
						"line": 237,
						"endchar": 1,
						"char": 21,
						"type": "pure Isolated!(T[])(size_t size)",
						"parameters": [
							{
								"type": "size_t",
								"name": "size"
							}
						],
						"name": "makeIsolatedArray",
						"endline": 242
					}
				],
				"char": 21,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tCreates a new isolated array.\nExample:\n\n---\nimport vibe.core.concurrency;\nimport vibe.core.core;\n\nstatic void compute(Tid tid, Isolated!(double[]) array, size_t start_index)\n{\n\tforeach( i; 0 .. array.length )\n\t\tarray[i] = (start_index + i) * 0.5;\n\n\tsend(tid, array.move());\n}\n\nvoid test()\n{\n\timport std.stdio;\n\n\t// compute contents of an array using multiple threads\n\tauto arr = makeIsolatedArray!double(256);\n\n\t// partition the array (no copying takes place)\n\tsize_t[] indices = [64, 128, 192, 256];\n\tIsolated!(double[])[] subarrays = arr.splice(indices);\n\n\t// start processing in threads\n\tTid[] tids;\n\tforeach (i, idx; indices)\n\t\ttids ~= runWorkerTaskH(&compute, thisTid, subarrays[i].move(), idx);\n\n\t// collect results\n\tauto resultarrays = new Isolated!(double[])[tids.length];\n\tforeach( i, tid; tids )\n\t\tresultarrays[i] = receiveOnly!(Isolated!(double[])).move();\n\n\t// BUG: the arrays must be sorted here, but since there is no way to tell\n\t// from where something was received, this is difficult here.\n\n\t// merge results (no copying takes place again)\n\tforeach( i; 1 .. resultarrays.length )\n\t\tresultarrays[0].merge(resultarrays[i]);\n\n\t// convert the final result to immutable\n\tauto result = resultarrays[0].freeze();\n\n\twritefln(\"Result: %s\", result);\n}\n\n---\n",
				"name": "makeIsolatedArray"
			},
			{
				"kind": "template",
				"line": 296,
				"members": [
					{
						"kind": "function",
						"line": 296,
						"endchar": 1,
						"char": 12,
						"type": "Isolated!T(T object)",
						"parameters": [
							{
								"type": "T",
								"name": "object"
							}
						],
						"name": "assumeIsolated",
						"endline": 299
					}
				],
				"char": 12,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tUnsafe facility to assume that an existing reference is unique.\n",
				"name": "assumeIsolated"
			},
			{
				"kind": "template",
				"line": 306,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tEncapsulates the given type in a way that guarantees memory isolation.\n\n\tSee_Also: makeIsolated, makeIsolatedArray\n",
				"name": "Isolated"
			},
			{
				"kind": "template",
				"line": 588,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Encapsulates a reference in a way that disallows escaping it or any contained references.\n",
				"name": "ScopedRef"
			},
			{
				"kind": "template",
				"line": 938,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "TYPES"
					}
				],
				"name": "haveTypeAlready"
			},
			{
				"kind": "template",
				"line": 956,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "\n\n\n\n\tDetermines if the given list of types has any non-immutable aliasing outside of their object tree.\n\n\tThe types in particular may only contain plain data, pointers or arrays to immutable data, or references\n\tencapsulated in stdx.typecons.Isolated.\n",
				"name": "isStronglyIsolated"
			},
			{
				"kind": "template",
				"line": 984,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "\tDetermines if the given list of types has any non-immutable and unshared aliasing outside of their object tree.\n\n\tThe types in particular may only contain plain data, pointers or arrays to immutable or shared data, or references\n\tencapsulated in stdx.typecons.Isolated. Values that do not have unshared and unisolated aliasing are safe to be passed\n\tbetween threads.\n",
				"name": "isWeaklyIsolated"
			},
			{
				"kind": "template",
				"line": 1061,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"name": "isCopyable"
			},
			{
				"kind": "template",
				"line": 1078,
				"members": [
					{
						"kind": "struct",
						"line": 1078,
						"members": [
							{
								"kind": "variable",
								"line": 1080,
								"char": 27,
								"type": "FreeListRef!(shared(T))",
								"name": "m_result"
							},
							{
								"kind": "variable",
								"line": 1081,
								"char": 8,
								"type": "Task",
								"name": "m_task"
							},
							{
								"kind": "function",
								"line": 1085,
								"endchar": 57,
								"char": 17,
								"type": "const @property bool()",
								"name": "ready",
								"comment": "Checks if the values was fully computed.\n",
								"endline": 1085
							},
							{
								"kind": "function",
								"line": 1094,
								"endchar": 2,
								"char": 8,
								"type": "ref T()",
								"name": "getResult",
								"comment": " Returns the computed value.\n\n\t\tThis function waits for the computation to finish, if necessary, and\n\t\tthen returns the final value. In case of an uncaught exception\n\t\thappening during the computation, the exception will be thrown\n\t\tinstead.\n",
								"endline": 1099
							},
							{
								"kind": "function",
								"line": 1103,
								"endchar": 2,
								"char": 15,
								"type": "void()",
								"name": "init",
								"endline": 1106
							}
						],
						"char": 1,
						"name": "Future"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\n\n\n\n\tRepresents a values that will be computed asynchronously.\n\n\tThis type uses $(D alias this) to enable transparent access to the result\n\tvalue.\n",
				"name": "Future"
			},
			{
				"kind": "template",
				"line": 1127,
				"constraint": "is(typeof(callable(args)) == ReturnType!CALLABLE)",
				"members": [
					{
						"kind": "function",
						"line": 1127,
						"endchar": 1,
						"char": 30,
						"type": "Future!(ReturnType!CALLABLE)(CALLABLE callable, ARGS args)",
						"parameters": [
							{
								"type": "CALLABLE",
								"name": "callable"
							},
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"name": "async",
						"endline": 1143
					}
				],
				"char": 30,
				"parameters": [
					{
						"kind": "type",
						"name": "CALLABLE"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"comment": "\tStarts an asynchronous computation and returns a future for the result value.\n\n\tIf the supplied callable and arguments are all weakly isolated,\n\t$(D vibe.core.core.runWorkerTask) will be used to perform the computation.\n\tOtherwise, $(D vibe.core.core.runTask) will be used.\n\n\tParams:\n\t\tcallable: A callable value, can be either a function, a delegate, or a\n\t\t\tuser defined type that defines an $(D opCall).\n\t\targs: Arguments to pass to the callable.\n\n\tReturns:\n\t\tReturns a $(D Future) object that can be used to access the result.\n\n\tSee_also: $(D isWeaklyIsolated)\nExample:\n\n---\nimport vibe.core.core;\nimport vibe.core.log;\n\nvoid test()\n{\n\tstatic if (__VERSION__ >= 2065) {\n\tauto val = async({\n\t\tlogInfo(\"Starting to compute value in worker task.\");\n\t\tsleep(500.msecs); // simulate some lengthy computation\n\t\tlogInfo(\"Finished computing value in worker task.\");\n\t\treturn 32;\n\t});\n\n\tlogInfo(\"Starting computation in main task\");\n\tsleep(200.msecs); // simulate some lengthy computation\n\tlogInfo(\"Finished computation in main task. Waiting for async value.\");\n\tlogInfo(\"Result: %s\", val.getResult());\n\t}\n}\n\n---\n",
				"name": "async"
			},
			{
				"kind": "alias",
				"line": 1190,
				"deco": "S4vibe4core4task4Task",
				"char": 2,
				"name": "Tid",
				"comment": "\n\n\n\n\n\n\n"
			},
			{
				"kind": "function",
				"line": 1193,
				"deco": "FNdZS4vibe4core4task4Task",
				"endchar": 51,
				"char": 16,
				"name": "thisTid",
				"comment": "Returns the Tid of the caller (same as Task.getThis())\n\n\n\n\n\n\n\n\n",
				"originalType": "@property Tid()",
				"endline": 1193
			},
			{
				"kind": "template",
				"line": 1195,
				"members": [
					{
						"kind": "function",
						"line": 1195,
						"endchar": 2,
						"char": 7,
						"type": "void(Tid tid, ARGS args)",
						"parameters": [
							{
								"type": "Tid",
								"name": "tid"
							},
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"name": "send",
						"endline": 1203
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"comment": "\n\n\n\n\n\n\n",
				"name": "send"
			},
			{
				"kind": "template",
				"line": 1205,
				"members": [
					{
						"kind": "function",
						"line": 1205,
						"endchar": 2,
						"char": 7,
						"type": "void(Tid tid, ARGS args)",
						"parameters": [
							{
								"type": "Tid",
								"name": "tid"
							},
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"name": "prioritySend",
						"endline": 1213
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"comment": "\n\n\n\n\n\n\n",
				"name": "prioritySend"
			},
			{
				"kind": "template",
				"line": 1217,
				"members": [
					{
						"kind": "function",
						"line": 1217,
						"endchar": 2,
						"char": 7,
						"type": "void(OPS ops)",
						"parameters": [
							{
								"type": "OPS",
								"name": "ops"
							}
						],
						"name": "receive",
						"endline": 1221
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "tuple",
						"name": "OPS"
					}
				],
				"comment": "\n\n\n\n\n\n\n",
				"name": "receive"
			},
			{
				"kind": "template",
				"line": 1223,
				"members": [
					{
						"kind": "function",
						"line": 1223,
						"storageClass": [
							"auto"
						],
						"endchar": 2,
						"char": 7,
						"type": "()",
						"name": "receiveOnly",
						"endline": 1237
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"comment": "\n\n\n\n\n\n\n",
				"name": "receiveOnly"
			},
			{
				"kind": "template",
				"line": 1239,
				"members": [
					{
						"kind": "function",
						"line": 1239,
						"endchar": 2,
						"char": 7,
						"type": "bool(Duration timeout, OPS ops)",
						"parameters": [
							{
								"type": "Duration",
								"name": "timeout"
							},
							{
								"type": "OPS",
								"name": "ops"
							}
						],
						"name": "receiveTimeout",
						"endline": 1243
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "tuple",
						"name": "OPS"
					}
				],
				"comment": "\n\n\n\n\n\n\n",
				"name": "receiveTimeout"
			},
			{
				"kind": "function",
				"line": 1245,
				"deco": "FS4vibe4core4task4TaskkE3std11concurrency10OnCrowdingZv",
				"endchar": 2,
				"char": 7,
				"parameters": [
					{
						"deco": "S4vibe4core4task4Task",
						"name": "tid"
					},
					{
						"deco": "k",
						"name": "messages"
					},
					{
						"deco": "E3std11concurrency10OnCrowding",
						"name": "on_crowding"
					}
				],
				"name": "setMaxMailboxSize",
				"comment": "\n\n\n\n\n\n\n",
				"originalType": "void(Tid tid, size_t messages, OnCrowding on_crowding)",
				"endline": 1252
			},
			{
				"kind": "function",
				"line": 1254,
				"deco": "FS4vibe4core4task4TaskkPFS4vibe4core4task4TaskZbZv",
				"endchar": 2,
				"char": 7,
				"parameters": [
					{
						"deco": "S4vibe4core4task4Task",
						"name": "tid"
					},
					{
						"deco": "k",
						"name": "messages"
					},
					{
						"deco": "PFS4vibe4core4task4TaskZb",
						"name": "on_crowding"
					}
				],
				"name": "setMaxMailboxSize",
				"comment": "\n\n\n\n\n\n\nExample:\n\n---\nstatic class CLS {}\nstatic assert(is(typeof(send(Tid.init, makeIsolated!CLS()))));\nstatic assert(is(typeof(send(Tid.init, 1))));\nstatic assert(is(typeof(send(Tid.init, 1, \"str\", makeIsolated!CLS()))));\nstatic assert(!is(typeof(send(Tid.init, new CLS))));\nstatic assert(is(typeof(receive((Isolated!CLS){}))));\nstatic assert(is(typeof(receive((int){}))));\nstatic assert(is(typeof(receive!(void delegate(int, string, Isolated!CLS))((int, string, Isolated!CLS){}))));\nstatic assert(!is(typeof(receive((CLS){}))));\n\n\n---\n",
				"originalType": "void(Tid tid, size_t messages, bool function(Tid) on_crowding)",
				"endline": 1257
			}
		],
		"name": "vibe.core.concurrency",
		"comment": "\tFunctions and structures for dealing with threads and concurrent access.\n\n\tThis module is modeled after std.concurrency, but provides a fiber-aware alternative\n\tto it. All blocking operations will yield the calling fiber instead of blocking it.\n\n\tCopyright: © 2013-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\core\\connectionpool.d",
		"members": [
			{
				"kind": "template",
				"line": 24,
				"members": [
					{
						"kind": "class",
						"line": 24,
						"members": [
							{
								"kind": "variable",
								"line": 27,
								"char": 25,
								"type": "Connection delegate()",
								"name": "m_connectionFactory"
							},
							{
								"kind": "variable",
								"line": 28,
								"char": 16,
								"type": "Connection[]",
								"name": "m_connections"
							},
							{
								"kind": "variable",
								"line": 29,
								"char": 26,
								"type": "int[const(Connection)]",
								"name": "m_lockCount"
							},
							{
								"kind": "constructor",
								"line": 32,
								"endchar": 2,
								"char": 2,
								"type": "(Connection delegate() connection_factory)",
								"parameters": [
									{
										"type": "Connection delegate()",
										"name": "connection_factory"
									}
								],
								"name": "this",
								"endline": 35
							},
							{
								"kind": "function",
								"line": 37,
								"endchar": 2,
								"char": 30,
								"type": "LockedConnection!Connection()",
								"name": "lockConnection",
								"endline": 64
							}
						],
						"char": 1,
						"name": "ConnectionPool"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Connection"
					}
				],
				"comment": "\tGeneric connection pool class.\n\n\tThe connection pool is creating connections using the supplied factory function as needed\n\twhenever lockConnection() is called. Connections are associated to the calling fiber, as long\n\tas any copy of the returned LockedConnection object still exists. Connections that are not\n\tassociated\n",
				"name": "ConnectionPool"
			},
			{
				"kind": "template",
				"line": 67,
				"members": [
					{
						"kind": "struct",
						"line": 67,
						"members": [
							{
								"kind": "variable",
								"line": 69,
								"char": 29,
								"type": "ConnectionPool!Connection",
								"name": "m_pool"
							},
							{
								"kind": "variable",
								"line": 70,
								"char": 8,
								"type": "Task",
								"name": "m_task"
							},
							{
								"kind": "variable",
								"line": 71,
								"char": 14,
								"type": "Connection",
								"name": "m_conn"
							},
							{
								"kind": "constructor",
								"line": 75,
								"endchar": 2,
								"char": 10,
								"type": "(ConnectionPool!Connection pool, Connection conn)",
								"parameters": [
									{
										"type": "ConnectionPool!Connection",
										"name": "pool"
									},
									{
										"type": "Connection",
										"name": "conn"
									}
								],
								"name": "this",
								"endline": 81
							},
							{
								"kind": "destructor",
								"line": 94,
								"endchar": 2,
								"char": 2,
								"name": "~this",
								"endline": 109
							}
						],
						"char": 1,
						"name": "LockedConnection"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Connection"
					}
				],
				"name": "LockedConnection"
			}
		],
		"name": "vibe.core.connectionpool",
		"comment": "\tGeneric connection pool for reusing persistent connections across fibers.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\core\\core.d",
		"members": [
			{
				"kind": "import",
				"line": 10,
				"char": 15,
				"name": "vibe.core.driver"
			},
			{
				"kind": "alias",
				"line": 32,
				"deco": "PFNbE4vibe4core4core9TaskEventS4vibe4core4task4TaskZv",
				"char": 1,
				"name": "TaskEventCb"
			},
			{
				"kind": "function",
				"line": 75,
				"deco": "FZi",
				"endchar": 1,
				"char": 5,
				"name": "runEventLoop",
				"comment": "\n\n\n\n\tStarts the vibe event loop.\n\n\tNote that this function is usually called automatically by the vibe framework. However, if\n\tyou provide your own main() function, you need to call it manually.\n\n\tThe event loop will continue running during the whole life time of the application.\n\tTasks will be started and handled from within the event loop.\n",
				"endline": 107
			},
			{
				"kind": "function",
				"line": 121,
				"deco": "FbZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "b",
						"default": "false",
						"name": "shutdown_all_threads"
					}
				],
				"name": "exitEventLoop",
				"comment": "\tStops the currently running event loop.\n\n\tCalling this function will cause the event loop to stop event processing and\n\tthe corresponding call to runEventLoop() will return to its caller.\n\n\tParams:\n\t\tshutdown_all_threads = If true, exits event loops of all threads -\n\t\t\tfalse by default. Note that the event loops of all threads are\n\t\t\tautomatically stopped when the main thread exits, so usually\n\t\t\tthere is no need to set shutdown_all_threads to true.\n",
				"endline": 134
			},
			{
				"kind": "function",
				"line": 143,
				"deco": "FZb",
				"endchar": 1,
				"char": 6,
				"name": "processEvents",
				"comment": "\tProcess all pending events without blocking.\n\n\tChecks if events are ready to trigger immediately, and run their callbacks if so.\n\n\tReturns: Returns false iff exitEventLoop was called in the process.\n",
				"endline": 148
			},
			{
				"kind": "function",
				"line": 158,
				"deco": "FDFZvZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "DFZv",
						"name": "del"
					}
				],
				"name": "setIdleHandler",
				"comment": "\tSets a callback that is called whenever no events are left in the event queue.\n\n\tThe callback delegate is called whenever all events in the event queue have been\n\tprocessed. Returning true from the callback will cause another idle event to\n\tbe triggered immediately after processing any events that have arrived in the\n\tmeantime. Returning false will instead wait until another event has arrived first.\n",
				"endline": 161
			},
			{
				"kind": "function",
				"line": 163,
				"deco": "FDFZbZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "DFZb",
						"name": "del"
					}
				],
				"name": "setIdleHandler",
				"comment": "ditto\n",
				"endline": 166
			},
			{
				"kind": "template",
				"line": 177,
				"members": [
					{
						"kind": "function",
						"line": 177,
						"endchar": 1,
						"char": 6,
						"type": "Task(void delegate(ARGS) task, ARGS args)",
						"parameters": [
							{
								"type": "void delegate(ARGS)",
								"name": "task"
							},
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"name": "runTask",
						"endline": 181
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"comment": "\tRuns a new asynchronous task.\n\n\ttask will be called synchronously from within the vibeRunTask call. It will\n\tcontinue to run until vibeYield() or any of the I/O or wait functions is\n\tcalled.\n\n\tNote that the maximum size of all args must not exceed MaxTaskParameterSize.\n",
				"name": "runTask"
			},
			{
				"kind": "template",
				"line": 227,
				"constraint": "is(typeof(*func) == function)",
				"members": [
					{
						"kind": "function",
						"line": 227,
						"endchar": 1,
						"char": 6,
						"type": "void(FT func, auto ref ARGS args)",
						"parameters": [
							{
								"type": "FT",
								"name": "func"
							},
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "ARGS",
								"name": "args"
							}
						],
						"name": "runWorkerTask",
						"endline": 232
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "FT"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"comment": "\tRuns a new asynchronous task in a worker thread.\n\n\tOnly function pointers with weakly isolated arguments are allowed to be\n\table to guarantee thread-safety.\n",
				"name": "runWorkerTask"
			},
			{
				"kind": "template",
				"line": 235,
				"constraint": "is(typeof(__traits(getMember, object, __traits(identifier, method))))",
				"members": [
					{
						"kind": "function",
						"line": 235,
						"endchar": 1,
						"char": 6,
						"type": "void(shared(T) object, auto ref ARGS args)",
						"parameters": [
							{
								"type": "shared(T)",
								"name": "object"
							},
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "ARGS",
								"name": "args"
							}
						],
						"name": "runWorkerTask",
						"endline": 241
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "method"
					},
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"comment": "ditto\n",
				"name": "runWorkerTask"
			},
			{
				"kind": "template",
				"line": 252,
				"constraint": "is(typeof(*func) == function)",
				"members": [
					{
						"kind": "function",
						"line": 252,
						"endchar": 1,
						"char": 6,
						"type": "Task(FT func, auto ref ARGS args)",
						"parameters": [
							{
								"type": "FT",
								"name": "func"
							},
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "ARGS",
								"name": "args"
							}
						],
						"name": "runWorkerTaskH",
						"endline": 266
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "FT"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"comment": "\tRuns a new asynchronous task in a worker thread, returning the task handle.\n\n\tThis function will yield and wait for the new task to be created and started\n\tin the worker thread, then resume and return it.\n\n\tOnly function pointers with weakly isolated arguments are allowed to be\n\table to guarantee thread-safety.\nExample:\nRunning a worker task using a function\n---\nstatic void workerFunc(int param)\n{\n\tlogInfo(\"Param: %s\", param);\n}\n\nstatic void test()\n{\n\trunWorkerTask(&workerFunc, 42);\n\trunWorkerTask(&workerFunc, cast(ubyte)42); // implicit conversion #719\n\trunWorkerTaskDist(&workerFunc, 42);\n\trunWorkerTaskDist(&workerFunc, cast(ubyte)42); // implicit conversion #719\n}\n\n---\nExample:\nRunning a worker task using a class method\n---\nstatic class Test {\n\tvoid workerMethod(int param)\n\tshared {\n\t\tlogInfo(\"Param: %s\", param);\n\t}\n}\n\nstatic void test()\n{\n\tauto cls = new shared Test;\n\trunWorkerTask!(Test.workerMethod)(cls, 42);\n\trunWorkerTask!(Test.workerMethod)(cls, cast(ubyte)42); // #719\n\trunWorkerTaskDist!(Test.workerMethod)(cls, 42);\n\trunWorkerTaskDist!(Test.workerMethod)(cls, cast(ubyte)42); // #719\n}\n\n---\nExample:\nRunning a worker task using a function and communicating with it\n---\nstatic void workerFunc(Task caller)\n{\n\tint counter = 10;\n\twhile (receiveOnly!string() == \"ping\" && --counter) {\n\t\tlogInfo(\"pong\");\n\t\tcaller.send(\"pong\");\n\t}\n\tcaller.send(\"goodbye\");\n\n}\n\nstatic void test()\n{\n\tTask callee = runWorkerTaskH(&workerFunc, Task.getThis);\n\tdo {\n\t\tlogInfo(\"ping\");\n\t\tcallee.send(\"ping\");\n\t} while (receiveOnly!string() == \"pong\");\n}\n\nstatic void work719(int) {}\nstatic void test719() { runWorkerTaskH(&work719, cast(ubyte)42); }\n\n---\nExample:\nRunning a worker task using a class method and communicating with it\n---\nstatic class Test {\n\tvoid workerMethod(Task caller) shared {\n\t\tint counter = 10;\n\t\twhile (receiveOnly!string() == \"ping\" && --counter) {\n\t\t\tlogInfo(\"pong\");\n\t\t\tcaller.send(\"pong\");\n\t\t}\n\t\tcaller.send(\"goodbye\");\n\t}\n}\n\nstatic void test()\n{\n\tauto cls = new shared Test;\n\tTask callee = runWorkerTaskH!(Test.workerMethod)(cls, Task.getThis());\n\tdo {\n\t\tlogInfo(\"ping\");\n\t\tcallee.send(\"ping\");\n\t} while (receiveOnly!string() == \"pong\");\n}\n\nstatic class Class719 {\n\tvoid work(int) shared {}\n}\nstatic void test719() {\n\tauto cls = new shared Class719;\n\trunWorkerTaskH!(Class719.work)(cls, cast(ubyte)42);\n}\n\n---\n",
				"name": "runWorkerTaskH"
			},
			{
				"kind": "template",
				"line": 268,
				"constraint": "is(typeof(__traits(getMember, object, __traits(identifier, method))))",
				"members": [
					{
						"kind": "function",
						"line": 268,
						"endchar": 1,
						"char": 6,
						"type": "Task(shared(T) object, auto ref ARGS args)",
						"parameters": [
							{
								"type": "shared(T)",
								"name": "object"
							},
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "ARGS",
								"name": "args"
							}
						],
						"name": "runWorkerTaskH",
						"endline": 285
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "method"
					},
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"comment": "ditto\n",
				"name": "runWorkerTaskH"
			},
			{
				"kind": "template",
				"line": 406,
				"constraint": "is(typeof(*func) == function)",
				"members": [
					{
						"kind": "function",
						"line": 406,
						"endchar": 1,
						"char": 6,
						"type": "void(FT func, auto ref ARGS args)",
						"parameters": [
							{
								"type": "FT",
								"name": "func"
							},
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "ARGS",
								"name": "args"
							}
						],
						"name": "runWorkerTaskDist",
						"endline": 411
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "FT"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"comment": "\tRuns a new asynchronous task in all worker threads concurrently.\n\n\tThis function is mainly useful for long-living tasks that distribute their\n\twork across all CPU cores. Only function pointers with weakly isolated\n\targuments are allowed to be able to guarantee thread-safety.\n",
				"name": "runWorkerTaskDist"
			},
			{
				"kind": "template",
				"line": 413,
				"members": [
					{
						"kind": "function",
						"line": 413,
						"endchar": 1,
						"char": 6,
						"type": "void(shared(T) object, ARGS args)",
						"parameters": [
							{
								"type": "shared(T)",
								"name": "object"
							},
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"name": "runWorkerTaskDist",
						"endline": 419
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "method"
					},
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"comment": "ditto\n",
				"name": "runWorkerTaskDist"
			},
			{
				"kind": "function",
				"line": 492,
				"deco": "FZv",
				"endchar": 1,
				"char": 6,
				"name": "yield",
				"comment": "\tSuspends the execution of the calling task to let other tasks and events be\n\thandled.\n\n\tCalling this function in short intervals is recommended if long CPU\n\tcomputations are carried out by a task. It can also be used in conjunction\n\twith Signals to implement cross-fiber events with no polling.\n",
				"endline": 506
			},
			{
				"kind": "function",
				"line": 514,
				"deco": "FZv",
				"endchar": 1,
				"char": 6,
				"name": "rawYield",
				"comment": "\tYields execution of this task until an event wakes it up again.\n\n\tBeware that the task will starve if no event wakes it up.\n",
				"endline": 517
			},
			{
				"kind": "function",
				"line": 526,
				"deco": "FS4core4time8DurationZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "S4core4time8Duration",
						"name": "timeout"
					}
				],
				"name": "sleep",
				"comment": "\tSuspends the execution of the calling task for the specified amount of time.\n\n\tNote that other tasks of the same thread will continue to run during the\n\twait time, in contrast to $(D core.thread.Thread.sleep), which shouldn't be\n\tused in vibe.d applications.\nExample:\n\n---\nimport vibe.core.core : sleep;\nimport vibe.core.log : logInfo;\nimport core.time : msecs;\n\nvoid test()\n{\n\tlogInfo(\"Sleeping for half a second...\");\n\tsleep(500.msecs);\n\tlogInfo(\"Done sleeping.\");\n}\n\n---\n",
				"endline": 532
			},
			{
				"kind": "function",
				"line": 563,
				"deco": "FS4core4time8DurationDFZvbZS4vibe4core4core5Timer",
				"endchar": 1,
				"char": 7,
				"parameters": [
					{
						"deco": "S4core4time8Duration",
						"name": "timeout"
					},
					{
						"deco": "DFZv",
						"name": "callback"
					},
					{
						"deco": "b",
						"default": "false",
						"name": "periodic"
					}
				],
				"name": "setTimer",
				"comment": "\tReturns a new armed timer.\n\n\tNote that timers can only work if an event loop is running.\n\n\tParams:\n\t\ttimeout = Determines the minimum amount of time that elapses before the timer fires.\n\t\tcallback = This delegate will be called when the timer fires\n\t\tperiodic = Speficies if the timer fires repeatedly or only once\n\n\tReturns:\n\t\tReturns a Timer object that can be used to identify and modify the timer.\n\n\tSee_also: createTimer\nExample:\n\n---\nvoid printTime()\n{\n\timport std.datetime;\n\tlogInfo(\"The time is: %s\", Clock.currTime());\n}\n\nvoid test()\n{\n\timport vibe.core.core;\n\t// start a periodic timer that prints the time every second\n\tsetTimer(1.seconds, toDelegate(&printTime), true);\n}\n\n---\n",
				"endline": 568
			},
			{
				"kind": "function",
				"line": 591,
				"deco": "FDFZvZS4vibe4core4core5Timer",
				"endchar": 1,
				"char": 7,
				"parameters": [
					{
						"deco": "DFZv",
						"name": "callback"
					}
				],
				"name": "createTimer",
				"comment": "\tCreates a new timer without arming it.\n\n\tSee_also: setTimer\n",
				"endline": 595
			},
			{
				"kind": "function",
				"line": 612,
				"deco": "FiE4vibe4core6driver19FileDescriptorEvent7TriggerZC4vibe4core6driver19FileDescriptorEvent",
				"endchar": 1,
				"char": 21,
				"parameters": [
					{
						"deco": "i",
						"name": "file_descriptor"
					},
					{
						"deco": "E4vibe4core6driver19FileDescriptorEvent7Trigger",
						"name": "event_mask"
					}
				],
				"name": "createFileDescriptorEvent",
				"comment": "\tCreates an event to wait on an existing file descriptor.\n\n\tThe file descriptor usually needs to be a non-blocking socket for this to\n\twork.\n\n\tParams:\n\t\tfile_descriptor = The Posix file descriptor to watch\n\t\tevent_mask = Specifies which events will be listened for\n\n\tReturns:\n\t\tReturns a newly created FileDescriptorEvent associated with the given\n\t\tfile descriptor.\n",
				"originalType": "FileDescriptorEvent(int file_descriptor, FileDescriptorEvent.Trigger event_mask)",
				"endline": 616
			},
			{
				"kind": "function",
				"line": 636,
				"deco": "FkZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "k",
						"name": "sz"
					}
				],
				"name": "setTaskStackSize",
				"comment": "\tSets the stack size to use for tasks.\n\n\tThe default stack size is set to 512 KiB on 32-bit systems and to 16 MiB\n\ton 64-bit systems, which is sufficient for most tasks. Tuning this value\n\tcan be used to reduce memory usage for large numbers of concurrent tasks\n\tor to avoid stack overflows for applications with heavy stack use.\n\n\tNote that this function must be called at initialization time, before any\n\ttask is started to have an effect.\n\n\tAlso note that the stack will initially not consume actual physical memory -\n\tit just reserves virtual address space. Only once the stack gets actually\n\tfilled up with data will physical memory then be reserved page by page. This\n\tmeans that the stack can safely be set to large sizes on 64-bit systems\n\twithout having to worry about memory usage.\n",
				"originalType": "void(size_t sz)",
				"endline": 639
			},
			{
				"kind": "function",
				"line": 645,
				"deco": "FNdZk",
				"endchar": 1,
				"char": 18,
				"name": "workerThreadCount",
				"comment": "\tThe number of worker threads.\n",
				"originalType": "@property size_t()",
				"endline": 648
			},
			{
				"kind": "function",
				"line": 658,
				"deco": "FAyaAyaZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "uname"
					},
					{
						"deco": "Aya",
						"name": "gname"
					}
				],
				"name": "lowerPrivileges",
				"comment": "\tSets the effective user and group ID to the ones configured for privilege lowering.\n\n\tThis function is useful for services run as root to give up on the privileges that\n\tthey only need for initialization (such as listening on ports <= 1024 or opening\n\tsystem log files).\n",
				"endline": 674
			},
			{
				"kind": "function",
				"line": 677,
				"deco": "FZv",
				"endchar": 1,
				"char": 6,
				"name": "lowerPrivileges",
				"endline": 680
			},
			{
				"kind": "function",
				"line": 690,
				"deco": "FPFNbE4vibe4core4core9TaskEventS4vibe4core4task4TaskZvZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "PFNbE4vibe4core4core9TaskEventS4vibe4core4task4TaskZv",
						"name": "func"
					}
				],
				"name": "setTaskEventCallback",
				"comment": "\tSets a callback that is invoked whenever a task changes its status.\n\n\tThis function is useful mostly for implementing debuggers that\n\tanalyze the life time of tasks, including task switches. Note that\n\tthe callback will only be called for debug builds.\n",
				"originalType": "void(TaskEventCb func)",
				"endline": 693
			},
			{
				"kind": "variable",
				"line": 699,
				"init": "\"0.7.23\"",
				"storageClass": [
					"enum"
				],
				"deco": "Aya",
				"char": 6,
				"name": "vibeVersionString",
				"comment": "\tA version string representing the current vibe version\n"
			},
			{
				"kind": "alias",
				"line": 702,
				"storageClass": [
					"deprecated"
				],
				"char": 46,
				"name": "VibeVersionString",
				"comment": "Compatibility alias\n"
			},
			{
				"kind": "variable",
				"line": 709,
				"init": "128",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "maxTaskParameterSize",
				"comment": "\tThe maximum combined size of all parameters passed to a task delegate\n\n\tSee_Also: runTask\n"
			},
			{
				"kind": "alias",
				"line": 712,
				"storageClass": [
					"deprecated"
				],
				"char": 49,
				"name": "MaxTaskParameterSize",
				"comment": "Compatibility alias\n"
			},
			{
				"kind": "struct",
				"line": 717,
				"members": [
					{
						"kind": "destructor",
						"line": 736,
						"deco": "FZv",
						"endchar": 2,
						"char": 2,
						"name": "~this",
						"endline": 740
					},
					{
						"kind": "function",
						"line": 743,
						"deco": "FNdZb",
						"endchar": 67,
						"char": 17,
						"name": "pending",
						"comment": "True if the timer is yet to fire.\n",
						"endline": 743
					},
					{
						"kind": "function",
						"line": 746,
						"deco": "xFNdZk",
						"endchar": 45,
						"char": 19,
						"name": "id",
						"comment": "The internal ID of the timer.\n",
						"originalType": "const @property size_t()",
						"endline": 746
					},
					{
						"kind": "function",
						"line": 748,
						"deco": "xFZb",
						"endchar": 50,
						"char": 7,
						"name": "opCast",
						"endline": 748
					},
					{
						"kind": "function",
						"line": 752,
						"deco": "FS4core4time8DurationbZv",
						"endchar": 52,
						"char": 7,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "dur"
							},
							{
								"deco": "b",
								"default": "false",
								"name": "periodic"
							}
						],
						"name": "rearm",
						"comment": " Resets the timer to the specified timeout\n",
						"endline": 754
					},
					{
						"kind": "function",
						"line": 758,
						"deco": "FZv",
						"endchar": 42,
						"char": 7,
						"name": "stop",
						"comment": " Resets the timer and avoids any firing.\n",
						"endline": 758
					},
					{
						"kind": "function",
						"line": 762,
						"deco": "FZv",
						"endchar": 42,
						"char": 7,
						"name": "wait",
						"comment": " Waits until the timer fires.\n",
						"endline": 762
					},
					{
						"kind": "function",
						"line": 717,
						"deco": "FNcNjS4vibe4core4core5TimerZS4vibe4core4core5Timer",
						"char": 1,
						"parameters": [
							{
								"deco": "S4vibe4core4core5Timer",
								"name": "p"
							}
						],
						"name": "opAssign"
					}
				],
				"char": 1,
				"name": "Timer",
				"comment": "\tRepresents a timer.\n"
			},
			{
				"kind": "template",
				"line": 803,
				"members": [
					{
						"kind": "struct",
						"line": 803,
						"members": [
							{
								"kind": "variable",
								"line": 806,
								"init": "size_t.max",
								"char": 10,
								"type": "size_t",
								"name": "m_offset"
							},
							{
								"kind": "variable",
								"line": 807,
								"char": 10,
								"type": "size_t",
								"name": "m_id"
							},
							{
								"kind": "variable",
								"line": 808,
								"char": 5,
								"type": "T",
								"name": "m_initValue"
							},
							{
								"kind": "variable",
								"line": 809,
								"init": "false",
								"deco": "b",
								"char": 8,
								"name": "m_hasInitValue"
							},
							{
								"kind": "constructor",
								"line": 812,
								"endchar": 68,
								"char": 2,
								"type": "(T init_val)",
								"parameters": [
									{
										"type": "T",
										"name": "init_val"
									}
								],
								"name": "this",
								"endline": 812
							},
							{
								"kind": "function",
								"line": 816,
								"endchar": 49,
								"char": 7,
								"type": "void(T value)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "opAssign",
								"endline": 816
							},
							{
								"kind": "function",
								"line": 818,
								"endchar": 2,
								"char": 18,
								"type": "@property ref T()",
								"name": "storage",
								"endline": 879
							}
						],
						"char": 1,
						"name": "TaskLocal"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tImplements a task local storage variable.\n\n\tTask local variables, similar to thread local variables, exist separately\n\tin each task. Consequently, they do not need any form of synchronization\n\twhen accessing them.\n\n\tNote, however, that each TaskLocal variable will increase the memory footprint\n\tof any task that uses task local storage. There is also an overhead to access\n\tTaskLocal variables, higher than for thread local variables, but generelly\n\tstill O(1) (since actual storage acquisition is done lazily the first access\n\tcan require a memory allocation with unknown computational costs).\n\n\tNotice:\n\t\tFiberLocal instances MUST be declared as static/global thread-local\n\t\tvariables. Defining them as a temporary/stack variable will cause\n\t\tcrashes or data corruption!\n\n\tExamples:\n\t\t---\n\t\tTaskLocal!string s_myString = \"world\";\n\n\t\tvoid taskFunc()\n\t\t{\n\t\t\tassert(s_myString == \"world\");\n\t\t\ts_myString = \"hello\";\n\t\t\tassert(s_myString == \"hello\");\n\t\t}\n\n\t\tshared static this()\n\t\t{\n\t\t\t// both tasks will get independent storage for s_myString\n\t\t\trunTask(&taskFunc);\n\t\t\trunTask(&taskFunc);\n\t\t}\n\t\t---\n",
				"name": "TaskLocal"
			},
			{
				"kind": "enum",
				"line": 895,
				"members": [
					{
						"kind": "enum member",
						"line": 896,
						"value": "0",
						"char": 2,
						"name": "preStart",
						"comment": "Just about to invoke the fiber which starts execution\n"
					},
					{
						"kind": "enum member",
						"line": 897,
						"value": "1",
						"char": 2,
						"name": "postStart",
						"comment": "After the fiber has returned for the first time (by yield or exit)\n"
					},
					{
						"kind": "enum member",
						"line": 898,
						"value": "2",
						"char": 2,
						"name": "start",
						"comment": "Just about to start execution\n"
					},
					{
						"kind": "enum member",
						"line": 899,
						"value": "3",
						"char": 2,
						"name": "yield",
						"comment": "Temporarily paused\n"
					},
					{
						"kind": "enum member",
						"line": 900,
						"value": "4",
						"char": 2,
						"name": "resume",
						"comment": "Resumed from a prior yield\n"
					},
					{
						"kind": "enum member",
						"line": 901,
						"value": "5",
						"char": 2,
						"name": "end",
						"comment": "Ended normally\n"
					},
					{
						"kind": "enum member",
						"line": 902,
						"value": "6",
						"char": 2,
						"name": "fail",
						"comment": "Ended with an exception\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "TaskEvent",
				"comment": "\tHigh level state change events for a Task\n"
			},
			{
				"kind": "alias",
				"line": 1234,
				"deco": "S3std7variant19__T8VariantNVki128Z8VariantN",
				"char": 1,
				"name": "TaskArgsVariant"
			}
		],
		"name": "vibe.core.core",
		"comment": "\tThis module contains the core functionality of the vibe.d framework.\n\n\tCopyright: © 2012-2015 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\core\\driver.d",
		"members": [
			{
				"kind": "import",
				"line": 10,
				"char": 15,
				"name": "vibe.core.file"
			},
			{
				"kind": "import",
				"line": 11,
				"char": 15,
				"name": "vibe.core.net"
			},
			{
				"kind": "import",
				"line": 12,
				"char": 15,
				"name": "vibe.core.sync"
			},
			{
				"kind": "import",
				"line": 13,
				"char": 15,
				"name": "vibe.core.stream"
			},
			{
				"kind": "import",
				"line": 14,
				"char": 15,
				"name": "vibe.core.task"
			},
			{
				"kind": "alias",
				"line": 25,
				"deco": "C4vibe4core6driver11EventDriver",
				"char": 8,
				"name": "StoredEventDriver"
			},
			{
				"kind": "function",
				"line": 31,
				"deco": "FNbbZC4vibe4core6driver11EventDriver",
				"endchar": 1,
				"char": 19,
				"parameters": [
					{
						"deco": "b",
						"default": "false",
						"name": "ignore_unloaded"
					}
				],
				"name": "getEventDriver",
				"comment": "\tReturns the active event driver\n",
				"originalType": "nothrow StoredEventDriver(bool ignore_unloaded = false)",
				"endline": 35
			},
			{
				"kind": "interface",
				"line": 65,
				"members": [
					{
						"kind": "function",
						"line": 71,
						"storageClass": [
							"abstract"
						],
						"deco": "FZv",
						"char": 7,
						"name": "dispose",
						"comment": " Frees all resources of the driver and prepares it for consumption by the GC.\n\n\t\tNote that the driver will not be usable after calling this method. Any\n\t\tfurther calls are illegal and result in undefined behavior.\n"
					},
					{
						"kind": "function",
						"line": 78,
						"storageClass": [
							"abstract"
						],
						"deco": "FZi",
						"char": 6,
						"name": "runEventLoop",
						"comment": " Starts the event loop.\n\n\t\tThe loop will continue to run until either no more event listeners are active or until\n\t\texitEventLoop() is called.\n"
					},
					{
						"kind": "function",
						"line": 82,
						"storageClass": [
							"abstract"
						],
						"deco": "FZi",
						"char": 6,
						"name": "runEventLoopOnce"
					},
					{
						"kind": "function",
						"line": 86,
						"storageClass": [
							"abstract"
						],
						"deco": "FZb",
						"char": 7,
						"name": "processEvents",
						"comment": " Processes all outstanding events if any, does not block.\n"
					},
					{
						"kind": "function",
						"line": 90,
						"storageClass": [
							"abstract"
						],
						"deco": "FZv",
						"char": 7,
						"name": "exitEventLoop",
						"comment": " Exits any running event loop.\n"
					},
					{
						"kind": "function",
						"line": 94,
						"storageClass": [
							"abstract"
						],
						"deco": "FS4vibe4inet4path4PathE4vibe4core4file8FileModeZC4vibe4core4file10FileStream",
						"char": 13,
						"parameters": [
							{
								"deco": "S4vibe4inet4path4Path",
								"name": "path"
							},
							{
								"deco": "E4vibe4core4file8FileMode",
								"name": "mode"
							}
						],
						"name": "openFile",
						"comment": " Opens a file on disk with the speficied file mode.\n"
					},
					{
						"kind": "function",
						"line": 98,
						"storageClass": [
							"abstract"
						],
						"deco": "FS4vibe4inet4path4PathbZC4vibe4core4file16DirectoryWatcher",
						"char": 19,
						"parameters": [
							{
								"deco": "S4vibe4inet4path4Path",
								"name": "path"
							},
							{
								"deco": "b",
								"name": "recursive"
							}
						],
						"name": "watchDirectory",
						"comment": " Starts watching a directory for changes.\n"
					},
					{
						"kind": "function",
						"line": 105,
						"storageClass": [
							"abstract"
						],
						"deco": "FAyatbZS4vibe4core3net14NetworkAddress",
						"char": 17,
						"parameters": [
							{
								"deco": "Aya",
								"name": "host"
							},
							{
								"deco": "t",
								"name": "family"
							},
							{
								"deco": "b",
								"name": "use_dns"
							}
						],
						"name": "resolveHost",
						"comment": " Resolves the given host name or IP address string.\n\n\t\t'host' can be a DNS name (if use_dns is set) or an IPv4 or IPv6\n\t\taddress string.\n"
					},
					{
						"kind": "function",
						"line": 109,
						"storageClass": [
							"abstract"
						],
						"deco": "FS4vibe4core3net14NetworkAddressZC4vibe4core3net13TCPConnection",
						"char": 16,
						"parameters": [
							{
								"deco": "S4vibe4core3net14NetworkAddress",
								"name": "address"
							}
						],
						"name": "connectTCP",
						"comment": " Establiches a tcp connection on the specified host/port.\n"
					},
					{
						"kind": "function",
						"line": 117,
						"storageClass": [
							"abstract"
						],
						"deco": "FtDFC4vibe4core3net13TCPConnectionZvAyaE4vibe4core3net16TCPListenOptionsZC4vibe4core3net11TCPListener",
						"char": 14,
						"parameters": [
							{
								"deco": "t",
								"name": "port"
							},
							{
								"deco": "DFC4vibe4core3net13TCPConnectionZv",
								"name": "conn_callback"
							},
							{
								"deco": "Aya",
								"name": "bind_address"
							},
							{
								"deco": "E4vibe4core3net16TCPListenOptions",
								"name": "options"
							}
						],
						"name": "listenTCP",
						"comment": " Listens on the specified port and interface for TCP connections.\n\n\t\t'bind_address' must be an IPv4 or IPv6 address string corresponding to a local network\n\t\tinterface. conn_callback is called for every incoming connection, each time from a\n\t\tnew task.\n"
					},
					{
						"kind": "function",
						"line": 124,
						"storageClass": [
							"abstract"
						],
						"deco": "FtAyaZC4vibe4core3net13UDPConnection",
						"char": 16,
						"parameters": [
							{
								"deco": "t",
								"name": "port"
							},
							{
								"deco": "Aya",
								"default": "\"0.0.0.0\"",
								"name": "bind_address"
							}
						],
						"name": "listenUDP",
						"comment": " Creates a new UDP socket and sets the specified address/port as the destination for packets.\n\n\t\tIf a bind port is specified, the socket will be able to receive UDP packets on that port.\n\t\tOtherwise, a random bind port is chosen.\n"
					},
					{
						"kind": "function",
						"line": 128,
						"storageClass": [
							"abstract"
						],
						"deco": "FZC4vibe4core4sync11ManualEvent",
						"char": 14,
						"name": "createManualEvent",
						"comment": " Creates a new manually triggered event.\n"
					},
					{
						"kind": "function",
						"line": 132,
						"storageClass": [
							"abstract"
						],
						"deco": "FiE4vibe4core6driver19FileDescriptorEvent7TriggerZC4vibe4core6driver19FileDescriptorEvent",
						"char": 22,
						"parameters": [
							{
								"deco": "i",
								"name": "file_descriptor"
							},
							{
								"deco": "E4vibe4core6driver19FileDescriptorEvent7Trigger",
								"name": "triggers"
							}
						],
						"name": "createFileDescriptorEvent",
						"comment": " Creates an event for waiting on a non-bocking file handle.\n",
						"originalType": "FileDescriptorEvent(int file_descriptor, FileDescriptorEvent.Trigger triggers)"
					},
					{
						"kind": "function",
						"line": 140,
						"storageClass": [
							"abstract"
						],
						"deco": "FDFZvZk",
						"char": 9,
						"parameters": [
							{
								"deco": "DFZv",
								"name": "callback"
							}
						],
						"name": "createTimer",
						"comment": " Creates a new timer.\n\n\t\tThe timer can be started by calling rearmTimer() with a timeout.\n\t\tThe initial reference count is 1, use releaseTimer to free all resources\n\t\tassociated with the timer.\n",
						"originalType": "size_t(void delegate() callback)"
					},
					{
						"kind": "function",
						"line": 143,
						"storageClass": [
							"abstract"
						],
						"deco": "FkZv",
						"char": 7,
						"parameters": [
							{
								"deco": "k",
								"name": "timer_id"
							}
						],
						"name": "acquireTimer",
						"comment": "Increases the reference count by one.\n",
						"originalType": "void(size_t timer_id)"
					},
					{
						"kind": "function",
						"line": 146,
						"storageClass": [
							"abstract"
						],
						"deco": "FkZv",
						"char": 7,
						"parameters": [
							{
								"deco": "k",
								"name": "timer_id"
							}
						],
						"name": "releaseTimer",
						"comment": "Decreases the reference count by one.\n",
						"originalType": "void(size_t timer_id)"
					},
					{
						"kind": "function",
						"line": 149,
						"storageClass": [
							"abstract"
						],
						"deco": "FkZb",
						"char": 7,
						"parameters": [
							{
								"deco": "k",
								"name": "timer_id"
							}
						],
						"name": "isTimerPending",
						"comment": "Queries if the timer is currently active.\n",
						"originalType": "bool(size_t timer_id)"
					},
					{
						"kind": "function",
						"line": 152,
						"storageClass": [
							"abstract"
						],
						"deco": "FkS4core4time8DurationbZv",
						"char": 7,
						"parameters": [
							{
								"deco": "k",
								"name": "timer_id"
							},
							{
								"deco": "S4core4time8Duration",
								"name": "dur"
							},
							{
								"deco": "b",
								"name": "periodic"
							}
						],
						"name": "rearmTimer",
						"comment": "Resets the timeout of the timer.\n",
						"originalType": "void(size_t timer_id, Duration dur, bool periodic)"
					},
					{
						"kind": "function",
						"line": 155,
						"storageClass": [
							"abstract"
						],
						"deco": "FkZv",
						"char": 7,
						"parameters": [
							{
								"deco": "k",
								"name": "timer_id"
							}
						],
						"name": "stopTimer",
						"comment": "Stops the timer.\n",
						"originalType": "void(size_t timer_id)"
					},
					{
						"kind": "function",
						"line": 158,
						"storageClass": [
							"abstract"
						],
						"deco": "FkZv",
						"char": 7,
						"parameters": [
							{
								"deco": "k",
								"name": "timer_id"
							}
						],
						"name": "waitTimer",
						"comment": "Waits for the pending timer to expire.\n",
						"originalType": "void(size_t timer_id)"
					}
				],
				"char": 1,
				"name": "EventDriver",
				"comment": "\tInterface for all evented I/O implementations.\n\n\tThis is the low level interface for all event based functionality. It is\n\tnot intended to be used directly by users of the library.\n"
			},
			{
				"kind": "interface",
				"line": 165,
				"members": [
					{
						"kind": "function",
						"line": 172,
						"storageClass": [
							"abstract"
						],
						"deco": "FNdC9ExceptionZv",
						"char": 17,
						"parameters": [
							{
								"deco": "C9Exception",
								"name": "e"
							}
						],
						"name": "eventException",
						"comment": " Sets an exception to be thrown on the next call to $(D yieldForEvent).\n\n\t\tNote that this only has an effect if $(D yieldForEvent) is called\n\t\toutside of a task. To throw an exception in a task, use the\n\t\t$(D event_exception) parameter to $(D resumeTask).\n"
					},
					{
						"kind": "function",
						"line": 182,
						"storageClass": [
							"abstract"
						],
						"deco": "FZv",
						"char": 7,
						"name": "yieldForEvent",
						"comment": " Yields execution until the event loop receives an event.\n\n\t\tThrows:\n\t\t\tMay throw an $(D InterruptException) if the task got interrupted\n\t\t\tusing $(D vibe.core.task.Task.interrupt()). Rethrows any\n\t\t\texception that is passed to the $(D resumeTask) call that wakes\n\t\t\tup the task.\n"
					},
					{
						"kind": "function",
						"line": 192,
						"storageClass": [
							"abstract"
						],
						"deco": "FNbZv",
						"char": 7,
						"name": "yieldForEventDeferThrow",
						"comment": " Yields execution until the event loop receives an event.\n\n\t\tThrows:\n\t\t\tThis method doesn't throw. Any exceptions, such as\n\t\t\t$(D InterruptException) or an exception passed to $(D resumeTask),\n\t\t\tare stored and thrown on the next call to $(D yieldForEvent).\n\n"
					},
					{
						"kind": "function",
						"line": 200,
						"storageClass": [
							"abstract"
						],
						"deco": "FS4vibe4core4task4TaskC9ExceptionZv",
						"char": 7,
						"parameters": [
							{
								"deco": "S4vibe4core4task4Task",
								"name": "f"
							},
							{
								"deco": "C9Exception",
								"default": "null",
								"name": "event_exception"
							}
						],
						"name": "resumeTask",
						"comment": " Resumes the given task.\n\n\t\tThis function may only be called outside of a task to resume a\n\t\tyielded task. The optional $(D event_exception) will be thrown in the\n\t\tcontext of the resumed task.\n"
					},
					{
						"kind": "function",
						"line": 207,
						"storageClass": [
							"abstract"
						],
						"deco": "FZv",
						"char": 7,
						"name": "notifyIdle",
						"comment": " Notifies the core that all events have been processed.\n\n\t\tThis should be called by the driver whenever the event queue has been\n\t\tfully processed.\n"
					}
				],
				"char": 1,
				"name": "DriverCore",
				"comment": "\tProvides an event driver with core functions for task/fiber control.\n"
			},
			{
				"kind": "interface",
				"line": 218,
				"members": [
					{
						"kind": "enum",
						"line": 221,
						"members": [
							{
								"kind": "enum member",
								"line": 222,
								"value": "0",
								"char": 3,
								"name": "none",
								"comment": "Match no event (invalid value)\n"
							},
							{
								"kind": "enum member",
								"line": 223,
								"value": "1",
								"char": 3,
								"name": "read",
								"comment": "React on read-ready events\n"
							},
							{
								"kind": "enum member",
								"line": 224,
								"value": "2",
								"char": 3,
								"name": "write",
								"comment": "React on write-ready events\n"
							},
							{
								"kind": "enum member",
								"line": 225,
								"value": "3",
								"char": 3,
								"name": "any",
								"comment": "Match any kind of event\n"
							}
						],
						"char": 2,
						"baseDeco": "i",
						"name": "Trigger",
						"comment": " Event mask selecting the kind of events to listen for.\n"
					},
					{
						"kind": "function",
						"line": 238,
						"storageClass": [
							"abstract"
						],
						"deco": "FE4vibe4core6driver19FileDescriptorEvent7TriggerZv",
						"char": 7,
						"parameters": [
							{
								"deco": "E4vibe4core6driver19FileDescriptorEvent7Trigger",
								"default": "cast(Trigger)3",
								"name": "which"
							}
						],
						"name": "wait",
						"comment": " Waits for the selected event to occur.\n\n\t\tParams:\n\t\t\twhich = Optional event mask to react only on certain events\n\t\t\ttimeout = Maximum time to wait for an event\n\n\t\tReturns:\n\t\t\tThe overload taking the timeout parameter returns true if\n\t\t\tan event was received on time and false otherwise.\n",
						"originalType": "void(Trigger which = Trigger.any)"
					},
					{
						"kind": "function",
						"line": 240,
						"storageClass": [
							"abstract"
						],
						"deco": "FS4core4time8DurationE4vibe4core6driver19FileDescriptorEvent7TriggerZb",
						"char": 7,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							},
							{
								"deco": "E4vibe4core6driver19FileDescriptorEvent7Trigger",
								"default": "cast(Trigger)3",
								"name": "which"
							}
						],
						"name": "wait",
						"comment": "ditto\n",
						"originalType": "bool(Duration timeout, Trigger which = Trigger.any)"
					}
				],
				"char": 1,
				"name": "FileDescriptorEvent",
				"comment": "\tGeneric file descriptor event.\n\n\tThis kind of event can be used to wait for events on a non-blocking\n\tfile descriptor. Note that this can usually only be used on socket\n\tbased file descriptors.\n"
			}
		],
		"name": "vibe.core.driver",
		"comment": "\tContains interfaces and enums for evented I/O drivers.\n\n\tCopyright: © 2012-2015 RejectedSoftware e.K.\n\tAuthors: Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\core\\file.d",
		"members": [
			{
				"kind": "import",
				"line": 10,
				"char": 15,
				"name": "vibe.core.stream"
			},
			{
				"kind": "import",
				"line": 11,
				"char": 15,
				"name": "vibe.inet.url"
			},
			{
				"kind": "function",
				"line": 32,
				"deco": "FS4vibe4inet4path4PathE4vibe4core4file8FileModeZC4vibe4core4file10FileStream",
				"endchar": 1,
				"char": 12,
				"parameters": [
					{
						"deco": "S4vibe4inet4path4Path",
						"name": "path"
					},
					{
						"deco": "E4vibe4core4file8FileMode",
						"default": "cast(FileMode)0",
						"name": "mode"
					}
				],
				"name": "openFile",
				"comment": "\tOpens a file stream with the specified mode.\n",
				"originalType": "FileStream(Path path, FileMode mode = FileMode.read)",
				"endline": 35
			},
			{
				"kind": "function",
				"line": 37,
				"deco": "FAyaE4vibe4core4file8FileModeZC4vibe4core4file10FileStream",
				"endchar": 1,
				"char": 12,
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					},
					{
						"deco": "E4vibe4core4file8FileMode",
						"default": "cast(FileMode)0",
						"name": "mode"
					}
				],
				"name": "openFile",
				"comment": "ditto\n",
				"originalType": "FileStream(string path, FileMode mode = FileMode.read)",
				"endline": 40
			},
			{
				"kind": "function",
				"line": 53,
				"deco": "FS4vibe4inet4path4PathAhkZAh",
				"endchar": 1,
				"char": 9,
				"parameters": [
					{
						"deco": "S4vibe4inet4path4Path",
						"name": "path"
					},
					{
						"deco": "Ah",
						"default": "null",
						"name": "buffer"
					},
					{
						"deco": "k",
						"default": "4294967295u",
						"name": "max_size"
					}
				],
				"name": "readFile",
				"comment": "\tRead a whole file into a buffer.\n\n\tIf the supplied buffer is large enough, it will be used to store the\n\tcontents of the file. Otherwise, a new buffer will be allocated.\n\n\tParams:\n\t\tpath = The path of the file to read\n\t\tbuffer = An optional buffer to use for storing the file contents\n",
				"originalType": "ubyte[](Path path, ubyte[] buffer = null, size_t max_size = size_t.max)",
				"endline": 62
			},
			{
				"kind": "function",
				"line": 64,
				"deco": "FAyaAhkZAh",
				"endchar": 1,
				"char": 9,
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					},
					{
						"deco": "Ah",
						"default": "null",
						"name": "buffer"
					},
					{
						"deco": "k",
						"default": "4294967295u",
						"name": "max_size"
					}
				],
				"name": "readFile",
				"comment": "ditto\n",
				"originalType": "ubyte[](string path, ubyte[] buffer = null, size_t max_size = size_t.max)",
				"endline": 67
			},
			{
				"kind": "function",
				"line": 73,
				"deco": "FS4vibe4inet4path4PathxAhZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "S4vibe4inet4path4Path",
						"name": "path"
					},
					{
						"deco": "xAh",
						"name": "contents"
					}
				],
				"name": "writeFile",
				"comment": "\tWrite a whole file at once.\n",
				"originalType": "void(Path path, in ubyte[] contents)",
				"endline": 78
			},
			{
				"kind": "function",
				"line": 80,
				"deco": "FAyaxAhZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					},
					{
						"deco": "xAh",
						"name": "contents"
					}
				],
				"name": "writeFile",
				"comment": "ditto\n",
				"originalType": "void(string path, in ubyte[] contents)",
				"endline": 83
			},
			{
				"kind": "function",
				"line": 88,
				"deco": "FS4vibe4inet4path4PathAyaZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "S4vibe4inet4path4Path",
						"name": "path"
					},
					{
						"deco": "Aya",
						"name": "data"
					}
				],
				"name": "appendToFile",
				"comment": "\tConvenience function to append to a file.\n",
				"endline": 92
			},
			{
				"kind": "function",
				"line": 94,
				"deco": "FAyaAyaZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					},
					{
						"deco": "Aya",
						"name": "data"
					}
				],
				"name": "appendToFile",
				"comment": "ditto\n",
				"endline": 97
			},
			{
				"kind": "function",
				"line": 105,
				"deco": "FS4vibe4inet4path4PathZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "S4vibe4inet4path4Path",
						"name": "path"
					}
				],
				"name": "readFileUTF8",
				"comment": "\tRead a whole UTF-8 encoded file into a string.\n\n\tThe resulting string will be sanitized and will have the\n\toptional byte order mark (BOM) removed.\n",
				"endline": 110
			},
			{
				"kind": "function",
				"line": 112,
				"deco": "FAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					}
				],
				"name": "readFileUTF8",
				"comment": "ditto\n",
				"endline": 115
			},
			{
				"kind": "function",
				"line": 123,
				"deco": "FS4vibe4inet4path4PathAyaZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "S4vibe4inet4path4Path",
						"name": "path"
					},
					{
						"deco": "Aya",
						"name": "contents"
					}
				],
				"name": "writeFileUTF8",
				"comment": "\tWrite a string into a UTF-8 encoded file.\n\n\tThe file will have a byte order mark (BOM) prepended.\n",
				"endline": 130
			},
			{
				"kind": "function",
				"line": 135,
				"deco": "FAyaZC4vibe4core4file10FileStream",
				"endchar": 1,
				"char": 12,
				"parameters": [
					{
						"deco": "Aya",
						"default": "null",
						"name": "suffix"
					}
				],
				"name": "createTempFile",
				"comment": "\tCreates and opens a temporary file for writing.\n",
				"endline": 156
			},
			{
				"kind": "function",
				"line": 161,
				"deco": "FS4vibe4inet4path4PathS4vibe4inet4path4PathZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "S4vibe4inet4path4Path",
						"name": "from"
					},
					{
						"deco": "S4vibe4inet4path4Path",
						"name": "to"
					}
				],
				"name": "moveFile",
				"comment": "\tMoves or renames a file.\n",
				"endline": 164
			},
			{
				"kind": "function",
				"line": 166,
				"deco": "FAyaAyaZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "from"
					},
					{
						"deco": "Aya",
						"name": "to"
					}
				],
				"name": "moveFile",
				"comment": "ditto\n",
				"endline": 169
			},
			{
				"kind": "function",
				"line": 186,
				"deco": "FS4vibe4inet4path4PathS4vibe4inet4path4PathbZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "S4vibe4inet4path4Path",
						"name": "from"
					},
					{
						"deco": "S4vibe4inet4path4Path",
						"name": "to"
					},
					{
						"deco": "b",
						"default": "false",
						"name": "overwrite"
					}
				],
				"name": "copyFile",
				"comment": "\tCopies a file.\n\n\tNote that attributes and time stamps are currently not retained.\n\n\tParams:\n\t\tfrom = Path of the source file\n\t\tto = Path for the destination file\n\t\toverwrite = If true, any file existing at the destination path will be\n\t\t\toverwritten. If this is false, an exception will be thrown should\n\t\t\ta file already exist at the destination path.\n\n\tThrows:\n\t\tAn Exception if the copy operation fails for some reason.\n",
				"endline": 198
			},
			{
				"kind": "function",
				"line": 200,
				"deco": "FAyaAyaZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "from"
					},
					{
						"deco": "Aya",
						"name": "to"
					}
				],
				"name": "copyFile",
				"comment": "ditto\n",
				"endline": 203
			},
			{
				"kind": "function",
				"line": 208,
				"deco": "FS4vibe4inet4path4PathZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "S4vibe4inet4path4Path",
						"name": "path"
					}
				],
				"name": "removeFile",
				"comment": "\tRemoves a file\n",
				"endline": 211
			},
			{
				"kind": "function",
				"line": 213,
				"deco": "FAyaZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					}
				],
				"name": "removeFile",
				"comment": "ditto\n",
				"endline": 216
			},
			{
				"kind": "function",
				"line": 221,
				"deco": "FNbS4vibe4inet4path4PathZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "S4vibe4inet4path4Path",
						"name": "path"
					}
				],
				"name": "existsFile",
				"comment": "\tChecks if a file exists\n",
				"endline": 224
			},
			{
				"kind": "function",
				"line": 226,
				"deco": "FNbAyaZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					}
				],
				"name": "existsFile",
				"comment": "ditto\n",
				"endline": 232
			},
			{
				"kind": "function",
				"line": 238,
				"deco": "FS4vibe4inet4path4PathZS4vibe4core4file8FileInfo",
				"endchar": 1,
				"char": 10,
				"parameters": [
					{
						"deco": "S4vibe4inet4path4Path",
						"name": "path"
					}
				],
				"name": "getFileInfo",
				"comment": " Stores information about the specified file/directory into 'info'\n\n\tReturns false if the file does not exist.\n",
				"endline": 244
			},
			{
				"kind": "function",
				"line": 246,
				"deco": "FAyaZS4vibe4core4file8FileInfo",
				"endchar": 1,
				"char": 10,
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					}
				],
				"name": "getFileInfo",
				"comment": "ditto\n",
				"endline": 249
			},
			{
				"kind": "function",
				"line": 254,
				"deco": "FS4vibe4inet4path4PathZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "S4vibe4inet4path4Path",
						"name": "path"
					}
				],
				"name": "createDirectory",
				"comment": "\tCreates a new directory.\n",
				"endline": 257
			},
			{
				"kind": "function",
				"line": 259,
				"deco": "FAyaZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					}
				],
				"name": "createDirectory",
				"comment": "ditto\n",
				"endline": 262
			},
			{
				"kind": "function",
				"line": 267,
				"deco": "FS4vibe4inet4path4PathMDFS4vibe4core4file8FileInfoZbZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "S4vibe4inet4path4Path",
						"name": "path"
					},
					{
						"deco": "DFS4vibe4core4file8FileInfoZb",
						"storageClass": [
							"scope"
						],
						"name": "del"
					}
				],
				"name": "listDirectory",
				"comment": "\tEnumerates all files in the specified directory.\n",
				"endline": 272
			},
			{
				"kind": "function",
				"line": 274,
				"deco": "FAyaMDFS4vibe4core4file8FileInfoZbZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					},
					{
						"deco": "DFS4vibe4core4file8FileInfoZb",
						"storageClass": [
							"scope"
						],
						"name": "del"
					}
				],
				"name": "listDirectory",
				"comment": "ditto\n",
				"endline": 277
			},
			{
				"kind": "function",
				"line": 279,
				"deco": "FS4vibe4inet4path4PathZDFMDFKS4vibe4core4file8FileInfoZiZi",
				"endchar": 1,
				"char": 48,
				"parameters": [
					{
						"deco": "S4vibe4inet4path4Path",
						"name": "path"
					}
				],
				"name": "iterateDirectory",
				"comment": "ditto\n",
				"endline": 290
			},
			{
				"kind": "function",
				"line": 292,
				"deco": "FAyaZDFMDFKS4vibe4core4file8FileInfoZiZi",
				"endchar": 1,
				"char": 48,
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					}
				],
				"name": "iterateDirectory",
				"comment": "ditto\n",
				"endline": 295
			},
			{
				"kind": "function",
				"line": 300,
				"deco": "FS4vibe4inet4path4PathbZC4vibe4core4file16DirectoryWatcher",
				"endchar": 1,
				"char": 18,
				"parameters": [
					{
						"deco": "S4vibe4inet4path4Path",
						"name": "path"
					},
					{
						"deco": "b",
						"default": "true",
						"name": "recursive"
					}
				],
				"name": "watchDirectory",
				"comment": "\tStarts watching a directory for changes.\n",
				"endline": 303
			},
			{
				"kind": "function",
				"line": 305,
				"deco": "FAyabZC4vibe4core4file16DirectoryWatcher",
				"endchar": 1,
				"char": 18,
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					},
					{
						"deco": "b",
						"default": "true",
						"name": "recursive"
					}
				],
				"name": "watchDirectory",
				"endline": 308
			},
			{
				"kind": "function",
				"line": 313,
				"deco": "FZS4vibe4inet4path4Path",
				"endchar": 1,
				"char": 6,
				"name": "getWorkingDirectory",
				"comment": "\tReturns the current working directory.\n",
				"endline": 316
			},
			{
				"kind": "struct",
				"line": 321,
				"members": [
					{
						"kind": "variable",
						"line": 323,
						"deco": "Aya",
						"char": 9,
						"name": "name",
						"comment": "Name of the file (not including the path)\n",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 326,
						"deco": "m",
						"char": 8,
						"name": "size",
						"comment": "Size of the file (zero for directories)\n",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 329,
						"deco": "S3std8datetime7SysTime",
						"char": 10,
						"name": "timeModified",
						"comment": "Time of the last modification\n",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 332,
						"deco": "S3std8datetime7SysTime",
						"char": 10,
						"name": "timeCreated",
						"comment": "Time of creation (not available on all operating systems/file systems)\n",
						"offset": 32
					},
					{
						"kind": "variable",
						"line": 335,
						"deco": "b",
						"char": 7,
						"name": "isSymlink",
						"comment": "True if this is a symlink to an actual file\n",
						"offset": 48
					},
					{
						"kind": "variable",
						"line": 338,
						"deco": "b",
						"char": 7,
						"name": "isDirectory",
						"comment": "True if this is a directory or a symlink pointing to a directory\n",
						"offset": 49
					},
					{
						"kind": "function",
						"line": 321,
						"deco": "FNaNbNcNjNfS4vibe4core4file8FileInfoZS4vibe4core4file8FileInfo",
						"char": 1,
						"parameters": [
							{
								"deco": "S4vibe4core4file8FileInfo",
								"name": "p"
							}
						],
						"name": "opAssign"
					}
				],
				"char": 1,
				"name": "FileInfo",
				"comment": " Contains general information about a file.\n"
			},
			{
				"kind": "enum",
				"line": 344,
				"members": [
					{
						"kind": "enum member",
						"line": 346,
						"value": "0",
						"char": 2,
						"name": "read",
						"comment": "The file is opened read-only.\n"
					},
					{
						"kind": "enum member",
						"line": 348,
						"value": "1",
						"char": 2,
						"name": "readWrite",
						"comment": "The file is opened for read-write random access.\n"
					},
					{
						"kind": "enum member",
						"line": 350,
						"value": "2",
						"char": 2,
						"name": "createTrunc",
						"comment": "The file is truncated if it exists or created otherwise and then opened for read-write access.\n"
					},
					{
						"kind": "enum member",
						"line": 352,
						"value": "3",
						"char": 2,
						"name": "append",
						"comment": "The file is opened for appending data to it and created if it does not exist.\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "FileMode",
				"comment": "\tSpecifies how a file is manipulated on disk.\n"
			},
			{
				"kind": "interface",
				"line": 358,
				"members": [
					{
						"kind": "function",
						"line": 360,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNbNdZS4vibe4inet4path4Path",
						"char": 17,
						"name": "path",
						"comment": "The path of the file.\n"
					},
					{
						"kind": "function",
						"line": 363,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNdZb",
						"char": 17,
						"name": "isOpen",
						"comment": "Determines if the file stream is still open\n"
					},
					{
						"kind": "function",
						"line": 366,
						"storageClass": [
							"abstract"
						],
						"deco": "FZv",
						"char": 7,
						"name": "close",
						"comment": "Closes the file handle.\n"
					}
				],
				"char": 1,
				"interfaces": [
					"vibe.core.stream.RandomAccessStream"
				],
				"name": "FileStream",
				"comment": "\tAccesses the contents of a file as a stream.\n"
			},
			{
				"kind": "interface",
				"line": 376,
				"members": [
					{
						"kind": "function",
						"line": 378,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNdZS4vibe4inet4path4Path",
						"char": 17,
						"name": "path",
						"comment": "The path of the watched directory\n"
					},
					{
						"kind": "function",
						"line": 381,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNdZb",
						"char": 17,
						"name": "recursive",
						"comment": "Indicates if the directory is watched recursively\n"
					},
					{
						"kind": "function",
						"line": 396,
						"storageClass": [
							"abstract"
						],
						"deco": "FKAS4vibe4core4file15DirectoryChangeS4core4time8DurationZb",
						"char": 7,
						"parameters": [
							{
								"deco": "AS4vibe4core4file15DirectoryChange",
								"storageClass": [
									"ref"
								],
								"name": "dst"
							},
							{
								"deco": "S4core4time8Duration",
								"default": "dur(-1L)",
								"name": "timeout"
							}
						],
						"name": "readChanges",
						"comment": " Fills the destination array with all changes that occurred since the last call.\n\n\t\tThe function will block until either directory changes have occurred or until the\n\t\ttimeout has elapsed. Specifying a negative duration will cause the function to\n\t\twait without a timeout.\n\n\t\tParams:\n\t\t\tdst = The destination array to which the changes will be appended\n\t\t\ttimeout = Optional timeout for the read operation\n\n\t\tReturns:\n\t\t\tIf the call completed successfully, true is returned.\n",
						"originalType": "bool(ref DirectoryChange[] dst, Duration timeout = dur!\"seconds\"(-1))"
					}
				],
				"char": 1,
				"name": "DirectoryWatcher",
				"comment": "\tInterface for directory watcher implementations.\n\n\tDirectory watchers monitor the contents of a directory (wither recursively or non-recursively)\n\tfor changes, such as file additions, deletions or modifications.\n"
			},
			{
				"kind": "enum",
				"line": 402,
				"members": [
					{
						"kind": "enum member",
						"line": 404,
						"value": "0",
						"char": 2,
						"name": "added",
						"comment": "A file or directory was added\n"
					},
					{
						"kind": "enum member",
						"line": 406,
						"value": "1",
						"char": 2,
						"name": "removed",
						"comment": "A file or directory was deleted\n"
					},
					{
						"kind": "enum member",
						"line": 408,
						"value": "2",
						"char": 2,
						"name": "modified",
						"comment": "A file or directory was modified\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "DirectoryChangeType",
				"comment": " Specifies the kind of change in a watched directory.\n"
			},
			{
				"kind": "struct",
				"line": 414,
				"members": [
					{
						"kind": "variable",
						"line": 416,
						"deco": "E4vibe4core4file19DirectoryChangeType",
						"char": 22,
						"name": "type",
						"comment": "The type of change\n",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 419,
						"deco": "S4vibe4inet4path4Path",
						"char": 7,
						"name": "path",
						"comment": "Path of the file/directory that was changed\n",
						"offset": 4
					}
				],
				"char": 1,
				"name": "DirectoryChange",
				"comment": " Describes a single change in a watched directory.\n"
			}
		],
		"name": "vibe.core.file",
		"comment": "\tFile handling functions and types.\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\core\\log.d",
		"members": [
			{
				"kind": "function",
				"line": 29,
				"deco": "FNbNfE4vibe4core3log8LogLevelZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "E4vibe4core3log8LogLevel",
						"name": "level"
					}
				],
				"name": "setLogLevel",
				"comment": "\tSets the minimum log level to be printed using the default console logger.\n\n\tThis level applies to the default stdout/stderr logger only.\n",
				"endline": 33
			},
			{
				"kind": "function",
				"line": 41,
				"deco": "FNbNfE4vibe4core3log10FileLogger6FormatE4vibe4core3log10FileLogger6FormatZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "E4vibe4core3log10FileLogger6Format",
						"name": "fmt"
					},
					{
						"deco": "E4vibe4core3log10FileLogger6Format",
						"default": "cast(Format)0",
						"name": "infoFmt"
					}
				],
				"name": "setLogFormat",
				"comment": "\tSets the log format used for the default console logger.\n\n\tThis level applies to the default stdout/stderr logger only.\n",
				"originalType": "nothrow @safe void(FileLogger.Format fmt, FileLogger.Format infoFmt = FileLogger.Format.plain)",
				"endline": 47
			},
			{
				"kind": "function",
				"line": 56,
				"deco": "FAyaE4vibe4core3log8LogLevelZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "filename"
					},
					{
						"deco": "E4vibe4core3log8LogLevel",
						"default": "cast(LogLevel)6",
						"name": "min_level"
					}
				],
				"name": "setLogFile",
				"comment": "\tSets a log file for disk file logging.\n\n\tMultiple calls to this function will register multiple log\n\tfiles for output.\n",
				"originalType": "void(string filename, LogLevel min_level = LogLevel.error)",
				"endline": 65
			},
			{
				"kind": "function",
				"line": 83,
				"deco": "FNbOC4vibe4core3log6LoggerZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "OC4vibe4core3log6Logger",
						"name": "logger"
					}
				],
				"name": "registerLogger",
				"comment": "\tRegisters a new logger instance.\n\n\tThe specified Logger will receive all log messages in its Logger.log\n\tmethod after it has been registered.\n\n\tExamples:\n\t---\n\tauto logger = cast(shared)new HTMLLogger(\"log.html\");\n\tlogger.lock().format = FileLogger.Format.threadTime;\n\tregisterLogger(logger);\n\t---\n\n\tSee_Also: deregisterLogger\n",
				"endline": 86
			},
			{
				"kind": "function",
				"line": 94,
				"deco": "FNbOC4vibe4core3log6LoggerZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "OC4vibe4core3log6Logger",
						"name": "logger"
					}
				],
				"name": "deregisterLogger",
				"comment": "\tDeregisters an active logger instance.\n\n\tSee_Also: registerLogger\n",
				"endline": 100
			},
			{
				"kind": "template",
				"line": 111,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 111,
						"endchar": 1,
						"char": 6,
						"type": "nothrow @safe void(S fmt, lazy T args)",
						"parameters": [
							{
								"type": "S",
								"name": "fmt"
							},
							{
								"storageClass": [
									"lazy"
								],
								"type": "T",
								"name": "args"
							}
						],
						"name": "log",
						"endline": 124
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"deco": "E4vibe4core3log8LogLevel",
						"name": "level"
					},
					{
						"kind": "value",
						"defaultValue": "__FILE__",
						"deco": "Aya",
						"name": "file"
					},
					{
						"kind": "value",
						"defaultValue": "__LINE__",
						"deco": "i",
						"name": "line"
					},
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "\tLogs a message.\n\n\tParams:\n\t\tlevel = The log level for the logged message\n\t\tfmt = See http://dlang.org/phobos/std_format.html#format-string\n\t\targs = Any input values needed for formatting\nExample:\n\n---\nvoid test()\n{\n\tlogInfo(\"Hello, World!\");\n\tlogWarn(\"This may not be %s.\", \"good\");\n\tlog!(LogLevel.info)(\"This is a %s.\", \"test\");\n}\n\n---\n",
				"name": "log"
			},
			{
				"kind": "template",
				"line": 126,
				"members": [
					{
						"kind": "function",
						"line": 126,
						"endchar": 222,
						"char": 6,
						"type": "nothrow @safe void(S fmt, lazy T args)",
						"parameters": [
							{
								"type": "S",
								"name": "fmt"
							},
							{
								"storageClass": [
									"lazy"
								],
								"type": "T",
								"name": "args"
							}
						],
						"name": "logTrace",
						"endline": 126
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "__FILE__",
						"deco": "Aya",
						"name": "file"
					},
					{
						"kind": "value",
						"defaultValue": "__LINE__",
						"deco": "i",
						"name": "line"
					},
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "logTrace"
			},
			{
				"kind": "template",
				"line": 128,
				"members": [
					{
						"kind": "function",
						"line": 128,
						"endchar": 224,
						"char": 6,
						"type": "nothrow @safe void(S fmt, lazy T args)",
						"parameters": [
							{
								"type": "S",
								"name": "fmt"
							},
							{
								"storageClass": [
									"lazy"
								],
								"type": "T",
								"name": "args"
							}
						],
						"name": "logDebugV",
						"endline": 128
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "__FILE__",
						"deco": "Aya",
						"name": "file"
					},
					{
						"kind": "value",
						"defaultValue": "__LINE__",
						"deco": "i",
						"name": "line"
					},
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "logDebugV"
			},
			{
				"kind": "template",
				"line": 130,
				"members": [
					{
						"kind": "function",
						"line": 130,
						"endchar": 223,
						"char": 6,
						"type": "nothrow @safe void(S fmt, lazy T args)",
						"parameters": [
							{
								"type": "S",
								"name": "fmt"
							},
							{
								"storageClass": [
									"lazy"
								],
								"type": "T",
								"name": "args"
							}
						],
						"name": "logDebug",
						"endline": 130
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "__FILE__",
						"deco": "Aya",
						"name": "file"
					},
					{
						"kind": "value",
						"defaultValue": "__LINE__",
						"deco": "i",
						"name": "line"
					},
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "logDebug"
			},
			{
				"kind": "template",
				"line": 132,
				"members": [
					{
						"kind": "function",
						"line": 132,
						"endchar": 232,
						"char": 6,
						"type": "nothrow @safe void(S fmt, lazy T args)",
						"parameters": [
							{
								"type": "S",
								"name": "fmt"
							},
							{
								"storageClass": [
									"lazy"
								],
								"type": "T",
								"name": "args"
							}
						],
						"name": "logDiagnostic",
						"endline": 132
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "__FILE__",
						"deco": "Aya",
						"name": "file"
					},
					{
						"kind": "value",
						"defaultValue": "__LINE__",
						"deco": "i",
						"name": "line"
					},
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "logDiagnostic"
			},
			{
				"kind": "template",
				"line": 134,
				"members": [
					{
						"kind": "function",
						"line": 134,
						"endchar": 220,
						"char": 6,
						"type": "nothrow @safe void(S fmt, lazy T args)",
						"parameters": [
							{
								"type": "S",
								"name": "fmt"
							},
							{
								"storageClass": [
									"lazy"
								],
								"type": "T",
								"name": "args"
							}
						],
						"name": "logInfo",
						"endline": 134
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "__FILE__",
						"deco": "Aya",
						"name": "file"
					},
					{
						"kind": "value",
						"defaultValue": "__LINE__",
						"deco": "i",
						"name": "line"
					},
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "logInfo"
			},
			{
				"kind": "template",
				"line": 136,
				"members": [
					{
						"kind": "function",
						"line": 136,
						"endchar": 220,
						"char": 6,
						"type": "nothrow @safe void(S fmt, lazy T args)",
						"parameters": [
							{
								"type": "S",
								"name": "fmt"
							},
							{
								"storageClass": [
									"lazy"
								],
								"type": "T",
								"name": "args"
							}
						],
						"name": "logWarn",
						"endline": 136
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "__FILE__",
						"deco": "Aya",
						"name": "file"
					},
					{
						"kind": "value",
						"defaultValue": "__LINE__",
						"deco": "i",
						"name": "line"
					},
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "logWarn"
			},
			{
				"kind": "template",
				"line": 138,
				"members": [
					{
						"kind": "function",
						"line": 138,
						"endchar": 222,
						"char": 6,
						"type": "nothrow @safe void(S fmt, lazy T args)",
						"parameters": [
							{
								"type": "S",
								"name": "fmt"
							},
							{
								"storageClass": [
									"lazy"
								],
								"type": "T",
								"name": "args"
							}
						],
						"name": "logError",
						"endline": 138
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "__FILE__",
						"deco": "Aya",
						"name": "file"
					},
					{
						"kind": "value",
						"defaultValue": "__LINE__",
						"deco": "i",
						"name": "line"
					},
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "logError"
			},
			{
				"kind": "template",
				"line": 140,
				"members": [
					{
						"kind": "function",
						"line": 140,
						"endchar": 228,
						"char": 6,
						"type": "nothrow @safe void(S fmt, lazy T args)",
						"parameters": [
							{
								"type": "S",
								"name": "fmt"
							},
							{
								"storageClass": [
									"lazy"
								],
								"type": "T",
								"name": "args"
							}
						],
						"name": "logCritical",
						"endline": 140
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "__FILE__",
						"deco": "Aya",
						"name": "file"
					},
					{
						"kind": "value",
						"defaultValue": "__LINE__",
						"deco": "i",
						"name": "line"
					},
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "logCritical"
			},
			{
				"kind": "template",
				"line": 142,
				"members": [
					{
						"kind": "function",
						"line": 142,
						"endchar": 144,
						"char": 6,
						"type": "nothrow void(S fmt, lazy T args)",
						"parameters": [
							{
								"type": "S",
								"name": "fmt"
							},
							{
								"storageClass": [
									"lazy"
								],
								"type": "T",
								"name": "args"
							}
						],
						"name": "logFatal",
						"endline": 142
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "__FILE__",
						"deco": "Aya",
						"name": "file"
					},
					{
						"kind": "value",
						"defaultValue": "__LINE__",
						"deco": "i",
						"name": "line"
					},
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "logFatal"
			},
			{
				"kind": "enum",
				"line": 155,
				"members": [
					{
						"kind": "enum member",
						"line": 156,
						"value": "0",
						"char": 2,
						"name": "trace",
						"comment": "Developer information for locating events when no useful stack traces are available\n"
					},
					{
						"kind": "enum member",
						"line": 157,
						"value": "1",
						"char": 2,
						"name": "debugV",
						"comment": "Developer information useful for algorithm debugging - for verbose output\n"
					},
					{
						"kind": "enum member",
						"line": 158,
						"value": "2",
						"char": 2,
						"name": "debug_",
						"comment": "Developer information useful for algorithm debugging\n"
					},
					{
						"kind": "enum member",
						"line": 159,
						"value": "3",
						"char": 2,
						"name": "diagnostic",
						"comment": "Extended user information (e.g. for more detailed error information)\n"
					},
					{
						"kind": "enum member",
						"line": 160,
						"value": "4",
						"char": 2,
						"name": "info",
						"comment": "Informational message for normal user education\n"
					},
					{
						"kind": "enum member",
						"line": 161,
						"value": "5",
						"char": 2,
						"name": "warn",
						"comment": "Unexpected condition that could indicate an error but has no direct consequences\n"
					},
					{
						"kind": "enum member",
						"line": 162,
						"value": "6",
						"char": 2,
						"name": "error",
						"comment": "Normal error that is handled gracefully\n"
					},
					{
						"kind": "enum member",
						"line": 163,
						"value": "7",
						"char": 2,
						"name": "critical",
						"comment": "Error that severely influences the execution of the application\n"
					},
					{
						"kind": "enum member",
						"line": 164,
						"value": "8",
						"char": 2,
						"name": "fatal",
						"comment": "Error that forces the application to terminate\n"
					},
					{
						"kind": "enum member",
						"line": 165,
						"value": "9",
						"char": 2,
						"name": "none",
						"comment": "Special value used to indicate no logging when set as the minimum log level\n"
					},
					{
						"kind": "enum member",
						"line": 167,
						"value": "3",
						"char": 2,
						"name": "verbose1",
						"comment": "Alias for diagnostic messages\n"
					},
					{
						"kind": "enum member",
						"line": 168,
						"value": "2",
						"char": 2,
						"name": "verbose2",
						"comment": "Alias for debug messages\n"
					},
					{
						"kind": "enum member",
						"line": 169,
						"value": "1",
						"char": 2,
						"name": "verbose3",
						"comment": "Alias for verbose debug messages\n"
					},
					{
						"kind": "enum member",
						"line": 170,
						"value": "0",
						"char": 2,
						"name": "verbose4",
						"comment": "Alias for trace messages\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "LogLevel",
				"comment": "Specifies the log level for a particular log message.\n"
			},
			{
				"kind": "struct",
				"line": 174,
				"members": [
					{
						"kind": "variable",
						"line": 175,
						"deco": "Aya",
						"char": 9,
						"name": "mod",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 176,
						"deco": "Aya",
						"char": 9,
						"name": "func",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 177,
						"deco": "Aya",
						"char": 9,
						"name": "file",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 178,
						"deco": "i",
						"char": 6,
						"name": "line",
						"offset": 24
					},
					{
						"kind": "variable",
						"line": 179,
						"deco": "E4vibe4core3log8LogLevel",
						"char": 11,
						"name": "level",
						"offset": 28
					},
					{
						"kind": "variable",
						"line": 180,
						"deco": "C4core6thread6Thread",
						"char": 9,
						"name": "thread",
						"originalType": "Thread",
						"offset": 32
					},
					{
						"kind": "variable",
						"line": 181,
						"deco": "Aya",
						"char": 9,
						"name": "threadName",
						"offset": 36
					},
					{
						"kind": "variable",
						"line": 182,
						"deco": "k",
						"char": 7,
						"name": "threadID",
						"offset": 44
					},
					{
						"kind": "variable",
						"line": 183,
						"deco": "C4core6thread5Fiber",
						"char": 8,
						"name": "fiber",
						"originalType": "Fiber",
						"offset": 48
					},
					{
						"kind": "variable",
						"line": 184,
						"deco": "k",
						"char": 7,
						"name": "fiberID",
						"offset": 52
					},
					{
						"kind": "variable",
						"line": 185,
						"deco": "S3std8datetime7SysTime",
						"char": 10,
						"name": "time",
						"offset": 56
					},
					{
						"kind": "variable",
						"line": 186,
						"deco": "Aya",
						"char": 9,
						"name": "text",
						"offset": 72
					},
					{
						"kind": "function",
						"line": 174,
						"deco": "FNaNbNcNjNfS4vibe4core3log7LogLineZS4vibe4core3log7LogLine",
						"char": 1,
						"parameters": [
							{
								"deco": "S4vibe4core3log7LogLine",
								"name": "p"
							}
						],
						"name": "opAssign"
					}
				],
				"char": 1,
				"name": "LogLine",
				"comment": "Represents a single logged line\n"
			},
			{
				"kind": "class",
				"line": 190,
				"members": [
					{
						"kind": "variable",
						"line": 191,
						"init": "cast(LogLevel)0",
						"deco": "E4vibe4core3log8LogLevel",
						"char": 11,
						"name": "minLevel",
						"offset": 8
					},
					{
						"kind": "function",
						"line": 193,
						"storageClass": [
							"final"
						],
						"deco": "FNaNbNfE4vibe4core3log8LogLevelZb",
						"endchar": 94,
						"char": 13,
						"parameters": [
							{
								"deco": "E4vibe4core3log8LogLevel",
								"name": "value"
							}
						],
						"name": "acceptsLevel",
						"endline": 193
					},
					{
						"kind": "function",
						"line": 195,
						"storageClass": [
							"abstract"
						],
						"deco": "FNfKS4vibe4core3log7LogLineZv",
						"char": 16,
						"parameters": [
							{
								"deco": "S4vibe4core3log7LogLine",
								"storageClass": [
									"ref"
								],
								"name": "message"
							}
						],
						"name": "log"
					}
				],
				"char": 1,
				"name": "Logger",
				"comment": "Abstract base class for all loggers\n"
			},
			{
				"kind": "class",
				"line": 202,
				"base": "vibe.core.log.Logger",
				"members": [
					{
						"kind": "enum",
						"line": 203,
						"members": [
							{
								"kind": "enum member",
								"line": 204,
								"value": "0",
								"char": 3,
								"name": "plain"
							},
							{
								"kind": "enum member",
								"line": 205,
								"value": "1",
								"char": 3,
								"name": "thread"
							},
							{
								"kind": "enum member",
								"line": 206,
								"value": "2",
								"char": 3,
								"name": "threadTime"
							}
						],
						"char": 2,
						"baseDeco": "i",
						"name": "Format"
					},
					{
						"kind": "variable",
						"line": 214,
						"init": "cast(Format)1",
						"deco": "E4vibe4core3log10FileLogger6Format",
						"char": 9,
						"name": "format",
						"offset": 36
					},
					{
						"kind": "variable",
						"line": 215,
						"init": "cast(Format)0",
						"deco": "E4vibe4core3log10FileLogger6Format",
						"char": 12,
						"name": "infoFormat",
						"offset": 40
					},
					{
						"kind": "constructor",
						"line": 217,
						"deco": "FS3std5stdio4FileS3std5stdio4FileZC4vibe4core3log10FileLogger",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "S3std5stdio4File",
								"name": "info_file"
							},
							{
								"deco": "S3std5stdio4File",
								"name": "diag_file"
							}
						],
						"name": "this",
						"originalType": "(File info_file, File diag_file)",
						"endline": 221
					},
					{
						"kind": "constructor",
						"line": 223,
						"deco": "FAyaZC4vibe4core3log10FileLogger",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"name": "filename"
							}
						],
						"name": "this",
						"originalType": "(string filename)",
						"endline": 227
					},
					{
						"kind": "function",
						"line": 229,
						"storageClass": [
							"override"
						],
						"deco": "FNeKS4vibe4core3log7LogLineZv",
						"endchar": 2,
						"char": 16,
						"parameters": [
							{
								"deco": "S4vibe4core3log7LogLine",
								"storageClass": [
									"ref"
								],
								"name": "msg"
							}
						],
						"name": "log",
						"endline": 261,
						"overrides": [
							"vibe.core.log.Logger.log"
						]
					},
					{
						"kind": "destructor",
						"line": 202,
						"deco": "FNfZv",
						"char": 7,
						"name": "~this"
					}
				],
				"char": 7,
				"name": "FileLogger",
				"comment": "\tPlain-text based logger for logging to regular files or stdout/stderr\n"
			},
			{
				"kind": "class",
				"line": 269,
				"base": "vibe.core.log.Logger",
				"members": [
					{
						"kind": "constructor",
						"line": 274,
						"deco": "FAyaZC4vibe4core3log10HTMLLogger",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"default": "\"log.html\"",
								"name": "filename"
							}
						],
						"name": "this",
						"originalType": "(string filename = \"log.html\")",
						"endline": 278
					},
					{
						"kind": "destructor",
						"line": 280,
						"deco": "FZv",
						"endchar": 2,
						"char": 2,
						"name": "~this",
						"endline": 286
					},
					{
						"kind": "function",
						"line": 288,
						"deco": "FNaNbNdNfE4vibe4core3log8LogLevelZv",
						"endchar": 89,
						"char": 17,
						"parameters": [
							{
								"deco": "E4vibe4core3log8LogLevel",
								"name": "value"
							}
						],
						"name": "minLogLevel",
						"endline": 288
					},
					{
						"kind": "function",
						"line": 290,
						"storageClass": [
							"override"
						],
						"deco": "FNeKS4vibe4core3log7LogLineZv",
						"endchar": 2,
						"char": 16,
						"parameters": [
							{
								"deco": "S4vibe4core3log7LogLine",
								"storageClass": [
									"ref"
								],
								"name": "msg"
							}
						],
						"name": "log",
						"endline": 324,
						"overrides": [
							"vibe.core.log.Logger.log"
						]
					},
					{
						"kind": "destructor",
						"line": 280,
						"deco": "FNfZv",
						"char": 2,
						"name": "~this"
					},
					{
						"kind": "destructor",
						"line": 280,
						"deco": "FZv",
						"char": 2,
						"name": "~this"
					}
				],
				"char": 7,
				"name": "HTMLLogger",
				"comment": "\tLogger implementation for logging to an HTML file with dynamic filtering support.\n"
			},
			{
				"kind": "class",
				"line": 436,
				"base": "vibe.core.log.Logger",
				"members": [
					{
						"kind": "enum",
						"line": 446,
						"members": [
							{
								"kind": "enum member",
								"line": 447,
								"value": "0",
								"char": 3,
								"name": "kern",
								"comment": "kernel messages\n"
							},
							{
								"kind": "enum member",
								"line": 448,
								"value": "1",
								"char": 3,
								"name": "user",
								"comment": "user-level messages\n"
							},
							{
								"kind": "enum member",
								"line": 449,
								"value": "2",
								"char": 3,
								"name": "mail",
								"comment": "mail system\n"
							},
							{
								"kind": "enum member",
								"line": 450,
								"value": "3",
								"char": 3,
								"name": "daemon",
								"comment": "system daemons\n"
							},
							{
								"kind": "enum member",
								"line": 451,
								"value": "4",
								"char": 3,
								"name": "auth",
								"comment": "security/authorization messages\n"
							},
							{
								"kind": "enum member",
								"line": 452,
								"value": "5",
								"char": 3,
								"name": "syslog",
								"comment": "messages generated internally by syslogd\n"
							},
							{
								"kind": "enum member",
								"line": 453,
								"value": "6",
								"char": 3,
								"name": "lpr",
								"comment": "line printer subsystem\n"
							},
							{
								"kind": "enum member",
								"line": 454,
								"value": "7",
								"char": 3,
								"name": "news",
								"comment": "network news subsystem\n"
							},
							{
								"kind": "enum member",
								"line": 455,
								"value": "8",
								"char": 3,
								"name": "uucp",
								"comment": "UUCP subsystem\n"
							},
							{
								"kind": "enum member",
								"line": 456,
								"value": "9",
								"char": 3,
								"name": "clockDaemon",
								"comment": "clock daemon\n"
							},
							{
								"kind": "enum member",
								"line": 457,
								"value": "10",
								"char": 3,
								"name": "authpriv",
								"comment": "security/authorization messages\n"
							},
							{
								"kind": "enum member",
								"line": 458,
								"value": "11",
								"char": 3,
								"name": "ftp",
								"comment": "FTP daemon\n"
							},
							{
								"kind": "enum member",
								"line": 459,
								"value": "12",
								"char": 3,
								"name": "ntp",
								"comment": "NTP subsystem\n"
							},
							{
								"kind": "enum member",
								"line": 460,
								"value": "13",
								"char": 3,
								"name": "logAudit",
								"comment": "log audit\n"
							},
							{
								"kind": "enum member",
								"line": 461,
								"value": "14",
								"char": 3,
								"name": "logAlert",
								"comment": "log alert\n"
							},
							{
								"kind": "enum member",
								"line": 462,
								"value": "15",
								"char": 3,
								"name": "cron",
								"comment": "clock daemon\n"
							},
							{
								"kind": "enum member",
								"line": 463,
								"value": "16",
								"char": 3,
								"name": "local0",
								"comment": "local use 0\n"
							},
							{
								"kind": "enum member",
								"line": 464,
								"value": "17",
								"char": 3,
								"name": "local1",
								"comment": "local use 1\n"
							},
							{
								"kind": "enum member",
								"line": 465,
								"value": "18",
								"char": 3,
								"name": "local2",
								"comment": "local use 2\n"
							},
							{
								"kind": "enum member",
								"line": 466,
								"value": "19",
								"char": 3,
								"name": "local3",
								"comment": "local use 3\n"
							},
							{
								"kind": "enum member",
								"line": 467,
								"value": "20",
								"char": 3,
								"name": "local4",
								"comment": "local use 4\n"
							},
							{
								"kind": "enum member",
								"line": 468,
								"value": "21",
								"char": 3,
								"name": "local5",
								"comment": "local use 5\n"
							},
							{
								"kind": "enum member",
								"line": 469,
								"value": "22",
								"char": 3,
								"name": "local6",
								"comment": "local use 6\n"
							},
							{
								"kind": "enum member",
								"line": 470,
								"value": "23",
								"char": 3,
								"name": "local7",
								"comment": "local use 7\n"
							}
						],
						"char": 2,
						"baseDeco": "i",
						"name": "Facility",
						"comment": "Facilities\n"
					},
					{
						"kind": "constructor",
						"line": 505,
						"deco": "FC4vibe4core6stream12OutputStreamE4vibe4core3log12SyslogLogger8FacilityAyaAyaZC4vibe4core3log12SyslogLogger",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream12OutputStream",
								"name": "stream"
							},
							{
								"deco": "E4vibe4core3log12SyslogLogger8Facility",
								"name": "facility"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "appName"
							},
							{
								"deco": "Aya",
								"default": "hostName()",
								"name": "hostName"
							}
						],
						"name": "this",
						"comment": "\t\tConstruct a SyslogLogger.\n\n\t\tThe log messages are sent to the given OutputStream stream using the given\n\t\tFacility facility.Optionally the appName and hostName can be set. The\n\t\tappName defaults to null. The hostName defaults to hostName().\n\n\t\tNote that the passed stream's write function must not use logging with\n\t\ta level for that this Logger's acceptsLevel returns true. Because this\n\t\tLogger uses the stream's write function when it logs and would hence\n\t\tlog forevermore.\n",
						"originalType": "(OutputStream stream, Facility facility, string appName = null, string hostName = hostName())",
						"endline": 512
					},
					{
						"kind": "function",
						"line": 519,
						"storageClass": [
							"override"
						],
						"deco": "FNeKS4vibe4core3log7LogLineZv",
						"endchar": 2,
						"char": 16,
						"parameters": [
							{
								"deco": "S4vibe4core3log7LogLine",
								"storageClass": [
									"ref"
								],
								"name": "msg"
							}
						],
						"name": "log",
						"comment": "\t\tLogs the given LogLine msg.\n\n\t\tIt uses the msg's time, level, and text field.\n",
						"endline": 555,
						"overrides": [
							"vibe.core.log.Logger.log"
						]
					}
				],
				"char": 7,
				"name": "SyslogLogger",
				"comment": "\tA logger that logs in syslog format according to RFC 5424.\n\n\tMessages can be logged to files (via file streams) or over the network (via\n\tTCP or SSL streams).\n\n\tStandards: Conforms to RFC 5424.\n"
			}
		],
		"name": "vibe.core.log",
		"comment": "\tCentral logging facility for vibe.\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\core\\net.d",
		"members": [
			{
				"kind": "import",
				"line": 10,
				"char": 15,
				"name": "vibe.core.stream"
			},
			{
				"kind": "function",
				"line": 29,
				"deco": "FAyatbZS4vibe4core3net14NetworkAddress",
				"endchar": 1,
				"char": 16,
				"parameters": [
					{
						"deco": "Aya",
						"name": "host"
					},
					{
						"deco": "t",
						"default": "cast(ushort)0u",
						"name": "address_family"
					},
					{
						"deco": "b",
						"default": "true",
						"name": "use_dns"
					}
				],
				"name": "resolveHost",
				"comment": "\tResolves the given host name/IP address string.\n\n\tSetting use_dns to false will only allow IP address strings but also guarantees\n\tthat the call will not block.\n",
				"originalType": "NetworkAddress(string host, ushort address_family = AF_UNSPEC, bool use_dns = true)",
				"endline": 32
			},
			{
				"kind": "function",
				"line": 46,
				"deco": "FtDFC4vibe4core3net13TCPConnectionZvE4vibe4core3net16TCPListenOptionsZAC4vibe4core3net11TCPListener",
				"endchar": 1,
				"char": 15,
				"parameters": [
					{
						"deco": "t",
						"name": "port"
					},
					{
						"deco": "DFC4vibe4core3net13TCPConnectionZv",
						"name": "connection_callback"
					},
					{
						"deco": "E4vibe4core3net16TCPListenOptions",
						"default": "cast(TCPListenOptions)0",
						"name": "options"
					}
				],
				"name": "listenTCP",
				"comment": "\tStarts listening on the specified port.\n\n\t'connection_callback' will be called for each client that connects to the\n\tserver socket. Each new connection gets its own fiber. The stream parameter\n\tthen allows to perform blocking I/O on the client socket.\n\n\tThe address parameter can be used to specify the network\n\tinterface on which the server socket is supposed to listen for connections.\n\tBy default, all IPv4 and IPv6 interfaces will be used.\n",
				"originalType": "TCPListener[](ushort port, void delegate(TCPConnection stream) connection_callback, TCPListenOptions options = TCPListenOptions.defaults)",
				"endline": 55
			},
			{
				"kind": "function",
				"line": 57,
				"deco": "FtDFC4vibe4core3net13TCPConnectionZvAyaE4vibe4core3net16TCPListenOptionsZC4vibe4core3net11TCPListener",
				"endchar": 1,
				"char": 13,
				"parameters": [
					{
						"deco": "t",
						"name": "port"
					},
					{
						"deco": "DFC4vibe4core3net13TCPConnectionZv",
						"name": "connection_callback"
					},
					{
						"deco": "Aya",
						"name": "address"
					},
					{
						"deco": "E4vibe4core3net16TCPListenOptions",
						"default": "cast(TCPListenOptions)0",
						"name": "options"
					}
				],
				"name": "listenTCP",
				"comment": "ditto\n",
				"originalType": "TCPListener(ushort port, void delegate(TCPConnection stream) connection_callback, string address, TCPListenOptions options = TCPListenOptions.defaults)",
				"endline": 60
			},
			{
				"kind": "function",
				"line": 67,
				"deco": "FtPFC4vibe4core3net13TCPConnectionZvE4vibe4core3net16TCPListenOptionsZAC4vibe4core3net11TCPListener",
				"endchar": 1,
				"char": 15,
				"parameters": [
					{
						"deco": "t",
						"name": "port"
					},
					{
						"deco": "PFC4vibe4core3net13TCPConnectionZv",
						"name": "connection_callback"
					},
					{
						"deco": "E4vibe4core3net16TCPListenOptions",
						"default": "cast(TCPListenOptions)0",
						"name": "options"
					}
				],
				"name": "listenTCP_s",
				"comment": "\tStarts listening on the specified port.\n\n\tThis function is the same as listenTCP but takes a function callback instead of a delegate.\n",
				"originalType": "TCPListener[](ushort port, void function(TCPConnection stream) connection_callback, TCPListenOptions options = TCPListenOptions.defaults)",
				"endline": 70
			},
			{
				"kind": "function",
				"line": 72,
				"deco": "FtPFC4vibe4core3net13TCPConnectionZvAyaE4vibe4core3net16TCPListenOptionsZC4vibe4core3net11TCPListener",
				"endchar": 1,
				"char": 13,
				"parameters": [
					{
						"deco": "t",
						"name": "port"
					},
					{
						"deco": "PFC4vibe4core3net13TCPConnectionZv",
						"name": "connection_callback"
					},
					{
						"deco": "Aya",
						"name": "address"
					},
					{
						"deco": "E4vibe4core3net16TCPListenOptions",
						"default": "cast(TCPListenOptions)0",
						"name": "options"
					}
				],
				"name": "listenTCP_s",
				"comment": "ditto\n",
				"originalType": "TCPListener(ushort port, void function(TCPConnection stream) connection_callback, string address, TCPListenOptions options = TCPListenOptions.defaults)",
				"endline": 75
			},
			{
				"kind": "function",
				"line": 80,
				"deco": "FAyatZC4vibe4core3net13TCPConnection",
				"endchar": 1,
				"char": 15,
				"parameters": [
					{
						"deco": "Aya",
						"name": "host"
					},
					{
						"deco": "t",
						"name": "port"
					}
				],
				"name": "connectTCP",
				"comment": "\tEstablishes a connection to the given host/port.\n",
				"endline": 85
			},
			{
				"kind": "function",
				"line": 87,
				"deco": "FS4vibe4core3net14NetworkAddressZC4vibe4core3net13TCPConnection",
				"endchar": 1,
				"char": 15,
				"parameters": [
					{
						"deco": "S4vibe4core3net14NetworkAddress",
						"name": "addr"
					}
				],
				"name": "connectTCP",
				"comment": "ditto\n",
				"endline": 89
			},
			{
				"kind": "function",
				"line": 95,
				"deco": "FtAyaZC4vibe4core3net13UDPConnection",
				"endchar": 1,
				"char": 15,
				"parameters": [
					{
						"deco": "t",
						"name": "port"
					},
					{
						"deco": "Aya",
						"default": "\"0.0.0.0\"",
						"name": "bind_address"
					}
				],
				"name": "listenUDP",
				"comment": "\tCreates a bound UDP socket suitable for sending and receiving packets.\n",
				"endline": 98
			},
			{
				"kind": "struct",
				"line": 106,
				"members": [
					{
						"kind": "function",
						"line": 115,
						"deco": "xFNaNbNdZt",
						"endchar": 72,
						"char": 19,
						"name": "family",
						"comment": " Family (AF_) of the socket address.\n",
						"endline": 115
					},
					{
						"kind": "function",
						"line": 117,
						"deco": "FNaNbNdtZv",
						"endchar": 84,
						"char": 17,
						"parameters": [
							{
								"deco": "t",
								"name": "val"
							}
						],
						"name": "family",
						"comment": "ditto\n",
						"endline": 117
					},
					{
						"kind": "function",
						"line": 121,
						"deco": "xFNaNbNdZt",
						"endchar": 2,
						"char": 19,
						"name": "port",
						"comment": " The port in host byte order.\n",
						"endline": 128
					},
					{
						"kind": "function",
						"line": 130,
						"deco": "FNaNbNdtZv",
						"endchar": 2,
						"char": 17,
						"parameters": [
							{
								"deco": "t",
								"name": "val"
							}
						],
						"name": "port",
						"comment": "ditto\n",
						"endline": 137
					},
					{
						"kind": "function",
						"line": 141,
						"deco": "NgFNaNbNdZPNgS4core3sys7windows8winsock28sockaddr",
						"endchar": 75,
						"char": 29,
						"name": "sockAddr",
						"comment": " A pointer to a sockaddr struct suitable for passing to socket functions.\n",
						"endline": 141
					},
					{
						"kind": "function",
						"line": 145,
						"deco": "xFNaNbNdZi",
						"endchar": 2,
						"char": 16,
						"name": "sockAddrLen",
						"comment": " Size of the sockaddr struct that is returned by sockAddr().\n",
						"endline": 152
					},
					{
						"kind": "function",
						"line": 154,
						"deco": "NgFNaNbNdZPNgS4core3sys7windows8winsock211sockaddr_in",
						"endchar": 28,
						"char": 32,
						"name": "sockAddrInet4",
						"endline": 156
					},
					{
						"kind": "function",
						"line": 158,
						"deco": "NgFNaNbNdZPNgS4core3sys7windows8winsock212sockaddr_in6",
						"endchar": 28,
						"char": 33,
						"name": "sockAddrInet6",
						"endline": 160
					},
					{
						"kind": "function",
						"line": 164,
						"deco": "xFZAya",
						"endchar": 2,
						"char": 9,
						"name": "toAddressString",
						"comment": " Returns a string representation of the IP address\n",
						"endline": 187
					},
					{
						"kind": "function",
						"line": 191,
						"deco": "xFZAya",
						"endchar": 2,
						"char": 9,
						"name": "toString",
						"comment": " Returns a full string representation of the address, including the port number.\n",
						"endline": 199
					}
				],
				"char": 1,
				"name": "NetworkAddress",
				"comment": "\tRepresents a network/socket address.\n"
			},
			{
				"kind": "interface",
				"line": 219,
				"members": [
					{
						"kind": "function",
						"line": 221,
						"storageClass": [
							"abstract"
						],
						"deco": "FNdbZv",
						"char": 17,
						"parameters": [
							{
								"deco": "b",
								"name": "enabled"
							}
						],
						"name": "tcpNoDelay",
						"comment": "Used to disable Nagle's algorithm.\n"
					},
					{
						"kind": "function",
						"line": 223,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNdZb",
						"char": 17,
						"name": "tcpNoDelay",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 227,
						"storageClass": [
							"abstract"
						],
						"deco": "FNdbZv",
						"char": 17,
						"parameters": [
							{
								"deco": "b",
								"name": "enable"
							}
						],
						"name": "keepAlive",
						"comment": "Enables TCP keep-alive packets.\n"
					},
					{
						"kind": "function",
						"line": 229,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNdZb",
						"char": 17,
						"name": "keepAlive",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 232,
						"storageClass": [
							"abstract"
						],
						"deco": "FNdS4core4time8DurationZv",
						"char": 17,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "duration"
							}
						],
						"name": "readTimeout",
						"comment": "Controls the read time out after which the connection is closed automatically.\n"
					},
					{
						"kind": "function",
						"line": 234,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNdZS4core4time8Duration",
						"char": 21,
						"name": "readTimeout",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 237,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNdZAya",
						"char": 19,
						"name": "peerAddress",
						"comment": "Returns the IP address of the connected peer.\n"
					},
					{
						"kind": "function",
						"line": 240,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNdZS4vibe4core3net14NetworkAddress",
						"char": 27,
						"name": "localAddress",
						"comment": "The local/bind address of the underlying socket.\n"
					},
					{
						"kind": "function",
						"line": 243,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNdZS4vibe4core3net14NetworkAddress",
						"char": 27,
						"name": "remoteAddress",
						"comment": "The address of the connected peer.\n"
					}
				],
				"char": 1,
				"interfaces": [
					"vibe.core.stream.ConnectionStream"
				],
				"name": "TCPConnection",
				"comment": "\tRepresents a single TCP connection.\n"
			},
			{
				"kind": "interface",
				"line": 250,
				"members": [
					{
						"kind": "function",
						"line": 252,
						"storageClass": [
							"abstract"
						],
						"deco": "FZv",
						"char": 7,
						"name": "stopListening",
						"comment": "Stops listening and closes the socket.\n"
					}
				],
				"char": 1,
				"name": "TCPListener",
				"comment": "\tRepresents a listening TCP socket.\n"
			},
			{
				"kind": "interface",
				"line": 259,
				"members": [
					{
						"kind": "function",
						"line": 262,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNdZAya",
						"char": 19,
						"name": "bindAddress",
						"comment": " Returns the address to which the UDP socket is bound.\n"
					},
					{
						"kind": "function",
						"line": 266,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNdZb",
						"char": 17,
						"name": "canBroadcast",
						"comment": " Determines if the socket is allowed to send to broadcast addresses.\n"
					},
					{
						"kind": "function",
						"line": 268,
						"storageClass": [
							"abstract"
						],
						"deco": "FNdbZv",
						"char": 17,
						"parameters": [
							{
								"deco": "b",
								"name": "val"
							}
						],
						"name": "canBroadcast",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 271,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNdZS4vibe4core3net14NetworkAddress",
						"char": 27,
						"name": "localAddress",
						"comment": "The local/bind address of the underlying socket.\n"
					},
					{
						"kind": "function",
						"line": 275,
						"storageClass": [
							"abstract"
						],
						"deco": "FZv",
						"char": 7,
						"name": "close",
						"comment": " Stops listening for datagrams and frees all resources.\n"
					},
					{
						"kind": "function",
						"line": 282,
						"storageClass": [
							"abstract"
						],
						"deco": "FAyatZv",
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "host"
							},
							{
								"deco": "t",
								"name": "port"
							}
						],
						"name": "connect",
						"comment": " Locks the UDP connection to a certain peer.\n\n\t\tOnce connected, the UDPConnection can only communicate with the specified peer.\n\t\tOtherwise communication with any reachable peer is possible.\n"
					},
					{
						"kind": "function",
						"line": 284,
						"storageClass": [
							"abstract"
						],
						"deco": "FS4vibe4core3net14NetworkAddressZv",
						"char": 7,
						"parameters": [
							{
								"deco": "S4vibe4core3net14NetworkAddress",
								"name": "address"
							}
						],
						"name": "connect",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 291,
						"storageClass": [
							"abstract"
						],
						"deco": "FxAhxPS4vibe4core3net14NetworkAddressZv",
						"char": 7,
						"parameters": [
							{
								"deco": "xAh",
								"name": "data"
							},
							{
								"deco": "xPS4vibe4core3net14NetworkAddress",
								"default": "null",
								"name": "peer_address"
							}
						],
						"name": "send",
						"comment": " Sends a single packet.\n\n\t\tIf peer_address is given, the packet is send to that address. Otherwise the packet\n\t\twill be sent to the address specified by a call to connect().\n",
						"originalType": "void(in ubyte[] data, in NetworkAddress* peer_address = null)"
					},
					{
						"kind": "function",
						"line": 300,
						"storageClass": [
							"abstract"
						],
						"deco": "FAhPS4vibe4core3net14NetworkAddressZAh",
						"char": 10,
						"parameters": [
							{
								"deco": "Ah",
								"default": "null",
								"name": "buf"
							},
							{
								"deco": "PS4vibe4core3net14NetworkAddress",
								"default": "null",
								"name": "peer_address"
							}
						],
						"name": "recv",
						"comment": " Receives a single packet.\n\n\t\tIf a buffer is given, it must be large enough to hold the full packet.\n\n\t\tThe timeout overload will throw an Exception if no data arrives before the\n\t\tspecified duration has elapsed.\n"
					},
					{
						"kind": "function",
						"line": 302,
						"storageClass": [
							"abstract"
						],
						"deco": "FS4core4time8DurationAhPS4vibe4core3net14NetworkAddressZAh",
						"char": 10,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							},
							{
								"deco": "Ah",
								"default": "null",
								"name": "buf"
							},
							{
								"deco": "PS4vibe4core3net14NetworkAddress",
								"default": "null",
								"name": "peer_address"
							}
						],
						"name": "recv",
						"comment": "ditto\n"
					}
				],
				"char": 1,
				"name": "UDPConnection",
				"comment": "\tRepresents a bound and possibly 'connected' UDP socket.\n"
			},
			{
				"kind": "enum",
				"line": 309,
				"members": [
					{
						"kind": "enum member",
						"line": 311,
						"value": "0",
						"char": 2,
						"name": "defaults",
						"comment": "Don't enable any particular option\n"
					},
					{
						"kind": "enum member",
						"line": 313,
						"value": "1",
						"char": 2,
						"name": "distribute",
						"comment": "Causes incoming connections to be distributed across the thread pool\n"
					},
					{
						"kind": "enum member",
						"line": 315,
						"value": "2",
						"char": 2,
						"name": "disableAutoClose",
						"comment": "Disables automatic closing of the connection when the connection callback exits\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "TCPListenOptions",
				"comment": "\tFlags to control the behavior of listenTCP.\n"
			}
		],
		"name": "vibe.core.net",
		"comment": "\tTCP/UDP connection and server handling.\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tAuthors: Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\core\\stream.d",
		"members": [
			{
				"kind": "interface",
				"line": 24,
				"members": [
					{
						"kind": "function",
						"line": 27,
						"storageClass": [
							"abstract"
						],
						"deco": "FNdZb",
						"char": 17,
						"name": "empty",
						"comment": " Returns true iff the end of the input stream has been reached.\n"
					},
					{
						"kind": "function",
						"line": 33,
						"storageClass": [
							"abstract"
						],
						"deco": "FNdZm",
						"char": 18,
						"name": "leastSize",
						"comment": "\tReturns the maximum number of bytes that are known to remain in this stream until the\n\t\tend is reached. After leastSize() bytes have been read, the stream will either have\n\t\treached EOS and empty() returns true, or leastSize() returns again a number > 0.\n"
					},
					{
						"kind": "function",
						"line": 37,
						"storageClass": [
							"abstract"
						],
						"deco": "FNdZb",
						"char": 17,
						"name": "dataAvailableForRead",
						"comment": " Queries if there is data available for immediate, non-blocking read.\n"
					},
					{
						"kind": "function",
						"line": 45,
						"storageClass": [
							"abstract"
						],
						"deco": "FZAxh",
						"char": 17,
						"name": "peek",
						"comment": " Returns a temporary reference to the data that is currently buffered, typically has the size\n\t\tleastSize() or 0 if dataAvailableForRead() returns false.\n\n\t\tNote that any method invocation on the same stream invalidates the contents of the returned\n\t\tbuffer.\n"
					},
					{
						"kind": "function",
						"line": 51,
						"storageClass": [
							"abstract"
						],
						"deco": "FAhZv",
						"char": 7,
						"parameters": [
							{
								"deco": "Ah",
								"name": "dst"
							}
						],
						"name": "read",
						"comment": "\tFills the preallocated array 'bytes' with data from the stream.\n\n\t\tThrows: An exception if the operation reads past the end of the stream\n"
					}
				],
				"char": 1,
				"name": "InputStream",
				"comment": "\n\n\n\nInterface for all classes implementing readable streams.\n"
			},
			{
				"kind": "interface",
				"line": 57,
				"members": [
					{
						"kind": "function",
						"line": 60,
						"storageClass": [
							"abstract"
						],
						"deco": "FxAhZv",
						"char": 7,
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							}
						],
						"name": "write",
						"comment": " Writes an array of bytes to the stream.\n",
						"originalType": "void(in ubyte[] bytes)"
					},
					{
						"kind": "function",
						"line": 64,
						"storageClass": [
							"abstract"
						],
						"deco": "FZv",
						"char": 7,
						"name": "flush",
						"comment": " Flushes the stream and makes sure that all data is being written to the output device.\n"
					},
					{
						"kind": "function",
						"line": 71,
						"storageClass": [
							"abstract"
						],
						"deco": "FZv",
						"char": 7,
						"name": "finalize",
						"comment": " Flushes and finalizes the stream.\n\n\t\tFinalize has to be called on certain types of streams. No writes are possible after a\n\t\tcall to finalize().\n"
					},
					{
						"kind": "function",
						"line": 75,
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FxAaZv",
						"endchar": 2,
						"char": 13,
						"parameters": [
							{
								"deco": "xAa",
								"name": "bytes"
							}
						],
						"name": "write",
						"comment": " Writes an array of chars to the stream.\n",
						"originalType": "void(in char[] bytes)",
						"endline": 78
					},
					{
						"kind": "function",
						"line": 86,
						"storageClass": [
							"abstract"
						],
						"deco": "FC4vibe4core6stream11InputStreammZv",
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "nbytes"
							}
						],
						"name": "write",
						"comment": " Pipes an InputStream directly into this OutputStream.\n\n\t\tThe number of bytes written is either the whole input stream when nbytes == 0, or exactly\n\t\tnbytes for nbytes > 0. If the input stream contains less than nbytes of data, an exception\n\t\tis thrown.\n",
						"originalType": "void(InputStream stream, ulong nbytes = 0)"
					},
					{
						"kind": "function",
						"line": 103,
						"storageClass": [
							"final",
							"abstract",
							"deprecated"
						],
						"deco": "FhZv",
						"endchar": 55,
						"char": 13,
						"parameters": [
							{
								"deco": "h",
								"name": "elem"
							}
						],
						"name": "put",
						"comment": " DEPRECATED: These methods provide an output range interface.\n\n\t\tNote that these functions do not flush the output stream for performance reasons. flush()\n\t\tneeds to be called manually afterwards.\n\n\t\tDeprecation_notice:\n\t\t\tSince these functions operate through virtual function calls and possibly on a\n\t\t\traw, unbuffered file descriptor, writing can be very slow. Their use is discouraged.\n\n\t\t\tPlease use $(D vibe.stream.wrapper.StreamOutputRange) instead.\n\n\t\tSee_Also: $(LINK http://dlang.org/phobos/std_range.html#isOutputRange),\n\t\t\t$(D vibe.stream.wrapper.StreamOutputRange)\n",
						"endline": 103
					},
					{
						"kind": "function",
						"line": 106,
						"storageClass": [
							"final",
							"abstract",
							"deprecated"
						],
						"deco": "FxAhZv",
						"endchar": 51,
						"char": 13,
						"parameters": [
							{
								"deco": "xAh",
								"name": "elems"
							}
						],
						"name": "put",
						"comment": "ditto\n",
						"originalType": "void(in ubyte[] elems)",
						"endline": 106
					},
					{
						"kind": "function",
						"line": 109,
						"storageClass": [
							"final",
							"abstract",
							"deprecated"
						],
						"deco": "FaZv",
						"endchar": 54,
						"char": 13,
						"parameters": [
							{
								"deco": "a",
								"name": "elem"
							}
						],
						"name": "put",
						"comment": "ditto\n",
						"endline": 109
					},
					{
						"kind": "function",
						"line": 112,
						"storageClass": [
							"final",
							"abstract",
							"deprecated"
						],
						"deco": "FxAaZv",
						"endchar": 50,
						"char": 13,
						"parameters": [
							{
								"deco": "xAa",
								"name": "elems"
							}
						],
						"name": "put",
						"comment": "ditto\n",
						"originalType": "void(in char[] elems)",
						"endline": 112
					},
					{
						"kind": "function",
						"line": 116,
						"storageClass": [
							"final",
							"abstract",
							"deprecated"
						],
						"deco": "FwZv",
						"endchar": 2,
						"char": 13,
						"parameters": [
							{
								"deco": "w",
								"name": "elem"
							}
						],
						"name": "put",
						"comment": "ditto\n",
						"endline": 122
					},
					{
						"kind": "function",
						"line": 126,
						"storageClass": [
							"final",
							"abstract",
							"deprecated"
						],
						"deco": "FxAwZv",
						"endchar": 67,
						"char": 13,
						"parameters": [
							{
								"deco": "xAw",
								"name": "elems"
							}
						],
						"name": "put",
						"comment": "ditto\n",
						"originalType": "void(in dchar[] elems)",
						"endline": 126
					},
					{
						"kind": "function",
						"line": 128,
						"protection": "protected",
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FC4vibe4core6stream11InputStreammZv",
						"endchar": 2,
						"char": 23,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "nbytes"
							}
						],
						"name": "writeDefault",
						"originalType": "void(InputStream stream, ulong nbytes = 0)",
						"endline": 152
					}
				],
				"char": 1,
				"name": "OutputStream",
				"comment": "\tInterface for all classes implementing writeable streams.\n"
			},
			{
				"kind": "interface",
				"line": 158,
				"members": [],
				"char": 1,
				"interfaces": [
					"vibe.core.stream.InputStream",
					"vibe.core.stream.OutputStream"
				],
				"name": "Stream",
				"comment": "\tInterface for all classes implementing readable and writable streams.\n"
			},
			{
				"kind": "interface",
				"line": 170,
				"members": [
					{
						"kind": "function",
						"line": 178,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNdZb",
						"char": 17,
						"name": "connected",
						"comment": " Determines The current connection status.\n\n\t\tIf connected is false, writing to the connection will trigger an\n\t\texception. Reading may still succeed as long as there is data left in\n\t\tthe input buffer. Use InputStream.empty to determine when to stop\n\t\treading.\n"
					},
					{
						"kind": "function",
						"line": 189,
						"storageClass": [
							"abstract"
						],
						"deco": "FZv",
						"char": 7,
						"name": "close",
						"comment": " Actively closes the connection and frees associated resources.\n\n\t\tNote that close must always be called, even if the remote has already\n\t\tclosed the connection. Failure to do so will result in resource and\n\t\tmemory leakage.\n\n\t\tClosing a connection implies a call to finalize, so that it doesn't\n\t\tneed to be called explicitly (it will be a no-op in that case).\n"
					},
					{
						"kind": "function",
						"line": 192,
						"storageClass": [
							"abstract"
						],
						"deco": "FS4core4time8DurationZb",
						"char": 7,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"default": "dur(0L)",
								"name": "timeout"
							}
						],
						"name": "waitForData",
						"comment": "Sets a timeout until data has to be availabe for read. Returns false on timeout.\n",
						"originalType": "bool(Duration timeout = 0.seconds)"
					}
				],
				"char": 1,
				"interfaces": [
					"vibe.core.stream.Stream"
				],
				"name": "ConnectionStream",
				"comment": "\tInterface for streams based on a connection.\n\n\tConnection streams are based on streaming socket connections, pipes and\n\tsimilar end-to-end streams.\n\n\tSee_also: vibe.core.new.TCPConnection\n"
			},
			{
				"kind": "interface",
				"line": 199,
				"members": [
					{
						"kind": "function",
						"line": 201,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNbNdZm",
						"char": 18,
						"name": "size",
						"comment": "Returns the total size of the file.\n"
					},
					{
						"kind": "function",
						"line": 204,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNbNdZb",
						"char": 17,
						"name": "readable",
						"comment": "Determines if this stream is readable.\n"
					},
					{
						"kind": "function",
						"line": 207,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNbNdZb",
						"char": 17,
						"name": "writable",
						"comment": "Determines if this stream is writable.\n"
					},
					{
						"kind": "function",
						"line": 210,
						"storageClass": [
							"abstract"
						],
						"deco": "FmZv",
						"char": 7,
						"parameters": [
							{
								"deco": "m",
								"name": "offset"
							}
						],
						"name": "seek",
						"comment": "Seeks to a specific position in the file if supported by the stream.\n"
					},
					{
						"kind": "function",
						"line": 213,
						"storageClass": [
							"abstract"
						],
						"deco": "FNbZm",
						"char": 8,
						"name": "tell",
						"comment": "Returns the current offset of the file pointer\n"
					}
				],
				"char": 1,
				"interfaces": [
					"vibe.core.stream.Stream"
				],
				"name": "RandomAccessStream",
				"comment": "\tInterface for all streams supporting random access.\n"
			},
			{
				"kind": "class",
				"line": 223,
				"members": [
					{
						"kind": "function",
						"line": 224,
						"deco": "FxAhZv",
						"endchar": 32,
						"char": 7,
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							}
						],
						"name": "write",
						"originalType": "void(in ubyte[] bytes)",
						"endline": 224,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					},
					{
						"kind": "function",
						"line": 225,
						"deco": "FC4vibe4core6stream11InputStreammZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "nbytes"
							}
						],
						"name": "write",
						"originalType": "void(InputStream stream, ulong nbytes = 0)",
						"endline": 228,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					},
					{
						"kind": "function",
						"line": 229,
						"deco": "FZv",
						"endchar": 16,
						"char": 7,
						"name": "flush",
						"endline": 229,
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						]
					},
					{
						"kind": "function",
						"line": 230,
						"deco": "FZv",
						"endchar": 19,
						"char": 7,
						"name": "finalize",
						"endline": 230,
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						]
					}
				],
				"char": 7,
				"interfaces": [
					"vibe.core.stream.OutputStream"
				],
				"name": "NullOutputStream",
				"comment": "\tStream implementation acting as a sink with no function.\n\n\tAny data written to the stream will be ignored and discarded. This stream type is useful if\n\tthe output of a particular stream is not needed but the stream needs to be drained.\n"
			}
		],
		"name": "vibe.core.stream",
		"comment": "\tGeneric stream interface used by several stream-like classes.\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\core\\sync.d",
		"members": [
			{
				"kind": "enum",
				"line": 21,
				"members": [
					{
						"kind": "enum member",
						"line": 22,
						"value": "0",
						"char": 2,
						"name": "lock"
					},
					{
						"kind": "enum member",
						"line": 23,
						"value": "1",
						"char": 2,
						"name": "tryLock"
					},
					{
						"kind": "enum member",
						"line": 24,
						"value": "2",
						"char": 2,
						"name": "defer"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "LockMode"
			},
			{
				"kind": "interface",
				"line": 27,
				"members": [
					{
						"kind": "function",
						"line": 29,
						"storageClass": [
							"abstract"
						],
						"deco": "FNfZv",
						"char": 7,
						"name": "lock"
					},
					{
						"kind": "function",
						"line": 30,
						"storageClass": [
							"abstract"
						],
						"deco": "FNfZv",
						"char": 7,
						"name": "unlock"
					},
					{
						"kind": "function",
						"line": 31,
						"storageClass": [
							"abstract"
						],
						"deco": "FNfZb",
						"char": 7,
						"name": "tryLock"
					}
				],
				"char": 1,
				"name": "Lockable"
			},
			{
				"kind": "struct",
				"line": 36,
				"members": [
					{
						"kind": "constructor",
						"line": 45,
						"deco": "FNcC4core4sync5mutex5MutexE4vibe4core4sync8LockModeZS4vibe4core4sync15ScopedMutexLock",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4core4sync5mutex5Mutex",
								"name": "mutex"
							},
							{
								"deco": "E4vibe4core4sync8LockMode",
								"default": "cast(LockMode)0",
								"name": "mode"
							}
						],
						"name": "this",
						"originalType": "ref (core.sync.mutex.Mutex mutex, LockMode mode = LockMode.lock)",
						"endline": 54
					},
					{
						"kind": "destructor",
						"line": 56,
						"deco": "FZv",
						"endchar": 2,
						"char": 2,
						"name": "~this",
						"endline": 60
					},
					{
						"kind": "function",
						"line": 62,
						"deco": "xFNdZb",
						"endchar": 51,
						"char": 17,
						"name": "locked",
						"endline": 62
					},
					{
						"kind": "function",
						"line": 64,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "unlock",
						"endline": 69
					},
					{
						"kind": "function",
						"line": 71,
						"deco": "FZb",
						"endchar": 2,
						"char": 7,
						"name": "tryLock",
						"endline": 75
					},
					{
						"kind": "function",
						"line": 77,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "lock",
						"endline": 82
					},
					{
						"kind": "function",
						"line": 36,
						"deco": "FNcNjS4vibe4core4sync15ScopedMutexLockZS4vibe4core4sync15ScopedMutexLock",
						"char": 1,
						"parameters": [
							{
								"deco": "S4vibe4core4sync15ScopedMutexLock",
								"name": "p"
							}
						],
						"name": "opAssign"
					}
				],
				"char": 1,
				"name": "ScopedMutexLock",
				"comment": " RAII lock for the Mutex class.\nExample:\n\n---\nint protected_var = 0;\nauto mtx = new TaskMutex;\nmtx.performLocked!({\n\tprotected_var++;\n});\n\n---\n"
			},
			{
				"kind": "class",
				"line": 132,
				"base": "core.sync.mutex.Mutex",
				"members": [
					{
						"kind": "constructor",
						"line": 135,
						"deco": "FC6ObjectZC4vibe4core4sync9TaskMutex",
						"endchar": 45,
						"char": 2,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "this",
						"originalType": "(Object o)",
						"endline": 135
					},
					{
						"kind": "constructor",
						"line": 136,
						"deco": "FZC4vibe4core4sync9TaskMutex",
						"endchar": 27,
						"char": 2,
						"name": "this",
						"originalType": "()",
						"endline": 136
					},
					{
						"kind": "function",
						"line": 138,
						"storageClass": [
							"override"
						],
						"deco": "FNbNfZb",
						"endchar": 61,
						"char": 16,
						"name": "tryLock",
						"originalType": "nothrow bool()",
						"endline": 138,
						"overrides": [
							"core.sync.mutex.Mutex.tryLock",
							"vibe.core.sync.Lockable.tryLock"
						]
					},
					{
						"kind": "function",
						"line": 139,
						"storageClass": [
							"override"
						],
						"deco": "FNbNfZv",
						"endchar": 48,
						"char": 16,
						"name": "lock",
						"originalType": "nothrow void()",
						"endline": 139,
						"overrides": [
							"core.sync.mutex.Mutex.lock",
							"vibe.core.sync.Lockable.lock"
						]
					},
					{
						"kind": "function",
						"line": 140,
						"storageClass": [
							"override"
						],
						"deco": "FNbNfZv",
						"endchar": 52,
						"char": 16,
						"name": "unlock",
						"originalType": "nothrow void()",
						"endline": 140,
						"overrides": [
							"core.sync.mutex.Mutex.unlock",
							"vibe.core.sync.Lockable.unlock"
						]
					}
				],
				"char": 1,
				"interfaces": [
					"vibe.core.sync.Lockable"
				],
				"name": "TaskMutex",
				"comment": "\tMutex implementation for fibers.\n\n\tThis mutex type can be used in exchange for a core.sync.mutex.Mutex, but\n\tdoes not block the event loop when contention happens. Note that this\n\tmutex does not allow recursive locking.\n\n\tNotice:\n\t\tBecause this class is annotated nothrow, it cannot be interrupted\n\t\tusing $(D vibe.core.task.Task.interrupt()). The corresponding\n\t\t$(D InterruptException) will be deferred until the next blocking\n\t\toperation yields the event loop.\n\n\t\tUse $(D InterruptibleTaskMutex) as an alternative that can be\n\t\tinterrupted.\n\n\tSee_Also: InterruptibleTaskMutex, RecursiveTaskMutex, core.sync.mutex.Mutex\n"
			},
			{
				"kind": "class",
				"line": 230,
				"members": [
					{
						"kind": "constructor",
						"line": 233,
						"deco": "FZC4vibe4core4sync22InterruptibleTaskMutex",
						"endchar": 27,
						"char": 2,
						"name": "this",
						"originalType": "()",
						"endline": 233
					},
					{
						"kind": "function",
						"line": 235,
						"deco": "FNbNfZb",
						"endchar": 52,
						"char": 7,
						"name": "tryLock",
						"originalType": "nothrow bool()",
						"endline": 235,
						"overrides": [
							"vibe.core.sync.Lockable.tryLock"
						]
					},
					{
						"kind": "function",
						"line": 236,
						"deco": "FNfZv",
						"endchar": 31,
						"char": 7,
						"name": "lock",
						"originalType": "void()",
						"endline": 236,
						"overrides": [
							"vibe.core.sync.Lockable.lock"
						]
					},
					{
						"kind": "function",
						"line": 237,
						"deco": "FNbNfZv",
						"endchar": 43,
						"char": 7,
						"name": "unlock",
						"originalType": "nothrow void()",
						"endline": 237,
						"overrides": [
							"vibe.core.sync.Lockable.unlock"
						]
					}
				],
				"char": 7,
				"interfaces": [
					"vibe.core.sync.Lockable"
				],
				"name": "InterruptibleTaskMutex",
				"comment": "\tAlternative to $(D TaskMutex) that supports interruption.\n\n\tThis class supports the use of $(D vibe.core.task.Task.interrupt()) while\n\twaiting in the $(D lock()) method. However, because the interface is not\n\t$(D nothrow), it cannot be used as an object monitor.\n\n\tSee_Also: $(D TaskMutex), $(D InterruptibleRecursiveTaskMutex)\n"
			},
			{
				"kind": "class",
				"line": 264,
				"base": "core.sync.mutex.Mutex",
				"members": [
					{
						"kind": "constructor",
						"line": 267,
						"deco": "FC6ObjectZC4vibe4core4sync18RecursiveTaskMutex",
						"endchar": 45,
						"char": 2,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "this",
						"originalType": "(Object o)",
						"endline": 267
					},
					{
						"kind": "constructor",
						"line": 268,
						"deco": "FZC4vibe4core4sync18RecursiveTaskMutex",
						"endchar": 27,
						"char": 2,
						"name": "this",
						"originalType": "()",
						"endline": 268
					},
					{
						"kind": "function",
						"line": 270,
						"storageClass": [
							"override"
						],
						"deco": "FNfZb",
						"endchar": 53,
						"char": 16,
						"name": "tryLock",
						"originalType": "bool()",
						"endline": 270,
						"overrides": [
							"core.sync.mutex.Mutex.tryLock",
							"vibe.core.sync.Lockable.tryLock"
						]
					},
					{
						"kind": "function",
						"line": 271,
						"storageClass": [
							"override"
						],
						"deco": "FNfZv",
						"endchar": 40,
						"char": 16,
						"name": "lock",
						"originalType": "void()",
						"endline": 271,
						"overrides": [
							"core.sync.mutex.Mutex.lock",
							"vibe.core.sync.Lockable.lock"
						]
					},
					{
						"kind": "function",
						"line": 272,
						"storageClass": [
							"override"
						],
						"deco": "FNfZv",
						"endchar": 44,
						"char": 16,
						"name": "unlock",
						"originalType": "void()",
						"endline": 272,
						"overrides": [
							"core.sync.mutex.Mutex.unlock",
							"vibe.core.sync.Lockable.unlock"
						]
					}
				],
				"char": 1,
				"interfaces": [
					"vibe.core.sync.Lockable"
				],
				"name": "RecursiveTaskMutex",
				"comment": "\tRecursive mutex implementation for tasks.\n\n\tThis mutex type can be used in exchange for a core.sync.mutex.Mutex, but\n\tdoes not block the event loop when contention happens.\n\n\tNotice:\n\t\tBecause this class is annotated nothrow, it cannot be interrupted\n\t\tusing $(D vibe.core.task.Task.interrupt()). The corresponding\n\t\t$(D InterruptException) will be deferred until the next blocking\n\t\toperation yields the event loop.\n\n\t\tUse $(D InterruptibleRecursiveTaskMutex) as an alternative that can be\n\t\tinterrupted.\n\n\tSee_Also: TaskMutex, core.sync.mutex.Mutex\n"
			},
			{
				"kind": "class",
				"line": 290,
				"members": [
					{
						"kind": "constructor",
						"line": 293,
						"deco": "FZC4vibe4core4sync31InterruptibleRecursiveTaskMutex",
						"endchar": 27,
						"char": 2,
						"name": "this",
						"originalType": "()",
						"endline": 293
					},
					{
						"kind": "function",
						"line": 295,
						"deco": "FNfZb",
						"endchar": 44,
						"char": 7,
						"name": "tryLock",
						"originalType": "bool()",
						"endline": 295,
						"overrides": [
							"vibe.core.sync.Lockable.tryLock"
						]
					},
					{
						"kind": "function",
						"line": 296,
						"deco": "FNfZv",
						"endchar": 31,
						"char": 7,
						"name": "lock",
						"originalType": "void()",
						"endline": 296,
						"overrides": [
							"vibe.core.sync.Lockable.lock"
						]
					},
					{
						"kind": "function",
						"line": 297,
						"deco": "FNfZv",
						"endchar": 35,
						"char": 7,
						"name": "unlock",
						"originalType": "void()",
						"endline": 297,
						"overrides": [
							"vibe.core.sync.Lockable.unlock"
						]
					}
				],
				"char": 7,
				"interfaces": [
					"vibe.core.sync.Lockable"
				],
				"name": "InterruptibleRecursiveTaskMutex",
				"comment": "\tAlternative to $(D RecursiveTaskMutex) that supports interruption.\n\n\tThis class supports the use of $(D vibe.core.task.Task.interrupt()) while\n\twaiting in the $(D lock()) method. However, because the interface is not\n\t$(D nothrow), it cannot be used as an object monitor.\n\n\tSee_Also: $(D RecursiveTaskMutex), $(D InterruptibleTaskMutex)\n"
			},
			{
				"kind": "class",
				"line": 422,
				"base": "core.sync.condition.Condition",
				"members": [
					{
						"kind": "constructor",
						"line": 425,
						"deco": "FC4core4sync5mutex5MutexZC4vibe4core4sync13TaskCondition",
						"endchar": 67,
						"char": 2,
						"parameters": [
							{
								"deco": "C4core4sync5mutex5Mutex",
								"name": "mtx"
							}
						],
						"name": "this",
						"originalType": "(core.sync.mutex.Mutex mtx)",
						"endline": 425
					},
					{
						"kind": "function",
						"line": 426,
						"storageClass": [
							"override"
						],
						"deco": "FNdZC4core4sync5mutex5Mutex",
						"endchar": 58,
						"char": 27,
						"name": "mutex",
						"endline": 426,
						"overrides": [
							"core.sync.condition.Condition.mutex"
						]
					},
					{
						"kind": "function",
						"line": 427,
						"storageClass": [
							"override"
						],
						"deco": "FZv",
						"endchar": 40,
						"char": 16,
						"name": "wait",
						"endline": 427,
						"overrides": [
							"core.sync.condition.Condition.wait"
						]
					},
					{
						"kind": "function",
						"line": 428,
						"storageClass": [
							"override"
						],
						"deco": "FS4core4time8DurationZb",
						"endchar": 70,
						"char": 16,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							}
						],
						"name": "wait",
						"endline": 428,
						"overrides": [
							"core.sync.condition.Condition.wait"
						]
					},
					{
						"kind": "function",
						"line": 429,
						"storageClass": [
							"override"
						],
						"deco": "FZv",
						"endchar": 44,
						"char": 16,
						"name": "notify",
						"endline": 429,
						"overrides": [
							"core.sync.condition.Condition.notify"
						]
					},
					{
						"kind": "function",
						"line": 430,
						"storageClass": [
							"override"
						],
						"deco": "FZv",
						"endchar": 50,
						"char": 16,
						"name": "notifyAll",
						"endline": 430,
						"overrides": [
							"core.sync.condition.Condition.notifyAll"
						]
					}
				],
				"char": 1,
				"name": "TaskCondition",
				"comment": "\tEvent loop based condition variable or \"event\" implementation.\n\n\tThis class can be used in exchange for a $(D core.sync.condition.Condition)\n\tto avoid blocking the event loop when waiting.\n\n\tNotice:\n\t\tBecause this class is annotated nothrow, it cannot be interrupted\n\t\tusing $(D vibe.core.task.Task.interrupt()). The corresponding\n\t\t$(D InterruptException) will be deferred until the next blocking\n\t\toperation yields the event loop.\n\n\t\tUse $(D InterruptibleTaskCondition) as an alternative that can be\n\t\tinterrupted.\n\n\tSee_Also: InterruptibleTaskCondition\n"
			},
			{
				"kind": "class",
				"line": 443,
				"members": [
					{
						"kind": "constructor",
						"line": 446,
						"deco": "FC4core4sync5mutex5MutexZC4vibe4core4sync26InterruptibleTaskCondition",
						"endchar": 55,
						"char": 2,
						"parameters": [
							{
								"deco": "C4core4sync5mutex5Mutex",
								"name": "mtx"
							}
						],
						"name": "this",
						"originalType": "(core.sync.mutex.Mutex mtx)",
						"endline": 446
					},
					{
						"kind": "constructor",
						"line": 447,
						"deco": "FC4vibe4core4sync8LockableZC4vibe4core4sync26InterruptibleTaskCondition",
						"endchar": 42,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core4sync8Lockable",
								"name": "mtx"
							}
						],
						"name": "this",
						"originalType": "(Lockable mtx)",
						"endline": 447
					},
					{
						"kind": "function",
						"line": 449,
						"deco": "FNdZC4vibe4core4sync8Lockable",
						"endchar": 52,
						"char": 21,
						"name": "mutex",
						"endline": 449
					},
					{
						"kind": "function",
						"line": 450,
						"deco": "FZv",
						"endchar": 31,
						"char": 7,
						"name": "wait",
						"endline": 450
					},
					{
						"kind": "function",
						"line": 451,
						"deco": "FS4core4time8DurationZb",
						"endchar": 61,
						"char": 7,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							}
						],
						"name": "wait",
						"endline": 451
					},
					{
						"kind": "function",
						"line": 452,
						"deco": "FZv",
						"endchar": 35,
						"char": 7,
						"name": "notify",
						"endline": 452
					},
					{
						"kind": "function",
						"line": 453,
						"deco": "FZv",
						"endchar": 41,
						"char": 7,
						"name": "notifyAll",
						"endline": 453
					}
				],
				"char": 7,
				"name": "InterruptibleTaskCondition",
				"comment": "\tAlternative to $(D TaskCondition) that supports interruption.\n\n\tThis class supports the use of $(D vibe.core.task.Task.interrupt()) while\n\twaiting in the $(D lock()) method. However, because the interface is not\n\t$(D nothrow), it cannot be used as an object monitor.\n\n\tSee_Also: $(D TaskCondition)\n"
			},
			{
				"kind": "function",
				"line": 459,
				"deco": "FZC4vibe4core4sync11ManualEvent",
				"endchar": 1,
				"char": 13,
				"name": "createManualEvent",
				"comment": " Creates a new signal that can be shared between fibers.\n",
				"endline": 462
			},
			{
				"kind": "interface",
				"line": 468,
				"members": [
					{
						"kind": "function",
						"line": 470,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNbNdZi",
						"char": 16,
						"name": "emitCount",
						"comment": "A counter that is increased with every emit() call\n"
					},
					{
						"kind": "function",
						"line": 473,
						"storageClass": [
							"abstract"
						],
						"deco": "FNbZv",
						"char": 7,
						"name": "emit",
						"comment": "Emits the signal, waking up all owners of the signal.\n"
					},
					{
						"kind": "function",
						"line": 481,
						"storageClass": [
							"abstract"
						],
						"deco": "FZv",
						"char": 7,
						"name": "wait",
						"comment": " Acquires ownership and waits until the signal is emitted.\n\n\t\tThrows:\n\t\t\tMay throw an $(D InterruptException) if the task gets interrupted\n\t\t\tusing $(D Task.interrupt()).\n"
					},
					{
						"kind": "function",
						"line": 489,
						"storageClass": [
							"abstract"
						],
						"deco": "FiZi",
						"char": 6,
						"parameters": [
							{
								"deco": "i",
								"name": "reference_emit_count"
							}
						],
						"name": "wait",
						"comment": " Acquires ownership and waits until the emit count differs from the given one.\n\n\t\tThrows:\n\t\t\tMay throw an $(D InterruptException) if the task gets interrupted\n\t\t\tusing $(D Task.interrupt()).\n"
					},
					{
						"kind": "function",
						"line": 497,
						"storageClass": [
							"abstract"
						],
						"deco": "FS4core4time8DurationiZi",
						"char": 6,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							},
							{
								"deco": "i",
								"name": "reference_emit_count"
							}
						],
						"name": "wait",
						"comment": " Acquires ownership and waits until the emit count differs from the given one or until a timeout is reaced.\n\n\t\tThrows:\n\t\t\tMay throw an $(D InterruptException) if the task gets interrupted\n\t\t\tusing $(D Task.interrupt()).\n"
					},
					{
						"kind": "function",
						"line": 504,
						"storageClass": [
							"abstract"
						],
						"deco": "FNbiZi",
						"char": 6,
						"parameters": [
							{
								"deco": "i",
								"name": "reference_emit_count"
							}
						],
						"name": "waitUninterruptible",
						"comment": " Same as $(D wait), but defers throwing any $(D InterruptException).\n\n\t\tThis method is annotated $(D nothrow) at the expense that it cannot be\n\t\tinterrupted.\n"
					},
					{
						"kind": "function",
						"line": 507,
						"storageClass": [
							"abstract"
						],
						"deco": "FNbS4core4time8DurationiZi",
						"char": 6,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							},
							{
								"deco": "i",
								"name": "reference_emit_count"
							}
						],
						"name": "waitUninterruptible",
						"comment": "ditto\n"
					}
				],
				"char": 1,
				"name": "ManualEvent",
				"comment": " A manually triggered cross-task event.\n\n\tNote: the ownership can be shared between multiple fibers and threads.\n"
			}
		],
		"name": "vibe.core.sync",
		"comment": "\tInterruptible Task synchronization facilities\n\n\tCopyright: © 2012-2015 RejectedSoftware e.K.\n\tAuthors: Leonid Kramer, Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\core\\task.d",
		"members": [
			{
				"kind": "struct",
				"line": 27,
				"members": [
					{
						"kind": "constructor",
						"line": 43,
						"deco": "FNbNcxS4vibe4core4task4TaskZS4vibe4core4task4Task",
						"endchar": 117,
						"char": 2,
						"parameters": [
							{
								"deco": "xS4vibe4core4task4Task",
								"name": "other"
							}
						],
						"name": "this",
						"originalType": "nothrow ref (in Task other)",
						"endline": 43
					},
					{
						"kind": "function",
						"line": 47,
						"storageClass": [
							"static"
						],
						"deco": "FNbZS4vibe4core4task4Task",
						"endchar": 2,
						"char": 14,
						"name": "getThis",
						"comment": " Returns the Task instance belonging to the calling task.\n",
						"endline": 61
					},
					{
						"kind": "function",
						"line": 64,
						"deco": "NgFNbNdZNgC4vibe4core4task9TaskFiber",
						"endchar": 84,
						"char": 30,
						"name": "fiber",
						"endline": 64
					},
					{
						"kind": "function",
						"line": 65,
						"deco": "xFNbNdZk",
						"endchar": 64,
						"char": 20,
						"name": "taskCounter",
						"originalType": "const nothrow @property size_t()",
						"endline": 65
					},
					{
						"kind": "function",
						"line": 66,
						"deco": "NgFNbNdZNgC4core6thread6Thread",
						"endchar": 96,
						"char": 27,
						"name": "thread",
						"endline": 66
					},
					{
						"kind": "function",
						"line": 70,
						"deco": "xFNbNdZb",
						"endchar": 3,
						"char": 18,
						"name": "running",
						"comment": " Determines if the task is still running.\n",
						"endline": 75
					},
					{
						"kind": "function",
						"line": 82,
						"deco": "FNbNdZS4vibe4core4task4Task",
						"endchar": 40,
						"char": 19,
						"name": "tid",
						"endline": 82
					},
					{
						"kind": "function",
						"line": 87,
						"deco": "NgFNdZNgC4vibe4core4task12MessageQueue",
						"endchar": 122,
						"char": 32,
						"name": "messageQueue",
						"comment": "Reserved for internal use!\n",
						"endline": 87
					},
					{
						"kind": "template",
						"line": 89,
						"constraint": "is(T == bool)",
						"members": [
							{
								"kind": "function",
								"line": 89,
								"endchar": 76,
								"char": 4,
								"type": "const nothrow T()",
								"name": "opCast",
								"endline": 89
							}
						],
						"char": 4,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "opCast"
					},
					{
						"kind": "function",
						"line": 91,
						"deco": "FZv",
						"endchar": 43,
						"char": 7,
						"name": "join",
						"endline": 91
					},
					{
						"kind": "function",
						"line": 92,
						"deco": "FZv",
						"endchar": 53,
						"char": 7,
						"name": "interrupt",
						"endline": 92
					},
					{
						"kind": "function",
						"line": 93,
						"deco": "FZv",
						"endchar": 53,
						"char": 7,
						"name": "terminate",
						"endline": 93
					},
					{
						"kind": "function",
						"line": 95,
						"deco": "xFZAya",
						"endchar": 106,
						"char": 9,
						"name": "toString",
						"endline": 95
					},
					{
						"kind": "function",
						"line": 97,
						"deco": "xFNbKxS4vibe4core4task4TaskZb",
						"endchar": 124,
						"char": 7,
						"parameters": [
							{
								"deco": "xS4vibe4core4task4Task",
								"storageClass": [
									"ref"
								],
								"name": "other"
							}
						],
						"name": "opEquals",
						"originalType": "const nothrow bool(ref Task other)",
						"endline": 97
					},
					{
						"kind": "function",
						"line": 98,
						"deco": "xFNbxS4vibe4core4task4TaskZb",
						"endchar": 120,
						"char": 7,
						"parameters": [
							{
								"deco": "xS4vibe4core4task4Task",
								"name": "other"
							}
						],
						"name": "opEquals",
						"originalType": "const nothrow bool(in Task other)",
						"endline": 98
					}
				],
				"char": 1,
				"name": "Task",
				"comment": " Represents a single task as started using vibe.core.runTask.\n\n\tNote that the Task type is considered weakly isolated and thus can be\n\tpassed between threads using vibe.core.concurrency.send or by passing\n\tit as a parameter to vibe.core.core.runWorkerTask.\n"
			},
			{
				"kind": "class",
				"line": 108,
				"base": "core.thread.Fiber",
				"members": [
					{
						"kind": "variable",
						"line": 119,
						"protection": "protected",
						"storageClass": [
							"shared"
						],
						"deco": "Ok",
						"char": 17,
						"name": "m_taskCounter",
						"originalType": "size_t",
						"offset": 52
					},
					{
						"kind": "variable",
						"line": 120,
						"protection": "protected",
						"storageClass": [
							"shared"
						],
						"deco": "Ob",
						"char": 15,
						"name": "m_running",
						"originalType": "bool",
						"offset": 56
					},
					{
						"kind": "constructor",
						"line": 123,
						"protection": "protected",
						"deco": "FDFZvkZC4vibe4core4task9TaskFiber",
						"endchar": 2,
						"char": 12,
						"parameters": [
							{
								"deco": "DFZv",
								"name": "fun"
							},
							{
								"deco": "k",
								"name": "stack_size"
							}
						],
						"name": "this",
						"originalType": "(void delegate() fun, size_t stack_size)",
						"endline": 128
					},
					{
						"kind": "function",
						"line": 132,
						"deco": "NgFNbNdZNgC4core6thread6Thread",
						"endchar": 68,
						"char": 26,
						"name": "thread",
						"comment": " Returns the thread that owns this task.\n",
						"endline": 132
					},
					{
						"kind": "function",
						"line": 136,
						"deco": "FNdZS4vibe4core4task4Task",
						"endchar": 60,
						"char": 17,
						"name": "task",
						"comment": " Returns the handle of the current Task running on this fiber.\n",
						"endline": 136
					},
					{
						"kind": "function",
						"line": 139,
						"deco": "NgFNdZNgC4vibe4core4task12MessageQueue",
						"endchar": 78,
						"char": 32,
						"name": "messageQueue",
						"comment": "Reserved for internal use!\n",
						"endline": 139
					},
					{
						"kind": "function",
						"line": 145,
						"storageClass": [
							"abstract"
						],
						"deco": "FZv",
						"char": 16,
						"name": "join",
						"comment": " Blocks until the task has ended.\n"
					},
					{
						"kind": "function",
						"line": 149,
						"storageClass": [
							"abstract"
						],
						"deco": "FZv",
						"char": 16,
						"name": "interrupt",
						"comment": " Throws an InterruptExeption within the task as soon as it calls a blocking function.\n"
					},
					{
						"kind": "function",
						"line": 153,
						"storageClass": [
							"abstract"
						],
						"deco": "FZv",
						"char": 16,
						"name": "terminate",
						"comment": " Terminates the task without notice as soon as it calls a blocking function.\n"
					}
				],
				"char": 1,
				"name": "TaskFiber",
				"comment": " The base class for a task aka Fiber.\n\n\tThis class represents a single task that is executed concurrently\n\twith other tasks. Each task is owned by a single thread.\n"
			},
			{
				"kind": "class",
				"line": 159,
				"base": "object.Exception",
				"members": [
					{
						"kind": "constructor",
						"line": 160,
						"deco": "FZC4vibe4core4task18InterruptException",
						"endchar": 2,
						"char": 2,
						"name": "this",
						"originalType": "()",
						"endline": 163
					}
				],
				"char": 1,
				"name": "InterruptException",
				"comment": " Exception that is thrown by Task.interrupt.\n"
			},
			{
				"kind": "class",
				"line": 167,
				"members": [
					{
						"kind": "constructor",
						"line": 177,
						"deco": "FZC4vibe4core4task12MessageQueue",
						"endchar": 2,
						"char": 2,
						"name": "this",
						"originalType": "()",
						"endline": 183
					},
					{
						"kind": "function",
						"line": 185,
						"deco": "xFNdZb",
						"endchar": 124,
						"char": 17,
						"name": "full",
						"endline": 185
					},
					{
						"kind": "function",
						"line": 187,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "clear",
						"endline": 194
					},
					{
						"kind": "function",
						"line": 196,
						"deco": "FkPFS4vibe4core4task4TaskZbZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "k",
								"name": "count"
							},
							{
								"deco": "PFS4vibe4core4task4TaskZb",
								"name": "action"
							}
						],
						"name": "setMaxSize",
						"originalType": "void(size_t count, bool function(Task tid) action)",
						"endline": 200
					},
					{
						"kind": "function",
						"line": 202,
						"deco": "FS3std7variant18__T8VariantNVki20Z8VariantNZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "S3std7variant18__T8VariantNVki20Z8VariantN",
								"name": "msg"
							}
						],
						"name": "send",
						"originalType": "void(Variant msg)",
						"endline": 222
					},
					{
						"kind": "function",
						"line": 224,
						"deco": "FS3std7variant18__T8VariantNVki20Z8VariantNZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "S3std7variant18__T8VariantNVki20Z8VariantN",
								"name": "msg"
							}
						],
						"name": "prioritySend",
						"originalType": "void(Variant msg)",
						"endline": 232
					},
					{
						"kind": "function",
						"line": 234,
						"deco": "FMDFS3std7variant18__T8VariantNVki20Z8VariantNZbMDFS3std7variant18__T8VariantNVki20Z8VariantNZvZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "DFS3std7variant18__T8VariantNVki20Z8VariantNZb",
								"storageClass": [
									"scope"
								],
								"name": "filter"
							},
							{
								"deco": "DFS3std7variant18__T8VariantNVki20Z8VariantNZv",
								"storageClass": [
									"scope"
								],
								"name": "handler"
							}
						],
						"name": "receive",
						"originalType": "void(scope bool delegate(Variant) filter, scope void delegate(Variant) handler)",
						"endline": 254
					},
					{
						"kind": "template",
						"line": 256,
						"members": [
							{
								"kind": "function",
								"line": 256,
								"endchar": 2,
								"char": 7,
								"type": "bool(Duration timeout, scope bool delegate(Variant) filter, scope void delegate(Variant) handler)",
								"parameters": [
									{
										"type": "Duration",
										"name": "timeout"
									},
									{
										"storageClass": [
											"scope"
										],
										"type": "bool delegate(Variant)",
										"name": "filter"
									},
									{
										"storageClass": [
											"scope"
										],
										"type": "void delegate(Variant)",
										"name": "handler"
									}
								],
								"name": "receiveTimeout",
								"endline": 279
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "tuple",
								"name": "OPS"
							}
						],
						"name": "receiveTimeout"
					},
					{
						"kind": "destructor",
						"line": 167,
						"deco": "FNaNbNfZv",
						"char": 1,
						"name": "~this"
					}
				],
				"char": 1,
				"name": "MessageQueue"
			}
		],
		"name": "vibe.core.task",
		"comment": "\tContains interfaces and enums for evented I/O drivers.\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tAuthors: Sönke Ludwig\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\crypto\\cryptorand.d",
		"members": [
			{
				"kind": "interface",
				"line": 18,
				"members": [
					{
						"kind": "function",
						"line": 30,
						"storageClass": [
							"abstract"
						],
						"deco": "FAhZv",
						"char": 7,
						"parameters": [
							{
								"deco": "Ah",
								"name": "dst"
							}
						],
						"name": "read",
						"comment": "\t\tFills the buffer new random numbers.\n\n\t\tParams:\n\t\t\tbuffer: The buffer that will be filled with random numbers.\n\t\t\t\tIt will contain buffer.length random ubytes.\n\t\t\t\tSupportes both heap-based and stack-based arrays.\n\n\t\tThrows:\n\t\t\tCryptoException on error.\n",
						"overrides": [
							"vibe.core.stream.InputStream.read"
						]
					}
				],
				"char": 1,
				"interfaces": [
					"vibe.core.stream.InputStream"
				],
				"name": "RandomNumberStream",
				"comment": "\tBase interface for all cryptographically secure RNGs.\n"
			},
			{
				"kind": "class",
				"line": 48,
				"members": [
					{
						"kind": "constructor",
						"line": 70,
						"deco": "FZC4vibe6crypto10cryptorand9SystemRNG",
						"endchar": 2,
						"char": 2,
						"name": "this",
						"comment": "\t\tCreates new system random generator\n",
						"originalType": "()",
						"endline": 98
					},
					{
						"kind": "destructor",
						"line": 100,
						"deco": "FZv",
						"endchar": 2,
						"char": 2,
						"name": "~this",
						"endline": 106
					},
					{
						"kind": "function",
						"line": 108,
						"deco": "FNdZb",
						"endchar": 41,
						"char": 17,
						"name": "empty",
						"endline": 108,
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						]
					},
					{
						"kind": "function",
						"line": 109,
						"deco": "FNdZm",
						"endchar": 50,
						"char": 18,
						"name": "leastSize",
						"endline": 109,
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						]
					},
					{
						"kind": "function",
						"line": 110,
						"deco": "FNdZb",
						"endchar": 55,
						"char": 17,
						"name": "dataAvailableForRead",
						"endline": 110,
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						]
					},
					{
						"kind": "function",
						"line": 111,
						"deco": "FZAxh",
						"endchar": 39,
						"char": 17,
						"name": "peek",
						"endline": 111,
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						]
					},
					{
						"kind": "function",
						"line": 113,
						"deco": "FAhZv",
						"endchar": 2,
						"in": {
							"kind": "function",
							"line": 115,
							"endchar": 2,
							"char": 2,
							"type": "void()",
							"name": "__require",
							"endline": 115
						},
						"char": 7,
						"parameters": [
							{
								"deco": "Ah",
								"name": "buffer"
							}
						],
						"name": "read",
						"endline": 143,
						"overrides": [
							"vibe.core.stream.InputStream.read"
						]
					}
				],
				"char": 7,
				"interfaces": [
					"vibe.crypto.cryptorand.RandomNumberStream"
				],
				"name": "SystemRNG",
				"comment": "\tOperating system specific cryptography secure random number generator.\n\n\tIt uses the \"CryptGenRandom\" function for Windows and \"/dev/urandom\" for Posix.\n\tIt's recommended to combine the output use additional processing generated random numbers\n\tvia provided functions for systems where security matters.\n\n\tRemarks:\n\t\tWindows \"CryptGenRandom\" RNG has known security vulnerabilities on\n\t\tWindows 2000 and Windows XP (assuming the attacker has control of the\n\t\tmachine). Fixed for Windows XP Service Pack 3 and Windows Vista.\n\n\tSee_Also: $(LINK http://en.wikipedia.org/wiki/CryptGenRandom)\n"
			},
			{
				"kind": "template",
				"line": 246,
				"constraint": "isDigest!Hash",
				"members": [
					{
						"kind": "class",
						"line": 246,
						"members": [
							{
								"kind": "variable",
								"line": 252,
								"char": 12,
								"type": "SystemRNG",
								"name": "rng"
							},
							{
								"kind": "constructor",
								"line": 257,
								"endchar": 2,
								"char": 2,
								"type": "()",
								"name": "this",
								"comment": "\t\tCreates new hash-based mixer random generator.\n",
								"endline": 261
							},
							{
								"kind": "function",
								"line": 263,
								"endchar": 41,
								"char": 17,
								"type": "@property bool()",
								"name": "empty",
								"endline": 263
							},
							{
								"kind": "function",
								"line": 264,
								"endchar": 50,
								"char": 18,
								"type": "@property ulong()",
								"name": "leastSize",
								"endline": 264
							},
							{
								"kind": "function",
								"line": 265,
								"endchar": 55,
								"char": 17,
								"type": "@property bool()",
								"name": "dataAvailableForRead",
								"endline": 265
							},
							{
								"kind": "function",
								"line": 266,
								"endchar": 39,
								"char": 17,
								"type": "const(ubyte)[]()",
								"name": "peek",
								"endline": 266
							},
							{
								"kind": "function",
								"line": 268,
								"endchar": 2,
								"char": 7,
								"type": "void(ubyte[] buffer)",
								"parameters": [
									{
										"type": "ubyte[]",
										"name": "buffer"
									}
								],
								"name": "read",
								"endline": 303
							}
						],
						"char": 7,
						"name": "HashMixerRNG"
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "type",
						"name": "Hash"
					},
					{
						"kind": "value",
						"deco": "k",
						"name": "factor"
					}
				],
				"comment": "\tHash-based cryptographically secure random number mixer.\n\n\tThis RNG uses a hash function to mix a specific amount of random bytes from the input RNG.\n\tUse only cryptographically secure hash functions like SHA-512, Whirlpool or SHA-256, but not MD5.\n\n\tParams:\n\t\tHash: The hash function used, for example SHA1\n\t\tfactor: Determines how many times the hash digest length of input data\n\t\t\tis used as input to the hash function. Increase factor value if you\n\t\t\tneed more security because it increases entropy level or decrease\n\t\t\tthe factor value if you need more speed.\n\n",
				"name": "HashMixerRNG"
			},
			{
				"kind": "alias",
				"line": 307,
				"deco": "C4vibe6crypto10cryptorand65__T12HashMixerRNGTS3std6digest3sha20__T3SHAVii512Vii160Z3SHAVki5Z12HashMixerRNG",
				"char": 1,
				"name": "SHA1HashMixerRNG",
				"comment": "A SHA-1 based mixing RNG. Alias for HashMixerRNG!(SHA1, 5).\n"
			},
			{
				"kind": "class",
				"line": 452,
				"base": "object.Exception",
				"members": [
					{
						"kind": "constructor",
						"line": 454,
						"deco": "FNaNbNfAyaAyakC6object9ThrowableZC4vibe6crypto10cryptorand15CryptoException",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "k",
								"default": "cast(uint)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"name": "this",
						"originalType": "pure nothrow @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"endline": 457
					}
				],
				"char": 1,
				"name": "CryptoException",
				"comment": "\tThrown when an error occurs during random number generation.\n"
			}
		],
		"name": "vibe.crypto.cryptorand",
		"comment": "\tImplements cryptographically secure random number generators.\n\n\tCopyright: © 2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Ilya Shipunov\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\crypto\\passwordhash.d",
		"members": [
			{
				"kind": "function",
				"line": 38,
				"storageClass": [
					"deprecated"
				],
				"deco": "FAyaAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "password"
					},
					{
						"deco": "Aya",
						"default": "null",
						"name": "additional_salt"
					}
				],
				"name": "generateSimplePasswordHash",
				"comment": "\tGenerates a password hash using MD5 together with a 32-bit salt.\n\n\tParams:\n\t\tpassword = The password for which a one-way hash is to be computed\n\t\tadditional_salt = An optional string that is used to compute the final\n\t\t\thash. The same string must be given to testSimplePassword to\n\t\t\tverify a password later. If this string is kept secret, it can\n\t\t\tenhance the security of this function.\n\n\tReturns:\n\t\tA base64 encoded string containing the salt and the hash value is returned.\n\n\tRemarks:\n\t\tMD5 is not considered safe and is computationally cheap. Although the\n\t\tuse of salt helps a bit, using this function is discouraged for systems\n\t\twhere security matters.\n\n\tSee_Also:\n\t\ttestSimplePasswordHash, vibe.crypto.md5\n",
				"endline": 44
			},
			{
				"kind": "function",
				"line": 63,
				"storageClass": [
					"deprecated"
				],
				"deco": "FAyaAyaAyaZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "hashstring"
					},
					{
						"deco": "Aya",
						"name": "password"
					},
					{
						"deco": "Aya",
						"default": "null",
						"name": "additional_salt"
					}
				],
				"name": "testSimplePasswordHash",
				"comment": "\tTests a password hash generated using generateSimplePasswordHash.\n\n\tParams:\n\t\thashstring: The string that was returned by a call to\n\t\t\tgenerateSimplePasswordHash\n\t\tpassword: Password string to test against the hash\n\t\tadditional_salt: The same optional salt that was given to the original\n\t\t\tcall to generateSimplePasswordHash\n\n\tReturns:\n\t\tReturns true if the password matches the specified hash.\n\n\tSee_Also:\n\t\tgenerateSimplePasswordHash, vibe.crypto.md5\n",
				"endline": 72
			}
		],
		"name": "vibe.crypto.passwordhash",
		"comment": "\tPassword hashing routines\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\data\\bson.d",
		"members": [
			{
				"kind": "import",
				"line": 10,
				"char": 15,
				"name": "vibe.data.json"
			},
			{
				"kind": "alias",
				"line": 24,
				"deco": "Ayh",
				"char": 1,
				"name": "bdata_t"
			},
			{
				"kind": "struct",
				"line": 31,
				"members": [
					{
						"kind": "enum",
						"line": 33,
						"members": [
							{
								"kind": "enum member",
								"line": 34,
								"value": "cast(ubyte)0u",
								"char": 3,
								"name": "end",
								"comment": "End marker - should never occur explicitly\n"
							},
							{
								"kind": "enum member",
								"line": 35,
								"value": "cast(ubyte)1u",
								"char": 3,
								"name": "double_",
								"comment": "A 64-bit floating point value\n"
							},
							{
								"kind": "enum member",
								"line": 36,
								"value": "cast(ubyte)2u",
								"char": 3,
								"name": "string",
								"comment": "A UTF-8 string\n"
							},
							{
								"kind": "enum member",
								"line": 37,
								"value": "cast(ubyte)3u",
								"char": 3,
								"name": "object",
								"comment": "An object aka. dictionary of string to Bson\n"
							},
							{
								"kind": "enum member",
								"line": 38,
								"value": "cast(ubyte)4u",
								"char": 3,
								"name": "array",
								"comment": "An array of BSON values\n"
							},
							{
								"kind": "enum member",
								"line": 39,
								"value": "cast(ubyte)5u",
								"char": 3,
								"name": "binData",
								"comment": "Raw binary data (ubyte[])\n"
							},
							{
								"kind": "enum member",
								"line": 40,
								"value": "cast(ubyte)6u",
								"char": 3,
								"name": "undefined",
								"comment": "Deprecated\n"
							},
							{
								"kind": "enum member",
								"line": 41,
								"value": "cast(ubyte)7u",
								"char": 3,
								"name": "objectID",
								"comment": "BSON Object ID (96-bit)\n"
							},
							{
								"kind": "enum member",
								"line": 42,
								"value": "cast(ubyte)8u",
								"char": 3,
								"name": "bool_",
								"comment": "Boolean value\n"
							},
							{
								"kind": "enum member",
								"line": 43,
								"value": "cast(ubyte)9u",
								"char": 3,
								"name": "date",
								"comment": "Date value (UTC)\n"
							},
							{
								"kind": "enum member",
								"line": 44,
								"value": "cast(ubyte)10u",
								"char": 3,
								"name": "null_",
								"comment": "Null value\n"
							},
							{
								"kind": "enum member",
								"line": 45,
								"value": "cast(ubyte)11u",
								"char": 3,
								"name": "regex",
								"comment": "Regular expression\n"
							},
							{
								"kind": "enum member",
								"line": 46,
								"value": "cast(ubyte)12u",
								"char": 3,
								"name": "dbRef",
								"comment": "Deprecated\n"
							},
							{
								"kind": "enum member",
								"line": 47,
								"value": "cast(ubyte)13u",
								"char": 3,
								"name": "code",
								"comment": "JaveScript code\n"
							},
							{
								"kind": "enum member",
								"line": 48,
								"value": "cast(ubyte)14u",
								"char": 3,
								"name": "symbol",
								"comment": "Symbol/variable name\n"
							},
							{
								"kind": "enum member",
								"line": 49,
								"value": "cast(ubyte)15u",
								"char": 3,
								"name": "codeWScope",
								"comment": "JavaScript code with scope\n"
							},
							{
								"kind": "enum member",
								"line": 50,
								"value": "cast(ubyte)16u",
								"char": 3,
								"name": "int_",
								"comment": "32-bit integer\n"
							},
							{
								"kind": "enum member",
								"line": 51,
								"value": "cast(ubyte)17u",
								"char": 3,
								"name": "timestamp",
								"comment": "Timestamp value\n"
							},
							{
								"kind": "enum member",
								"line": 52,
								"value": "cast(ubyte)18u",
								"char": 3,
								"name": "long_",
								"comment": "64-bit integer\n"
							},
							{
								"kind": "enum member",
								"line": 53,
								"value": "cast(ubyte)255u",
								"char": 3,
								"name": "minKey",
								"comment": "Internal value\n"
							},
							{
								"kind": "enum member",
								"line": 54,
								"value": "cast(ubyte)127u",
								"char": 3,
								"name": "maxKey",
								"comment": "Internal value\n"
							},
							{
								"kind": "enum member",
								"line": 56,
								"value": "cast(ubyte)0u",
								"char": 3,
								"name": "End",
								"comment": "Compatibility alias - will be deprecated soon.\n"
							},
							{
								"kind": "enum member",
								"line": 57,
								"value": "cast(ubyte)1u",
								"char": 3,
								"name": "Double",
								"comment": "Compatibility alias - will be deprecated soon.\n"
							},
							{
								"kind": "enum member",
								"line": 58,
								"value": "cast(ubyte)2u",
								"char": 3,
								"name": "String",
								"comment": "Compatibility alias - will be deprecated soon.\n"
							},
							{
								"kind": "enum member",
								"line": 59,
								"value": "cast(ubyte)3u",
								"char": 3,
								"name": "Object",
								"comment": "Compatibility alias - will be deprecated soon.\n"
							},
							{
								"kind": "enum member",
								"line": 60,
								"value": "cast(ubyte)4u",
								"char": 3,
								"name": "Array",
								"comment": "Compatibility alias - will be deprecated soon.\n"
							},
							{
								"kind": "enum member",
								"line": 61,
								"value": "cast(ubyte)5u",
								"char": 3,
								"name": "BinData",
								"comment": "Compatibility alias - will be deprecated soon.\n"
							},
							{
								"kind": "enum member",
								"line": 62,
								"value": "cast(ubyte)6u",
								"char": 3,
								"name": "Undefined",
								"comment": "Compatibility alias - will be deprecated soon.\n"
							},
							{
								"kind": "enum member",
								"line": 63,
								"value": "cast(ubyte)7u",
								"char": 3,
								"name": "ObjectID",
								"comment": "Compatibility alias - will be deprecated soon.\n"
							},
							{
								"kind": "enum member",
								"line": 64,
								"value": "cast(ubyte)8u",
								"char": 3,
								"name": "Bool",
								"comment": "Compatibility alias - will be deprecated soon.\n"
							},
							{
								"kind": "enum member",
								"line": 65,
								"value": "cast(ubyte)9u",
								"char": 3,
								"name": "Date",
								"comment": "Compatibility alias - will be deprecated soon.\n"
							},
							{
								"kind": "enum member",
								"line": 66,
								"value": "cast(ubyte)10u",
								"char": 3,
								"name": "Null",
								"comment": "Compatibility alias - will be deprecated soon.\n"
							},
							{
								"kind": "enum member",
								"line": 67,
								"value": "cast(ubyte)11u",
								"char": 3,
								"name": "Regex",
								"comment": "Compatibility alias - will be deprecated soon.\n"
							},
							{
								"kind": "enum member",
								"line": 68,
								"value": "cast(ubyte)12u",
								"char": 3,
								"name": "DBRef",
								"comment": "Compatibility alias - will be deprecated soon.\n"
							},
							{
								"kind": "enum member",
								"line": 69,
								"value": "cast(ubyte)13u",
								"char": 3,
								"name": "Code",
								"comment": "Compatibility alias - will be deprecated soon.\n"
							},
							{
								"kind": "enum member",
								"line": 70,
								"value": "cast(ubyte)14u",
								"char": 3,
								"name": "Symbol",
								"comment": "Compatibility alias - will be deprecated soon.\n"
							},
							{
								"kind": "enum member",
								"line": 71,
								"value": "cast(ubyte)15u",
								"char": 3,
								"name": "CodeWScope",
								"comment": "Compatibility alias - will be deprecated soon.\n"
							},
							{
								"kind": "enum member",
								"line": 72,
								"value": "cast(ubyte)16u",
								"char": 3,
								"name": "Int",
								"comment": "Compatibility alias - will be deprecated soon.\n"
							},
							{
								"kind": "enum member",
								"line": 73,
								"value": "cast(ubyte)17u",
								"char": 3,
								"name": "Timestamp",
								"comment": "Compatibility alias - will be deprecated soon.\n"
							},
							{
								"kind": "enum member",
								"line": 74,
								"value": "cast(ubyte)18u",
								"char": 3,
								"name": "Long",
								"comment": "Compatibility alias - will be deprecated soon.\n"
							},
							{
								"kind": "enum member",
								"line": 75,
								"value": "cast(ubyte)255u",
								"char": 3,
								"name": "MinKey",
								"comment": "Compatibility alias - will be deprecated soon.\n"
							},
							{
								"kind": "enum member",
								"line": 76,
								"value": "cast(ubyte)127u",
								"char": 3,
								"name": "MaxKey",
								"comment": "Compatibility alias - will be deprecated soon.\n"
							}
						],
						"char": 2,
						"baseDeco": "h",
						"name": "Type",
						"comment": "Represents the type of a BSON value\n"
					},
					{
						"kind": "function",
						"line": 80,
						"storageClass": [
							"static"
						],
						"deco": "FNdZS4vibe4data4bson4Bson",
						"endchar": 77,
						"char": 24,
						"name": "emptyObject",
						"comment": "Returns a new, empty Bson value of type Object.\n",
						"endline": 80
					},
					{
						"kind": "function",
						"line": 83,
						"storageClass": [
							"static"
						],
						"deco": "FNdZS4vibe4data4bson4Bson",
						"endchar": 70,
						"char": 24,
						"name": "emptyArray",
						"comment": "Returns a new, empty Bson value of type Array.\n",
						"endline": 83
					},
					{
						"kind": "alias",
						"line": 87,
						"storageClass": [
							"deprecated"
						],
						"char": 2,
						"name": "EmptyObject",
						"comment": "Deprecated compatibility alias.\n"
					},
					{
						"kind": "alias",
						"line": 90,
						"storageClass": [
							"deprecated"
						],
						"char": 2,
						"name": "EmptyArray",
						"comment": "Deprecated compatibility alias.\n"
					},
					{
						"kind": "constructor",
						"line": 103,
						"deco": "FNcE4vibe4data4bson4Bson4TypeAyhZS4vibe4data4bson4Bson",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "E4vibe4data4bson4Bson4Type",
								"name": "type"
							},
							{
								"deco": "Ayh",
								"name": "data"
							}
						],
						"name": "this",
						"comment": "\t\tCreates a new BSON value using raw data.\n\n\t\tA slice of the first bytes of 'data' is stored, containg the data related to the value. An\n\t\texception is thrown if 'data' is too short.\n",
						"originalType": "ref (Type type, bdata_t data)",
						"endline": 135
					},
					{
						"kind": "constructor",
						"line": 140,
						"deco": "FNcdZS4vibe4data4bson4Bson",
						"endchar": 40,
						"char": 2,
						"parameters": [
							{
								"deco": "d",
								"name": "value"
							}
						],
						"name": "this",
						"comment": "\t\tInitializes a new BSON value from the given D type.\n",
						"originalType": "ref (double value)",
						"endline": 140
					},
					{
						"kind": "constructor",
						"line": 142,
						"deco": "FNcAyaE4vibe4data4bson4Bson4TypeZS4vibe4data4bson4Bson",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"name": "value"
							},
							{
								"deco": "E4vibe4data4bson4Bson4Type",
								"default": "cast(Type)cast(ubyte)2u",
								"name": "type"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (string value, Type type = Type.string)",
						"endline": 147
					},
					{
						"kind": "constructor",
						"line": 149,
						"deco": "FNcxHAyaS4vibe4data4bson4BsonZS4vibe4data4bson4Bson",
						"endchar": 49,
						"char": 2,
						"parameters": [
							{
								"deco": "xHAyaS4vibe4data4bson4Bson",
								"name": "value"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (in Bson[string] value)",
						"endline": 149
					},
					{
						"kind": "constructor",
						"line": 151,
						"deco": "FNcxAS4vibe4data4bson4BsonZS4vibe4data4bson4Bson",
						"endchar": 43,
						"char": 2,
						"parameters": [
							{
								"deco": "xAS4vibe4data4bson4Bson",
								"name": "value"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (in Bson[] value)",
						"endline": 151
					},
					{
						"kind": "constructor",
						"line": 153,
						"deco": "FNcxS4vibe4data4bson11BsonBinDataZS4vibe4data4bson4Bson",
						"endchar": 48,
						"char": 2,
						"parameters": [
							{
								"deco": "xS4vibe4data4bson11BsonBinData",
								"name": "value"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (in BsonBinData value)",
						"endline": 153
					},
					{
						"kind": "constructor",
						"line": 155,
						"deco": "FNcxS4vibe4data4bson12BsonObjectIDZS4vibe4data4bson4Bson",
						"endchar": 49,
						"char": 2,
						"parameters": [
							{
								"deco": "xS4vibe4data4bson12BsonObjectID",
								"name": "value"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (in BsonObjectID value)",
						"endline": 155
					},
					{
						"kind": "constructor",
						"line": 157,
						"deco": "FNcbZS4vibe4data4bson4Bson",
						"endchar": 38,
						"char": 2,
						"parameters": [
							{
								"deco": "b",
								"name": "value"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (bool value)",
						"endline": 157
					},
					{
						"kind": "constructor",
						"line": 159,
						"deco": "FNcxS4vibe4data4bson8BsonDateZS4vibe4data4bson4Bson",
						"endchar": 45,
						"char": 2,
						"parameters": [
							{
								"deco": "xS4vibe4data4bson8BsonDate",
								"name": "value"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (in BsonDate value)",
						"endline": 159
					},
					{
						"kind": "constructor",
						"line": 161,
						"deco": "FNcnZS4vibe4data4bson4Bson",
						"endchar": 39,
						"char": 2,
						"parameters": [
							{
								"deco": "n",
								"name": "_param_0"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (typeof(null))",
						"endline": 161
					},
					{
						"kind": "constructor",
						"line": 163,
						"deco": "FNcxS4vibe4data4bson9BsonRegexZS4vibe4data4bson4Bson",
						"endchar": 46,
						"char": 2,
						"parameters": [
							{
								"deco": "xS4vibe4data4bson9BsonRegex",
								"name": "value"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (in BsonRegex value)",
						"endline": 163
					},
					{
						"kind": "constructor",
						"line": 165,
						"deco": "FNciZS4vibe4data4bson4Bson",
						"endchar": 37,
						"char": 2,
						"parameters": [
							{
								"deco": "i",
								"name": "value"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (int value)",
						"endline": 165
					},
					{
						"kind": "constructor",
						"line": 167,
						"deco": "FNcxS4vibe4data4bson13BsonTimestampZS4vibe4data4bson4Bson",
						"endchar": 50,
						"char": 2,
						"parameters": [
							{
								"deco": "xS4vibe4data4bson13BsonTimestamp",
								"name": "value"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (in BsonTimestamp value)",
						"endline": 167
					},
					{
						"kind": "constructor",
						"line": 169,
						"deco": "FNclZS4vibe4data4bson4Bson",
						"endchar": 38,
						"char": 2,
						"parameters": [
							{
								"deco": "l",
								"name": "value"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (long value)",
						"endline": 169
					},
					{
						"kind": "constructor",
						"line": 171,
						"deco": "FNcxS4vibe4data4json4JsonZS4vibe4data4bson4Bson",
						"endchar": 41,
						"char": 2,
						"parameters": [
							{
								"deco": "xS4vibe4data4json4Json",
								"name": "value"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (in Json value)",
						"endline": 171
					},
					{
						"kind": "function",
						"line": 176,
						"deco": "FxS4vibe4data4bson4BsonZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xS4vibe4data4bson4Bson",
								"name": "other"
							}
						],
						"name": "opAssign",
						"comment": "\t\tAssigns a D type to a BSON value.\n",
						"originalType": "void(in Bson other)",
						"endline": 180
					},
					{
						"kind": "function",
						"line": 182,
						"deco": "FdZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "d",
								"name": "value"
							}
						],
						"name": "opAssign",
						"comment": "ditto\n",
						"endline": 186
					},
					{
						"kind": "function",
						"line": 188,
						"deco": "FAyaZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "value"
							}
						],
						"name": "opAssign",
						"comment": "ditto\n",
						"endline": 198
					},
					{
						"kind": "function",
						"line": 200,
						"deco": "FxHAyaS4vibe4data4bson4BsonZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xHAyaS4vibe4data4bson4Bson",
								"name": "value"
							}
						],
						"name": "opAssign",
						"comment": "ditto\n",
						"originalType": "void(in Bson[string] value)",
						"endline": 215
					},
					{
						"kind": "function",
						"line": 217,
						"deco": "FxAS4vibe4data4bson4BsonZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xAS4vibe4data4bson4Bson",
								"name": "value"
							}
						],
						"name": "opAssign",
						"comment": "ditto\n",
						"originalType": "void(in Bson[] value)",
						"endline": 232
					},
					{
						"kind": "function",
						"line": 234,
						"deco": "FxS4vibe4data4bson11BsonBinDataZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xS4vibe4data4bson11BsonBinData",
								"name": "value"
							}
						],
						"name": "opAssign",
						"comment": "ditto\n",
						"originalType": "void(in BsonBinData value)",
						"endline": 243
					},
					{
						"kind": "function",
						"line": 245,
						"deco": "FxS4vibe4data4bson12BsonObjectIDZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xS4vibe4data4bson12BsonObjectID",
								"name": "value"
							}
						],
						"name": "opAssign",
						"comment": "ditto\n",
						"originalType": "void(in BsonObjectID value)",
						"endline": 249
					},
					{
						"kind": "function",
						"line": 251,
						"deco": "FbZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "b",
								"name": "value"
							}
						],
						"name": "opAssign",
						"comment": "ditto\n",
						"endline": 255
					},
					{
						"kind": "function",
						"line": 257,
						"deco": "FxS4vibe4data4bson8BsonDateZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xS4vibe4data4bson8BsonDate",
								"name": "value"
							}
						],
						"name": "opAssign",
						"comment": "ditto\n",
						"originalType": "void(in BsonDate value)",
						"endline": 261
					},
					{
						"kind": "function",
						"line": 263,
						"deco": "FnZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "n",
								"name": "_param_0"
							}
						],
						"name": "opAssign",
						"comment": "ditto\n",
						"originalType": "void(typeof(null))",
						"endline": 267
					},
					{
						"kind": "function",
						"line": 269,
						"deco": "FxS4vibe4data4bson9BsonRegexZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xS4vibe4data4bson9BsonRegex",
								"name": "value"
							}
						],
						"name": "opAssign",
						"comment": "ditto\n",
						"originalType": "void(in BsonRegex value)",
						"endline": 276
					},
					{
						"kind": "function",
						"line": 278,
						"deco": "FiZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "i",
								"name": "value"
							}
						],
						"name": "opAssign",
						"comment": "ditto\n",
						"endline": 282
					},
					{
						"kind": "function",
						"line": 284,
						"deco": "FxS4vibe4data4bson13BsonTimestampZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xS4vibe4data4bson13BsonTimestamp",
								"name": "value"
							}
						],
						"name": "opAssign",
						"comment": "ditto\n",
						"originalType": "void(in BsonTimestamp value)",
						"endline": 288
					},
					{
						"kind": "function",
						"line": 290,
						"deco": "FlZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "l",
								"name": "value"
							}
						],
						"name": "opAssign",
						"comment": "ditto\n",
						"endline": 294
					},
					{
						"kind": "function",
						"line": 296,
						"deco": "FxS4vibe4data4json4JsonZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xS4vibe4data4json4Json",
								"name": "value"
							}
						],
						"name": "opAssign",
						"comment": "ditto\n",
						"originalType": "void(in Json value)",
						"endline": 301
					},
					{
						"kind": "function",
						"line": 306,
						"deco": "xFNdZE4vibe4data4bson4Bson4Type",
						"endchar": 47,
						"char": 17,
						"name": "type",
						"comment": "\t\tReturns the BSON type of this value.\n",
						"endline": 306
					},
					{
						"kind": "function",
						"line": 308,
						"deco": "xFZb",
						"endchar": 53,
						"char": 7,
						"name": "isNull",
						"endline": 308
					},
					{
						"kind": "function",
						"line": 313,
						"deco": "xFNdZAyh",
						"endchar": 50,
						"char": 20,
						"name": "data",
						"comment": "\t\tReturns the raw data representing this BSON value (not including the field name and type).\n",
						"originalType": "const @property bdata_t()",
						"endline": 313
					},
					{
						"kind": "template",
						"line": 320,
						"members": [
							{
								"kind": "function",
								"line": 320,
								"endchar": 40,
								"char": 4,
								"type": "const T()",
								"name": "opCast",
								"endline": 320
							}
						],
						"char": 4,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "\t\tConverts the BSON value to a D value.\n\n\t\tIf the BSON type of the value does not match the D type, an exception is thrown.\n",
						"name": "opCast"
					},
					{
						"kind": "template",
						"line": 322,
						"members": [
							{
								"kind": "function",
								"line": 322,
								"endchar": 2,
								"char": 14,
								"type": "const @property T()",
								"name": "get",
								"endline": 384
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "ditto\n",
						"name": "get"
					},
					{
						"kind": "template",
						"line": 391,
						"members": [
							{
								"kind": "function",
								"line": 391,
								"endchar": 2,
								"char": 11,
								"type": "inout inout(T)(T def = T.init)",
								"parameters": [
									{
										"default": "T.init",
										"type": "T",
										"name": "def"
									}
								],
								"name": "opt",
								"endline": 396
							}
						],
						"char": 11,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": " Returns the native type for this BSON if it matches the current runtime type.\n\n\t\tIf the runtime type does not match the given native type, the 'def' parameter is returned\n\t\tinstead.\n",
						"name": "opt"
					},
					{
						"kind": "function",
						"line": 400,
						"deco": "xFNdZk",
						"endchar": 2,
						"char": 19,
						"name": "length",
						"comment": " Returns the length of a BSON value of type String, Array, Object or BinData.\n",
						"originalType": "const @property size_t()",
						"endline": 409
					},
					{
						"kind": "function",
						"line": 413,
						"storageClass": [
							"static"
						],
						"deco": "FxS4vibe4data4json4JsonZS4vibe4data4bson4Bson",
						"endchar": 2,
						"char": 14,
						"parameters": [
							{
								"deco": "xS4vibe4data4json4Json",
								"name": "value"
							}
						],
						"name": "fromJson",
						"comment": " Converts a given JSON value to the corresponding BSON value.\n",
						"originalType": "Bson(in Json value)",
						"endline": 418
					},
					{
						"kind": "function",
						"line": 425,
						"deco": "xFZS4vibe4data4json4Json",
						"endchar": 2,
						"char": 7,
						"name": "toJson",
						"comment": " Converts a BSON value to a JSON value.\n\n\t\tAll BSON types that cannot be exactly represented as JSON, will\n\t\tbe converted to a string.\n",
						"endline": 456
					},
					{
						"kind": "function",
						"line": 460,
						"deco": "xFZAya",
						"endchar": 2,
						"char": 9,
						"name": "toString",
						"comment": " Returns a string representation of this BSON value in JSON format.\n",
						"endline": 463
					},
					{
						"kind": "function",
						"line": 469,
						"deco": "NgFAyaZNgS4vibe4data4bson4Bson",
						"endchar": 2,
						"char": 14,
						"parameters": [
							{
								"deco": "Aya",
								"name": "idx"
							}
						],
						"name": "opIndex",
						"comment": " Allows accessing fields of a BSON object using [].\n\n\t\tReturns a null value if the specified field does not exist.\n",
						"endline": 474
					},
					{
						"kind": "template",
						"line": 476,
						"members": [
							{
								"kind": "function",
								"line": 476,
								"endchar": 2,
								"char": 7,
								"type": "void(T value, string idx)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									},
									{
										"type": "string",
										"name": "idx"
									}
								],
								"name": "opIndexAssign",
								"endline": 510
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "ditto\n",
						"name": "opIndexAssign"
					},
					{
						"kind": "function",
						"line": 516,
						"deco": "NgFkZNgS4vibe4data4bson4Bson",
						"endchar": 2,
						"char": 14,
						"parameters": [
							{
								"deco": "k",
								"name": "idx"
							}
						],
						"name": "opIndex",
						"comment": " Allows index based access of a BSON array value.\n\n\t\tReturns a null value if the index is out of bounds.\n",
						"originalType": "inout inout(Bson)(size_t idx)",
						"endline": 521
					},
					{
						"kind": "function",
						"line": 531,
						"deco": "xFDFKS4vibe4data4bson4BsonZiZi",
						"endchar": 2,
						"char": 6,
						"parameters": [
							{
								"deco": "DFKS4vibe4data4bson4BsonZi",
								"name": "del"
							}
						],
						"name": "opApply",
						"comment": "\t\tAllows foreach iterating over BSON objects and arrays.\n\n\t\tNote that although D requires to provide a 'ref' argument for\n\t\topApply, in-place editing of the array/object fields is not possible.\n\t\tAny modification attempty will work on a temporary, even if the\n\t\tloop variable is declared 'ref'.\n",
						"endline": 545
					},
					{
						"kind": "function",
						"line": 547,
						"deco": "xFDFKkKS4vibe4data4bson4BsonZiZi",
						"endchar": 2,
						"char": 6,
						"parameters": [
							{
								"deco": "DFKkKS4vibe4data4bson4BsonZi",
								"name": "del"
							}
						],
						"name": "opApply",
						"comment": "ditto\n",
						"originalType": "const int(int delegate(ref size_t idx, ref Bson obj) del)",
						"endline": 567
					},
					{
						"kind": "function",
						"line": 569,
						"deco": "xFDFKAyaKS4vibe4data4bson4BsonZiZi",
						"endchar": 2,
						"char": 6,
						"parameters": [
							{
								"deco": "DFKAyaKS4vibe4data4bson4BsonZi",
								"name": "del"
							}
						],
						"name": "opApply",
						"comment": "ditto\n",
						"endline": 585
					},
					{
						"kind": "template",
						"line": 591,
						"members": [
							{
								"kind": "function",
								"line": 591,
								"endchar": 80,
								"char": 24,
								"type": "inout @property inout(Bson)()",
								"name": "opDispatch",
								"endline": 591
							}
						],
						"char": 24,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "prop"
							}
						],
						"comment": " Allows to access existing fields of a JSON object using dot syntax.\n\n\t\tReturns a null value for non-existent fields.\n",
						"name": "opDispatch"
					},
					{
						"kind": "template",
						"line": 593,
						"members": [
							{
								"kind": "function",
								"line": 593,
								"endchar": 79,
								"char": 17,
								"type": "@property void(T val)",
								"parameters": [
									{
										"type": "T",
										"name": "val"
									}
								],
								"name": "opDispatch",
								"endline": 593
							}
						],
						"char": 17,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "prop"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "ditto\n",
						"name": "opDispatch"
					},
					{
						"kind": "function",
						"line": 596,
						"deco": "xFKxS4vibe4data4bson4BsonZb",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xS4vibe4data4bson4Bson",
								"storageClass": [
									"ref"
								],
								"name": "other"
							}
						],
						"name": "opEquals",
						"comment": "\n",
						"originalType": "const bool(ref const Bson other)",
						"endline": 599
					},
					{
						"kind": "function",
						"line": 601,
						"deco": "xFxS4vibe4data4bson4BsonZb",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xS4vibe4data4bson4Bson",
								"name": "other"
							}
						],
						"name": "opEquals",
						"comment": "ditto\n",
						"originalType": "const bool(const Bson other)",
						"endline": 604
					}
				],
				"char": 1,
				"name": "Bson",
				"comment": "\tRepresents a BSON value.\n\n\n"
			},
			{
				"kind": "struct",
				"line": 619,
				"members": [
					{
						"kind": "enum",
						"line": 620,
						"members": [
							{
								"kind": "enum member",
								"line": 621,
								"value": "cast(ubyte)0u",
								"char": 3,
								"name": "generic"
							},
							{
								"kind": "enum member",
								"line": 622,
								"value": "cast(ubyte)1u",
								"char": 3,
								"name": "function_"
							},
							{
								"kind": "enum member",
								"line": 623,
								"value": "cast(ubyte)2u",
								"char": 3,
								"name": "binaryOld"
							},
							{
								"kind": "enum member",
								"line": 624,
								"value": "cast(ubyte)3u",
								"char": 3,
								"name": "uuid"
							},
							{
								"kind": "enum member",
								"line": 625,
								"value": "cast(ubyte)5u",
								"char": 3,
								"name": "md5"
							},
							{
								"kind": "enum member",
								"line": 626,
								"value": "cast(ubyte)128u",
								"char": 3,
								"name": "userDefined"
							},
							{
								"kind": "enum member",
								"line": 628,
								"value": "cast(ubyte)0u",
								"char": 3,
								"name": "Generic",
								"comment": "Compatibility alias - will be deprecated soon\n"
							},
							{
								"kind": "enum member",
								"line": 629,
								"value": "cast(ubyte)1u",
								"char": 3,
								"name": "Function",
								"comment": "Compatibility alias - will be deprecated soon\n"
							},
							{
								"kind": "enum member",
								"line": 630,
								"value": "cast(ubyte)2u",
								"char": 3,
								"name": "BinaryOld",
								"comment": "Compatibility alias - will be deprecated soon\n"
							},
							{
								"kind": "enum member",
								"line": 631,
								"value": "cast(ubyte)3u",
								"char": 3,
								"name": "UUID",
								"comment": "Compatibility alias - will be deprecated soon\n"
							},
							{
								"kind": "enum member",
								"line": 632,
								"value": "cast(ubyte)5u",
								"char": 3,
								"name": "MD5",
								"comment": "Compatibility alias - will be deprecated soon\n"
							},
							{
								"kind": "enum member",
								"line": 633,
								"value": "cast(ubyte)128u",
								"char": 3,
								"name": "UserDefined",
								"comment": "Compatibility alias - will be deprecated soon\n"
							}
						],
						"char": 2,
						"baseDeco": "h",
						"name": "Type"
					},
					{
						"kind": "constructor",
						"line": 641,
						"deco": "FNcE4vibe4data4bson11BsonBinData4TypeAyhZS4vibe4data4bson11BsonBinData",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "E4vibe4data4bson11BsonBinData4Type",
								"name": "type"
							},
							{
								"deco": "Ayh",
								"name": "data"
							}
						],
						"name": "this",
						"originalType": "ref (Type type, immutable(ubyte)[] data)",
						"endline": 645
					},
					{
						"kind": "function",
						"line": 647,
						"deco": "xFNdZE4vibe4data4bson11BsonBinData4Type",
						"endchar": 47,
						"char": 17,
						"name": "type",
						"endline": 647
					},
					{
						"kind": "function",
						"line": 648,
						"deco": "xFNdZAyh",
						"endchar": 53,
						"char": 20,
						"name": "rawData",
						"originalType": "const @property bdata_t()",
						"endline": 648
					}
				],
				"char": 1,
				"name": "BsonBinData",
				"comment": "\tRepresents a BSON binary data value (Bson.Type.binData).\n"
			},
			{
				"kind": "struct",
				"line": 655,
				"members": [
					{
						"kind": "constructor",
						"line": 665,
						"deco": "FNcxAhZS4vibe4data4bson12BsonObjectID",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							}
						],
						"name": "this",
						"comment": " Constructs a new object ID from the given raw byte array.\n",
						"originalType": "ref (in ubyte[] bytes)",
						"endline": 668
					},
					{
						"kind": "function",
						"line": 672,
						"storageClass": [
							"static"
						],
						"deco": "FAyaZS4vibe4data4bson12BsonObjectID",
						"endchar": 2,
						"char": 22,
						"parameters": [
							{
								"deco": "Aya",
								"name": "str"
							}
						],
						"name": "fromString",
						"comment": " Creates an on object ID from a string in standard hexa-decimal form.\n",
						"endline": 695
					},
					{
						"kind": "alias",
						"line": 697,
						"char": 2,
						"name": "fromHexString",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 705,
						"storageClass": [
							"static"
						],
						"deco": "FxS3std8datetime7SysTimeZS4vibe4data4bson12BsonObjectID",
						"endchar": 2,
						"char": 22,
						"parameters": [
							{
								"deco": "xS3std8datetime7SysTime",
								"default": "currTime(opCall())",
								"name": "time"
							}
						],
						"name": "generate",
						"comment": " Generates a unique object ID.\n\n   By default it will use the Clock.currTime(UTC()) as timestamp\n   which guarantees that BsonObjectIDs are chronologically\n   sorted.\n",
						"originalType": "BsonObjectID(in SysTime time = Clock.currTime(UTC()))",
						"endline": 720
					},
					{
						"kind": "function",
						"line": 730,
						"storageClass": [
							"static"
						],
						"deco": "FxS3std8datetime7SysTimeZS4vibe4data4bson12BsonObjectID",
						"endchar": 2,
						"char": 22,
						"parameters": [
							{
								"deco": "xS3std8datetime7SysTime",
								"name": "time"
							}
						],
						"name": "createDateID",
						"comment": " Creates a pseudo object ID that matches the given date.\n\n\t\tThis kind of ID can be useful to query a database for items in a certain\n\t\tdate interval using their ID. This works using the property of standard BSON\n\t\tobject IDs that they store their creation date as part of the ID. Note that\n\t\tthis date part is only 32-bit wide and is limited to the same timespan as a\n\t\t32-bit Unix timestamp.\n",
						"originalType": "BsonObjectID(in SysTime time)",
						"endline": 735
					},
					{
						"kind": "function",
						"line": 739,
						"deco": "xFNdZb",
						"endchar": 2,
						"char": 17,
						"name": "valid",
						"comment": " Returns true for any non-zero ID.\n",
						"endline": 744
					},
					{
						"kind": "function",
						"line": 751,
						"deco": "FNdZS3std8datetime7SysTime",
						"endchar": 2,
						"char": 20,
						"name": "timeStamp",
						"comment": " Extracts the time/date portion of the object ID.\n\n\t\tFor IDs created using the standard generation algorithm or using createDateID\n\t\tthis will return the associated time stamp.\n",
						"endline": 755
					},
					{
						"kind": "function",
						"line": 759,
						"deco": "xFKxS4vibe4data4bson12BsonObjectIDZi",
						"endchar": 2,
						"char": 6,
						"parameters": [
							{
								"deco": "xS4vibe4data4bson12BsonObjectID",
								"storageClass": [
									"ref"
								],
								"name": "other"
							}
						],
						"name": "opCmp",
						"comment": " Allows for relational comparison of different IDs.\n",
						"originalType": "const int(ref const BsonObjectID other)",
						"endline": 763
					},
					{
						"kind": "function",
						"line": 767,
						"deco": "xFZAya",
						"endchar": 2,
						"char": 9,
						"name": "toString",
						"comment": " Converts the ID to its standard hexa-decimal string representation.\n",
						"endline": 775
					},
					{
						"kind": "function",
						"line": 777,
						"deco": "FZAh",
						"endchar": 2,
						"char": 10,
						"name": "opCast",
						"endline": 779
					}
				],
				"char": 1,
				"name": "BsonObjectID",
				"comment": "\tRepresents a BSON object id (Bson.Type.binData).\n"
			},
			{
				"kind": "struct",
				"line": 806,
				"members": [
					{
						"kind": "constructor",
						"line": 814,
						"deco": "FNcxS3std8datetime4DateyC3std8datetime8TimeZoneZS4vibe4data4bson8BsonDate",
						"endchar": 78,
						"char": 2,
						"parameters": [
							{
								"deco": "xS3std8datetime4Date",
								"name": "date"
							},
							{
								"deco": "yC3std8datetime8TimeZone",
								"default": "null",
								"name": "tz"
							}
						],
						"name": "this",
						"comment": " Constructs a BsonDate from the given date value.\n\n\t\tThe time-zone independent Date and DateTime types are assumed to be in\n\t\tthe local time zone and converted to UTC if tz is left to null.\n",
						"originalType": "ref (in Date date, immutable TimeZone tz = null)",
						"endline": 814
					},
					{
						"kind": "constructor",
						"line": 816,
						"deco": "FNcxS3std8datetime8DateTimeyC3std8datetime8TimeZoneZS4vibe4data4bson8BsonDate",
						"endchar": 82,
						"char": 2,
						"parameters": [
							{
								"deco": "xS3std8datetime8DateTime",
								"name": "date"
							},
							{
								"deco": "yC3std8datetime8TimeZone",
								"default": "null",
								"name": "tz"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (in DateTime date, immutable TimeZone tz = null)",
						"endline": 816
					},
					{
						"kind": "constructor",
						"line": 818,
						"deco": "FNcxS3std8datetime7SysTimeZS4vibe4data4bson8BsonDate",
						"endchar": 68,
						"char": 2,
						"parameters": [
							{
								"deco": "xS3std8datetime7SysTime",
								"name": "date"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (in SysTime date)",
						"endline": 818
					},
					{
						"kind": "constructor",
						"line": 825,
						"deco": "FNclZS4vibe4data4bson8BsonDate",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "l",
								"name": "unix_time"
							}
						],
						"name": "this",
						"comment": " Constructs a BsonDate from the given UNIX time.\n\n\t\tunix_time needs to be given in milliseconds from 1970/01/01. This is\n\t\tthe native storage format for BsonDate.\n",
						"originalType": "ref (long unix_time)",
						"endline": 828
					},
					{
						"kind": "function",
						"line": 832,
						"storageClass": [
							"static"
						],
						"deco": "FAyaZS4vibe4data4bson8BsonDate",
						"endchar": 113,
						"char": 18,
						"parameters": [
							{
								"deco": "Aya",
								"name": "iso_ext_string"
							}
						],
						"name": "fromString",
						"comment": " Constructs a BsonDate from the given date/time string in ISO extended format.\n",
						"endline": 832
					},
					{
						"kind": "function",
						"line": 836,
						"storageClass": [
							"static"
						],
						"deco": "FlZS4vibe4data4bson8BsonDate",
						"endchar": 2,
						"char": 18,
						"parameters": [
							{
								"deco": "l",
								"name": "std_time"
							}
						],
						"name": "fromStdTime",
						"comment": " Constructs a BsonDate from the given date/time in standard time as defined in std.datetime.\n",
						"endline": 840
					},
					{
						"kind": "function",
						"line": 846,
						"deco": "xFNdZl",
						"endchar": 48,
						"char": 17,
						"name": "value",
						"comment": " The raw unix time value.\n\n\t\tThis is the native storage/transfer format of a BsonDate.\n",
						"endline": 846
					},
					{
						"kind": "function",
						"line": 848,
						"deco": "FNdlZv",
						"endchar": 45,
						"char": 17,
						"parameters": [
							{
								"deco": "l",
								"name": "v"
							}
						],
						"name": "value",
						"comment": "ditto\n",
						"endline": 848
					},
					{
						"kind": "function",
						"line": 852,
						"deco": "xFZAya",
						"endchar": 65,
						"char": 9,
						"name": "toString",
						"comment": " Returns the date formatted as ISO extended format.\n",
						"endline": 852
					},
					{
						"kind": "function",
						"line": 856,
						"deco": "xFZS3std8datetime7SysTime",
						"endchar": 2,
						"char": 10,
						"name": "toSysTime",
						"endline": 859
					},
					{
						"kind": "function",
						"line": 863,
						"deco": "xFKxS4vibe4data4bson8BsonDateZb",
						"endchar": 81,
						"char": 7,
						"parameters": [
							{
								"deco": "xS4vibe4data4bson8BsonDate",
								"storageClass": [
									"ref"
								],
								"name": "other"
							}
						],
						"name": "opEquals",
						"comment": " Allows relational and equality comparisons.\n",
						"originalType": "const bool(ref const BsonDate other)",
						"endline": 863
					},
					{
						"kind": "function",
						"line": 865,
						"deco": "xFKxS4vibe4data4bson8BsonDateZi",
						"endchar": 2,
						"char": 6,
						"parameters": [
							{
								"deco": "xS4vibe4data4bson8BsonDate",
								"storageClass": [
									"ref"
								],
								"name": "other"
							}
						],
						"name": "opCmp",
						"comment": "ditto\n",
						"originalType": "const int(ref const BsonDate other)",
						"endline": 869
					}
				],
				"char": 1,
				"name": "BsonDate",
				"comment": "\tRepresents a BSON date value (Bson.Type.date).\n\n\tBSON date values are stored in UNIX time format, counting the number of\n\tmilliseconds from 1970/01/01.\n"
			},
			{
				"kind": "struct",
				"line": 876,
				"members": [
					{
						"kind": "constructor",
						"line": 879,
						"deco": "FNclZS4vibe4data4bson13BsonTimestamp",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "l",
								"name": "time"
							}
						],
						"name": "this",
						"originalType": "ref (long time)",
						"endline": 881
					}
				],
				"char": 1,
				"name": "BsonTimestamp",
				"comment": "\tRepresents a BSON timestamp value (Bson.Type.timestamp)\n"
			},
			{
				"kind": "struct",
				"line": 888,
				"members": [
					{
						"kind": "constructor",
						"line": 894,
						"deco": "FNcAyaAyaZS4vibe4data4bson9BsonRegex",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"name": "expr"
							},
							{
								"deco": "Aya",
								"name": "options"
							}
						],
						"name": "this",
						"originalType": "ref (string expr, string options)",
						"endline": 898
					},
					{
						"kind": "function",
						"line": 900,
						"deco": "xFNdZAya",
						"endchar": 55,
						"char": 19,
						"name": "expression",
						"endline": 900
					},
					{
						"kind": "function",
						"line": 901,
						"deco": "xFNdZAya",
						"endchar": 55,
						"char": 19,
						"name": "options",
						"endline": 901
					}
				],
				"char": 1,
				"name": "BsonRegex",
				"comment": "\tRepresents a BSON regular expression value (Bson.Type.regex).\n"
			},
			{
				"kind": "template",
				"line": 953,
				"members": [
					{
						"kind": "function",
						"line": 953,
						"endchar": 1,
						"char": 6,
						"type": "Bson(T value, ubyte[] buffer = null)",
						"parameters": [
							{
								"type": "T",
								"name": "value"
							},
							{
								"default": "null",
								"type": "ubyte[]",
								"name": "buffer"
							}
						],
						"name": "serializeToBson",
						"endline": 960
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tSerializes the given value to BSON.\n\n\tThe following types of values are supported:\n\n\t$(DL\n\t\t$(DT Bson)            $(DD Used as-is)\n\t\t$(DT Json)            $(DD Converted to BSON)\n\t\t$(DT BsonBinData)     $(DD Converted to Bson.Type.binData)\n\t\t$(DT BsonObjectID)    $(DD Converted to Bson.Type.objectID)\n\t\t$(DT BsonDate)        $(DD Converted to Bson.Type.date)\n\t\t$(DT BsonTimestamp)   $(DD Converted to Bson.Type.timestamp)\n\t\t$(DT BsonRegex)       $(DD Converted to Bson.Type.regex)\n\t\t$(DT null)            $(DD Converted to Bson.Type.null_)\n\t\t$(DT bool)            $(DD Converted to Bson.Type.bool_)\n\t\t$(DT float, double)   $(DD Converted to Bson.Type.double_)\n\t\t$(DT short, ushort, int, uint, long, ulong) $(DD Converted to Bson.Type.long_)\n\t\t$(DT string)          $(DD Converted to Bson.Type.string)\n\t\t$(DT ubyte[])         $(DD Converted to Bson.Type.binData)\n\t\t$(DT T[])             $(DD Converted to Bson.Type.array)\n\t\t$(DT T[string])       $(DD Converted to Bson.Type.object)\n\t\t$(DT struct)          $(DD Converted to Bson.Type.object)\n\t\t$(DT class)           $(DD Converted to Bson.Type.object or Bson.Type.null_)\n\t)\n\n\tAll entries of an array or an associative array, as well as all R/W properties and\n\tall fields of a struct/class are recursively serialized using the same rules.\n\n\tFields ending with an underscore will have the last underscore stripped in the\n\tserialized output. This makes it possible to use fields with D keywords as their name\n\tby simply appending an underscore.\n\n\tThe following methods can be used to customize the serialization of structs/classes:\n\n\t---\n\tBson toBson() const;\n\tstatic T fromBson(Bson src);\n\n\tJson toJson() const;\n\tstatic T fromJson(Json src);\n\n\tstring toString() const;\n\tstatic T fromString(string src);\n\t---\n\n\tThe methods will have to be defined in pairs. The first pair that is implemented by\n\tthe type will be used for serialization (i.e. toBson overrides toJson).\n",
				"name": "serializeToBson"
			},
			{
				"kind": "template",
				"line": 1036,
				"members": [
					{
						"kind": "function",
						"line": 1043,
						"endchar": 5,
						"char": 10,
						"type": "void(ref T dst, Bson src)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "T",
								"name": "dst"
							},
							{
								"type": "Bson",
								"name": "src"
							}
						],
						"name": "deserializeBson",
						"comment": "        Deserializes a BSON value into the destination variable.\n\n        The same types as for serializeToBson() are supported and handled inversely.\n",
						"endline": 1046
					},
					{
						"kind": "function",
						"line": 1048,
						"endchar": 5,
						"char": 7,
						"type": "T(Bson src)",
						"parameters": [
							{
								"type": "Bson",
								"name": "src"
							}
						],
						"name": "deserializeBson",
						"comment": "ditto\n",
						"endline": 1055
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"name": "deserializeBson"
			},
			{
				"kind": "struct",
				"line": 1327,
				"members": [
					{
						"kind": "constructor",
						"line": 1339,
						"deco": "FNcS4vibe4data4bson4BsonZS4vibe4data4bson14BsonSerializer",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "S4vibe4data4bson4Bson",
								"name": "input"
							}
						],
						"name": "this",
						"originalType": "ref (Bson input)",
						"endline": 1342
					},
					{
						"kind": "constructor",
						"line": 1344,
						"deco": "FNcAhZS4vibe4data4bson14BsonSerializer",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Ah",
								"name": "buffer"
							}
						],
						"name": "this",
						"originalType": "ref (ubyte[] buffer)",
						"endline": 1348
					},
					{
						"kind": "template",
						"line": 1352,
						"members": [
							{
								"kind": "variable",
								"line": 1352,
								"init": "is(typeof(getBsonTypeID(T.init)))",
								"storageClass": [
									"enum"
								],
								"char": 42,
								"name": "isSupportedValueType"
							}
						],
						"char": 2,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "isSupportedValueType"
					},
					{
						"kind": "function",
						"line": 1357,
						"deco": "FZS4vibe4data4bson4Bson",
						"endchar": 2,
						"char": 7,
						"name": "getSerializedResult",
						"endline": 1363
					},
					{
						"kind": "template",
						"line": 1365,
						"members": [
							{
								"kind": "function",
								"line": 1365,
								"endchar": 2,
								"char": 7,
								"type": "void()",
								"name": "beginWriteDictionary",
								"endline": 1370
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "beginWriteDictionary"
					},
					{
						"kind": "template",
						"line": 1371,
						"members": [
							{
								"kind": "function",
								"line": 1371,
								"endchar": 2,
								"char": 7,
								"type": "void()",
								"name": "endWriteDictionary",
								"endline": 1377
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "endWriteDictionary"
					},
					{
						"kind": "template",
						"line": 1378,
						"members": [
							{
								"kind": "function",
								"line": 1378,
								"endchar": 71,
								"char": 7,
								"type": "void(string name)",
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"name": "beginWriteDictionaryEntry",
								"endline": 1378
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "beginWriteDictionaryEntry"
					},
					{
						"kind": "template",
						"line": 1379,
						"members": [
							{
								"kind": "function",
								"line": 1379,
								"endchar": 48,
								"char": 7,
								"type": "void(string name)",
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"name": "endWriteDictionaryEntry",
								"endline": 1379
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "endWriteDictionaryEntry"
					},
					{
						"kind": "template",
						"line": 1381,
						"members": [
							{
								"kind": "function",
								"line": 1381,
								"endchar": 2,
								"char": 7,
								"type": "void(size_t)",
								"parameters": [
									{
										"type": "size_t"
									}
								],
								"name": "beginWriteArray",
								"endline": 1386
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "beginWriteArray"
					},
					{
						"kind": "template",
						"line": 1387,
						"members": [
							{
								"kind": "function",
								"line": 1387,
								"endchar": 52,
								"char": 7,
								"type": "void()",
								"name": "endWriteArray",
								"endline": 1387
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "endWriteArray"
					},
					{
						"kind": "template",
						"line": 1388,
						"members": [
							{
								"kind": "function",
								"line": 1388,
								"endchar": 65,
								"char": 7,
								"type": "void(size_t idx)",
								"parameters": [
									{
										"type": "size_t",
										"name": "idx"
									}
								],
								"name": "beginWriteArrayEntry",
								"endline": 1388
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "beginWriteArrayEntry"
					},
					{
						"kind": "template",
						"line": 1389,
						"members": [
							{
								"kind": "function",
								"line": 1389,
								"endchar": 42,
								"char": 7,
								"type": "void(size_t idx)",
								"parameters": [
									{
										"type": "size_t",
										"name": "idx"
									}
								],
								"name": "endWriteArrayEntry",
								"endline": 1389
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "endWriteArrayEntry"
					},
					{
						"kind": "template",
						"line": 1392,
						"members": [
							{
								"kind": "function",
								"line": 1392,
								"endchar": 84,
								"char": 7,
								"type": "void(in T value)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "T",
										"name": "value"
									}
								],
								"name": "writeValue",
								"endline": 1392
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "writeValue"
					},
					{
						"kind": "template",
						"line": 1446,
						"members": [
							{
								"kind": "function",
								"line": 1446,
								"endchar": 2,
								"char": 7,
								"type": "void(scope void delegate(string) entry_callback)",
								"parameters": [
									{
										"storageClass": [
											"scope"
										],
										"type": "void delegate(string)",
										"name": "entry_callback"
									}
								],
								"name": "readDictionary",
								"endline": 1455
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "readDictionary"
					},
					{
						"kind": "template",
						"line": 1457,
						"members": [
							{
								"kind": "function",
								"line": 1457,
								"endchar": 2,
								"char": 7,
								"type": "void(scope void delegate(size_t) size_callback, scope void delegate() entry_callback)",
								"parameters": [
									{
										"storageClass": [
											"scope"
										],
										"type": "void delegate(size_t)",
										"name": "size_callback"
									},
									{
										"storageClass": [
											"scope"
										],
										"type": "void delegate()",
										"name": "entry_callback"
									}
								],
								"name": "readArray",
								"endline": 1466
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "readArray"
					},
					{
						"kind": "template",
						"line": 1468,
						"members": [
							{
								"kind": "function",
								"line": 1468,
								"endchar": 2,
								"char": 4,
								"type": "T()",
								"name": "readValue",
								"endline": 1499
							}
						],
						"char": 4,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "readValue"
					},
					{
						"kind": "function",
						"line": 1501,
						"deco": "FZb",
						"endchar": 2,
						"char": 7,
						"name": "tryReadNull",
						"endline": 1505
					},
					{
						"kind": "function",
						"line": 1327,
						"deco": "FNaNbNcNiNjNfS4vibe4data4bson14BsonSerializerZS4vibe4data4bson14BsonSerializer",
						"char": 1,
						"parameters": [
							{
								"deco": "S4vibe4data4bson14BsonSerializer",
								"name": "p"
							}
						],
						"name": "opAssign"
					}
				],
				"char": 1,
				"name": "BsonSerializer",
				"comment": "\tSerializes to an in-memory BSON representation.\n\n\tSee_Also: vibe.data.serialization.serialize, vibe.data.serialization.deserialize, serializeToBson, deserializeBson\n"
			},
			{
				"kind": "template",
				"line": 1626,
				"members": [
					{
						"kind": "function",
						"line": 1626,
						"endchar": 1,
						"char": 9,
						"type": "ubyte[](T v)",
						"parameters": [
							{
								"type": "T",
								"name": "v"
							}
						],
						"name": "toBsonData",
						"endline": 1637
					}
				],
				"char": 9,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"name": "toBsonData"
			},
			{
				"kind": "template",
				"line": 1639,
				"members": [
					{
						"kind": "function",
						"line": 1639,
						"endchar": 1,
						"char": 3,
						"type": "T(in ubyte[] v)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "ubyte[]",
								"name": "v"
							}
						],
						"name": "fromBsonData",
						"endline": 1645
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"name": "fromBsonData"
			},
			{
				"kind": "template",
				"line": 1647,
				"members": [
					{
						"kind": "function",
						"line": 1647,
						"endchar": 1,
						"char": 9,
						"type": "ubyte[](T v)",
						"parameters": [
							{
								"type": "T",
								"name": "v"
							}
						],
						"name": "toBigEndianData",
						"endline": 1655
					}
				],
				"char": 9,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"name": "toBigEndianData"
			}
		],
		"name": "vibe.data.bson",
		"comment": "\tBSON serialization and value handling.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\data\\json.d",
		"members": [
			{
				"kind": "import",
				"line": 42,
				"char": 15,
				"name": "vibe.data.serialization"
			},
			{
				"kind": "struct",
				"line": 70,
				"members": [
					{
						"kind": "enum",
						"line": 95,
						"members": [
							{
								"kind": "enum member",
								"line": 96,
								"value": "0",
								"char": 3,
								"name": "undefined",
								"comment": "A non-existent value in a JSON object\n"
							},
							{
								"kind": "enum member",
								"line": 97,
								"value": "1",
								"char": 3,
								"name": "null_",
								"comment": "Null value\n"
							},
							{
								"kind": "enum member",
								"line": 98,
								"value": "2",
								"char": 3,
								"name": "bool_",
								"comment": "Boolean value\n"
							},
							{
								"kind": "enum member",
								"line": 99,
								"value": "3",
								"char": 3,
								"name": "int_",
								"comment": "64-bit integer value\n"
							},
							{
								"kind": "enum member",
								"line": 100,
								"value": "4",
								"char": 3,
								"name": "float_",
								"comment": "64-bit floating point value\n"
							},
							{
								"kind": "enum member",
								"line": 101,
								"value": "5",
								"char": 3,
								"name": "string",
								"comment": "UTF-8 string\n"
							},
							{
								"kind": "enum member",
								"line": 102,
								"value": "6",
								"char": 3,
								"name": "array",
								"comment": "Array of JSON values\n"
							},
							{
								"kind": "enum member",
								"line": 103,
								"value": "7",
								"char": 3,
								"name": "object",
								"comment": "JSON object aka. dictionary from string to Json\n"
							},
							{
								"kind": "enum member",
								"line": 105,
								"value": "0",
								"char": 3,
								"name": "Undefined",
								"comment": "Compatibility alias - will be deprecated soon\n"
							},
							{
								"kind": "enum member",
								"line": 106,
								"value": "1",
								"char": 3,
								"name": "Null",
								"comment": "Compatibility alias - will be deprecated soon\n"
							},
							{
								"kind": "enum member",
								"line": 107,
								"value": "2",
								"char": 3,
								"name": "Bool",
								"comment": "Compatibility alias - will be deprecated soon\n"
							},
							{
								"kind": "enum member",
								"line": 108,
								"value": "3",
								"char": 3,
								"name": "Int",
								"comment": "Compatibility alias - will be deprecated soon\n"
							},
							{
								"kind": "enum member",
								"line": 109,
								"value": "4",
								"char": 3,
								"name": "Float",
								"comment": "Compatibility alias - will be deprecated soon\n"
							},
							{
								"kind": "enum member",
								"line": 110,
								"value": "5",
								"char": 3,
								"name": "String",
								"comment": "Compatibility alias - will be deprecated soon\n"
							},
							{
								"kind": "enum member",
								"line": 111,
								"value": "6",
								"char": 3,
								"name": "Array",
								"comment": "Compatibility alias - will be deprecated soon\n"
							},
							{
								"kind": "enum member",
								"line": 112,
								"value": "7",
								"char": 3,
								"name": "Object",
								"comment": "Compatibility alias - will be deprecated soon\n"
							}
						],
						"char": 2,
						"baseDeco": "i",
						"name": "Type",
						"comment": " Represents the run time type of a JSON value.\n"
					},
					{
						"kind": "function",
						"line": 116,
						"storageClass": [
							"static"
						],
						"deco": "FNdZS4vibe4data4json4Json",
						"endchar": 53,
						"char": 24,
						"name": "undefined",
						"comment": "New JSON value of Type.Undefined\n",
						"endline": 116
					},
					{
						"kind": "function",
						"line": 119,
						"storageClass": [
							"static"
						],
						"deco": "FNdZS4vibe4data4json4Json",
						"endchar": 77,
						"char": 24,
						"name": "emptyObject",
						"comment": "New JSON value of Type.Object\n",
						"endline": 119
					},
					{
						"kind": "function",
						"line": 122,
						"storageClass": [
							"static"
						],
						"deco": "FNdZS4vibe4data4json4Json",
						"endchar": 70,
						"char": 24,
						"name": "emptyArray",
						"comment": "New JSON value of Type.Array\n",
						"endline": 122
					},
					{
						"kind": "constructor",
						"line": 129,
						"deco": "FNcnZS4vibe4data4json4Json",
						"endchar": 44,
						"char": 2,
						"parameters": [
							{
								"deco": "n",
								"name": "_param_0"
							}
						],
						"name": "this",
						"comment": "\t\tConstructor for a JSON object.\n",
						"originalType": "ref (typeof(null))",
						"endline": 129
					},
					{
						"kind": "constructor",
						"line": 131,
						"deco": "FNcbZS4vibe4data4json4Json",
						"endchar": 50,
						"char": 2,
						"parameters": [
							{
								"deco": "b",
								"name": "v"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (bool v)",
						"endline": 131
					},
					{
						"kind": "constructor",
						"line": 133,
						"deco": "FNcgZS4vibe4data4json4Json",
						"endchar": 36,
						"char": 2,
						"parameters": [
							{
								"deco": "g",
								"name": "v"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (byte v)",
						"endline": 133
					},
					{
						"kind": "constructor",
						"line": 135,
						"deco": "FNchZS4vibe4data4json4Json",
						"endchar": 37,
						"char": 2,
						"parameters": [
							{
								"deco": "h",
								"name": "v"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (ubyte v)",
						"endline": 135
					},
					{
						"kind": "constructor",
						"line": 137,
						"deco": "FNcsZS4vibe4data4json4Json",
						"endchar": 37,
						"char": 2,
						"parameters": [
							{
								"deco": "s",
								"name": "v"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (short v)",
						"endline": 137
					},
					{
						"kind": "constructor",
						"line": 139,
						"deco": "FNctZS4vibe4data4json4Json",
						"endchar": 38,
						"char": 2,
						"parameters": [
							{
								"deco": "t",
								"name": "v"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (ushort v)",
						"endline": 139
					},
					{
						"kind": "constructor",
						"line": 141,
						"deco": "FNciZS4vibe4data4json4Json",
						"endchar": 35,
						"char": 2,
						"parameters": [
							{
								"deco": "i",
								"name": "v"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (int v)",
						"endline": 141
					},
					{
						"kind": "constructor",
						"line": 143,
						"deco": "FNckZS4vibe4data4json4Json",
						"endchar": 36,
						"char": 2,
						"parameters": [
							{
								"deco": "k",
								"name": "v"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (uint v)",
						"endline": 143
					},
					{
						"kind": "constructor",
						"line": 145,
						"deco": "FNclZS4vibe4data4json4Json",
						"endchar": 48,
						"char": 2,
						"parameters": [
							{
								"deco": "l",
								"name": "v"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (long v)",
						"endline": 145
					},
					{
						"kind": "constructor",
						"line": 147,
						"deco": "FNcdZS4vibe4data4json4Json",
						"endchar": 54,
						"char": 2,
						"parameters": [
							{
								"deco": "d",
								"name": "v"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (double v)",
						"endline": 147
					},
					{
						"kind": "constructor",
						"line": 149,
						"deco": "FNcAyaZS4vibe4data4json4Json",
						"endchar": 55,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"name": "v"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (string v)",
						"endline": 149
					},
					{
						"kind": "constructor",
						"line": 151,
						"deco": "FNcAS4vibe4data4json4JsonZS4vibe4data4json4Json",
						"endchar": 53,
						"char": 2,
						"parameters": [
							{
								"deco": "AS4vibe4data4json4Json",
								"name": "v"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (Json[] v)",
						"endline": 151
					},
					{
						"kind": "constructor",
						"line": 153,
						"deco": "FNcHAyaS4vibe4data4json4JsonZS4vibe4data4json4Json",
						"endchar": 61,
						"char": 2,
						"parameters": [
							{
								"deco": "HAyaS4vibe4data4json4Json",
								"name": "v"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (Json[string] v)",
						"endline": 153
					},
					{
						"kind": "function",
						"line": 158,
						"deco": "FNcS4vibe4data4json4JsonZS4vibe4data4json4Json",
						"endchar": 2,
						"char": 11,
						"parameters": [
							{
								"deco": "S4vibe4data4json4Json",
								"name": "v"
							}
						],
						"name": "opAssign",
						"comment": "\t\tAllows assignment of D values to a JSON value.\n",
						"endline": 172
					},
					{
						"kind": "function",
						"line": 174,
						"deco": "FnZv",
						"endchar": 70,
						"char": 7,
						"parameters": [
							{
								"deco": "n",
								"name": "_param_0"
							}
						],
						"name": "opAssign",
						"comment": "ditto\n",
						"originalType": "void(typeof(null))",
						"endline": 174
					},
					{
						"kind": "function",
						"line": 176,
						"deco": "FbZb",
						"endchar": 69,
						"char": 7,
						"parameters": [
							{
								"deco": "b",
								"name": "v"
							}
						],
						"name": "opAssign",
						"comment": "ditto\n",
						"endline": 176
					},
					{
						"kind": "function",
						"line": 178,
						"deco": "FiZi",
						"endchar": 65,
						"char": 6,
						"parameters": [
							{
								"deco": "i",
								"name": "v"
							}
						],
						"name": "opAssign",
						"comment": "ditto\n",
						"endline": 178
					},
					{
						"kind": "function",
						"line": 180,
						"deco": "FlZl",
						"endchar": 67,
						"char": 7,
						"parameters": [
							{
								"deco": "l",
								"name": "v"
							}
						],
						"name": "opAssign",
						"comment": "ditto\n",
						"endline": 180
					},
					{
						"kind": "function",
						"line": 182,
						"deco": "FdZd",
						"endchar": 75,
						"char": 9,
						"parameters": [
							{
								"deco": "d",
								"name": "v"
							}
						],
						"name": "opAssign",
						"comment": "ditto\n",
						"endline": 182
					},
					{
						"kind": "function",
						"line": 184,
						"deco": "FAyaZAya",
						"endchar": 76,
						"char": 9,
						"parameters": [
							{
								"deco": "Aya",
								"name": "v"
							}
						],
						"name": "opAssign",
						"comment": "ditto\n",
						"endline": 184
					},
					{
						"kind": "function",
						"line": 186,
						"deco": "FAS4vibe4data4json4JsonZAS4vibe4data4json4Json",
						"endchar": 2,
						"char": 9,
						"parameters": [
							{
								"deco": "AS4vibe4data4json4Json",
								"name": "v"
							}
						],
						"name": "opAssign",
						"comment": "ditto\n",
						"endline": 192
					},
					{
						"kind": "function",
						"line": 194,
						"deco": "FHAyaS4vibe4data4json4JsonZHAyaS4vibe4data4json4Json",
						"endchar": 2,
						"char": 15,
						"parameters": [
							{
								"deco": "HAyaS4vibe4data4json4Json",
								"name": "v"
							}
						],
						"name": "opAssign",
						"comment": "ditto\n",
						"endline": 200
					},
					{
						"kind": "function",
						"line": 205,
						"deco": "FAyaZv",
						"endchar": 80,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "item"
							}
						],
						"name": "remove",
						"comment": "\t\tAllows removal of values from Type.Object Json objects.\n",
						"endline": 205
					},
					{
						"kind": "function",
						"line": 210,
						"deco": "xFNdZE4vibe4data4json4Json4Type",
						"endchar": 47,
						"char": 17,
						"name": "type",
						"comment": "\t\tThe current type id of this JSON object.\n",
						"endline": 210
					},
					{
						"kind": "function",
						"line": 215,
						"deco": "NgFNckZNgS4vibe4data4json4Json",
						"endchar": 89,
						"char": 18,
						"parameters": [
							{
								"deco": "k",
								"name": "idx"
							}
						],
						"name": "opIndex",
						"comment": "\t\tAllows direct indexing of array typed JSON values.\n",
						"originalType": "inout ref inout(Json)(size_t idx)",
						"endline": 215
					},
					{
						"kind": "function",
						"line": 217,
						"deco": "xFZS4vibe4data4json4Json",
						"endchar": 2,
						"char": 7,
						"name": "clone",
						"endline": 234
					},
					{
						"kind": "function",
						"line": 240,
						"deco": "xFAyaZxS4vibe4data4json4Json",
						"endchar": 2,
						"char": 14,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"name": "opIndex",
						"comment": "\t\tAllows direct indexing of object typed JSON values using a string as\n\t\tthe key.\n",
						"endline": 248
					},
					{
						"kind": "function",
						"line": 250,
						"deco": "FNcAyaZS4vibe4data4json4Json",
						"endchar": 2,
						"char": 11,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"name": "opIndex",
						"comment": "ditto\n",
						"endline": 267
					},
					{
						"kind": "function",
						"line": 272,
						"deco": "NgFZNgAS4vibe4data4json4Json",
						"endchar": 72,
						"char": 16,
						"name": "opSlice",
						"comment": "\t\tReturns a slice of a JSON array.\n",
						"endline": 272
					},
					{
						"kind": "function",
						"line": 274,
						"deco": "NgFkkZNgAS4vibe4data4json4Json",
						"endchar": 106,
						"char": 16,
						"parameters": [
							{
								"deco": "k",
								"name": "from"
							},
							{
								"deco": "k",
								"name": "to"
							}
						],
						"name": "opSlice",
						"comment": "\n",
						"originalType": "inout inout(Json[])(size_t from, size_t to)",
						"endline": 274
					},
					{
						"kind": "function",
						"line": 279,
						"deco": "xFNdZk",
						"endchar": 2,
						"char": 19,
						"name": "length",
						"comment": "\t\tReturns the number of entries of string, array or object typed JSON values.\n",
						"originalType": "const @property size_t()",
						"endline": 288
					},
					{
						"kind": "function",
						"line": 293,
						"deco": "FDFKS4vibe4data4json4JsonZiZi",
						"endchar": 2,
						"char": 6,
						"parameters": [
							{
								"deco": "DFKS4vibe4data4json4JsonZi",
								"name": "del"
							}
						],
						"name": "opApply",
						"comment": "\t\tAllows foreach iterating over JSON objects and arrays.\n",
						"endline": 308
					},
					{
						"kind": "function",
						"line": 310,
						"deco": "xFDFKxS4vibe4data4json4JsonZiZi",
						"endchar": 2,
						"char": 6,
						"parameters": [
							{
								"deco": "DFKxS4vibe4data4json4JsonZi",
								"name": "del"
							}
						],
						"name": "opApply",
						"comment": "ditto\n",
						"originalType": "const int(int delegate(ref const Json obj) del)",
						"endline": 325
					},
					{
						"kind": "function",
						"line": 327,
						"deco": "FDFKkKS4vibe4data4json4JsonZiZi",
						"endchar": 2,
						"char": 6,
						"parameters": [
							{
								"deco": "DFKkKS4vibe4data4json4JsonZi",
								"name": "del"
							}
						],
						"name": "opApply",
						"comment": "ditto\n",
						"originalType": "int(int delegate(ref size_t idx, ref Json obj) del)",
						"endline": 334
					},
					{
						"kind": "function",
						"line": 336,
						"deco": "xFDFKkKxS4vibe4data4json4JsonZiZi",
						"endchar": 2,
						"char": 6,
						"parameters": [
							{
								"deco": "DFKkKxS4vibe4data4json4JsonZi",
								"name": "del"
							}
						],
						"name": "opApply",
						"comment": "ditto\n",
						"originalType": "const int(int delegate(ref size_t idx, ref const Json obj) del)",
						"endline": 343
					},
					{
						"kind": "function",
						"line": 345,
						"deco": "FDFKAyaKS4vibe4data4json4JsonZiZi",
						"endchar": 2,
						"char": 6,
						"parameters": [
							{
								"deco": "DFKAyaKS4vibe4data4json4JsonZi",
								"name": "del"
							}
						],
						"name": "opApply",
						"comment": "ditto\n",
						"endline": 353
					},
					{
						"kind": "function",
						"line": 355,
						"deco": "xFDFKAyaKxS4vibe4data4json4JsonZiZi",
						"endchar": 2,
						"char": 6,
						"parameters": [
							{
								"deco": "DFKAyaKxS4vibe4data4json4JsonZi",
								"name": "del"
							}
						],
						"name": "opApply",
						"comment": "ditto\n",
						"originalType": "const int(int delegate(ref string idx, ref const Json obj) del)",
						"endline": 363
					},
					{
						"kind": "template",
						"line": 368,
						"members": [
							{
								"kind": "function",
								"line": 368,
								"endchar": 45,
								"char": 11,
								"type": "inout inout(T)()",
								"name": "opCast",
								"endline": 368
							}
						],
						"char": 11,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "\t\tConverts the JSON value to the corresponding D type - types must match exactly.\n",
						"name": "opCast"
					},
					{
						"kind": "template",
						"line": 370,
						"members": [
							{
								"kind": "function",
								"line": 370,
								"endchar": 2,
								"char": 21,
								"type": "inout @property inout(T)()",
								"name": "get",
								"endline": 383
							}
						],
						"char": 21,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "ditto\n",
						"name": "get"
					},
					{
						"kind": "template",
						"line": 391,
						"members": [
							{
								"kind": "function",
								"line": 391,
								"endchar": 2,
								"char": 21,
								"type": "const @property const(T)(const(T) def = T.init)",
								"parameters": [
									{
										"default": "T.init",
										"type": "const(T)",
										"name": "def"
									}
								],
								"name": "opt",
								"endline": 395
							}
						],
						"char": 21,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "\t\tReturns the native type for this JSON if it matches the current runtime type.\n\n\t\tIf the runtime type does not match the given native type, the 'def' parameter is returned\n\t\tinstead.\n",
						"name": "opt"
					},
					{
						"kind": "template",
						"line": 397,
						"members": [
							{
								"kind": "function",
								"line": 397,
								"endchar": 2,
								"char": 14,
								"type": "@property T(T def = T.init)",
								"parameters": [
									{
										"default": "T.init",
										"type": "T",
										"name": "def"
									}
								],
								"name": "opt",
								"endline": 401
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "ditto\n",
						"name": "opt"
					},
					{
						"kind": "template",
						"line": 406,
						"members": [
							{
								"kind": "function",
								"line": 406,
								"endchar": 2,
								"char": 21,
								"type": "inout @property inout(T)()",
								"name": "to",
								"endline": 480
							}
						],
						"char": 21,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "\t\tConverts the JSON value to the corresponding D type - types are converted as necessary.\n",
						"name": "to"
					},
					{
						"kind": "template",
						"line": 497,
						"members": [
							{
								"kind": "function",
								"line": 497,
								"endchar": 2,
								"char": 7,
								"type": "const Json()",
								"name": "opUnary",
								"endline": 508
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "\t\tPerforms unary operations on the JSON value.\n\n\t\tThe following operations are supported for each type:\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD ~)\n\t\t\t$(DT Int)    $(DD +, -, ++, --)\n\t\t\t$(DT Float)  $(DD +, -, ++, --)\n\t\t\t$(DT String) $(DD none)\n\t\t\t$(DT Array)  $(DD none)\n\t\t\t$(DT Object) $(DD none)\n\t\t)\n",
						"name": "opUnary"
					},
					{
						"kind": "template",
						"line": 527,
						"members": [
							{
								"kind": "function",
								"line": 527,
								"endchar": 2,
								"char": 7,
								"type": "const Json(ref const(Json) other)",
								"parameters": [
									{
										"storageClass": [
											"ref"
										],
										"type": "const(Json)",
										"name": "other"
									}
								],
								"name": "opBinary",
								"endline": 567
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "\t\tPerforms binary operations between JSON values.\n\n\t\tThe two JSON values must be of the same run time type or a JSONException\n\t\twill be thrown. Only the operations listed are allowed for each of the\n\t\ttypes.\n\n\t\t$(DL\n\t\t\t$(DT Null)   $(DD none)\n\t\t\t$(DT Bool)   $(DD &&, ||)\n\t\t\t$(DT Int)    $(DD +, -, *, /, %)\n\t\t\t$(DT Float)  $(DD +, -, *, /, %)\n\t\t\t$(DT String) $(DD ~)\n\t\t\t$(DT Array)  $(DD ~)\n\t\t\t$(DT Object) $(DD in)\n\t\t)\n",
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 569,
						"constraint": "op == \"~\"",
						"members": [
							{
								"kind": "function",
								"line": 569,
								"endchar": 2,
								"char": 7,
								"type": "Json(Json other)",
								"parameters": [
									{
										"type": "Json",
										"name": "other"
									}
								],
								"name": "opBinary",
								"endline": 578
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "ditto\n",
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 580,
						"constraint": "op == \"+\" || op == \"-\" || op == \"*\" || op == \"/\" || op == \"%\" || op == \"~\"",
						"members": [
							{
								"kind": "function",
								"line": 580,
								"endchar": 2,
								"char": 7,
								"type": "void(Json other)",
								"parameters": [
									{
										"type": "Json",
										"name": "other"
									}
								],
								"name": "opOpAssign",
								"endline": 612
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "ditto\n",
						"name": "opOpAssign"
					},
					{
						"kind": "template",
						"line": 614,
						"constraint": "!is(T == Json) && is(typeof(Json(other)))",
						"members": [
							{
								"kind": "function",
								"line": 614,
								"endchar": 2,
								"char": 7,
								"type": "void(T other)",
								"parameters": [
									{
										"type": "T",
										"name": "other"
									}
								],
								"name": "opOpAssign",
								"endline": 618
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "ditto\n",
						"name": "opOpAssign"
					},
					{
						"kind": "template",
						"line": 620,
						"members": [
							{
								"kind": "function",
								"line": 620,
								"endchar": 109,
								"char": 7,
								"type": "const Json(bool other)",
								"parameters": [
									{
										"deco": "b",
										"name": "other"
									}
								],
								"name": "opBinary",
								"endline": 620
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "ditto\n",
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 622,
						"members": [
							{
								"kind": "function",
								"line": 622,
								"endchar": 108,
								"char": 7,
								"type": "const Json(long other)",
								"parameters": [
									{
										"deco": "l",
										"name": "other"
									}
								],
								"name": "opBinary",
								"endline": 622
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "ditto\n",
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 624,
						"members": [
							{
								"kind": "function",
								"line": 624,
								"endchar": 114,
								"char": 7,
								"type": "const Json(double other)",
								"parameters": [
									{
										"deco": "d",
										"name": "other"
									}
								],
								"name": "opBinary",
								"endline": 624
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "ditto\n",
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 626,
						"members": [
							{
								"kind": "function",
								"line": 626,
								"endchar": 115,
								"char": 7,
								"type": "const Json(string other)",
								"parameters": [
									{
										"type": "string",
										"name": "other"
									}
								],
								"name": "opBinary",
								"endline": 626
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "ditto\n",
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 628,
						"members": [
							{
								"kind": "function",
								"line": 628,
								"endchar": 110,
								"char": 7,
								"type": "Json(Json[] other)",
								"parameters": [
									{
										"type": "Json[]",
										"name": "other"
									}
								],
								"name": "opBinary",
								"endline": 628
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "ditto\n",
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 630,
						"members": [
							{
								"kind": "function",
								"line": 630,
								"endchar": 114,
								"char": 7,
								"type": "const Json(bool other)",
								"parameters": [
									{
										"deco": "b",
										"name": "other"
									}
								],
								"name": "opBinaryRight",
								"endline": 630
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "ditto\n",
						"name": "opBinaryRight"
					},
					{
						"kind": "template",
						"line": 632,
						"members": [
							{
								"kind": "function",
								"line": 632,
								"endchar": 113,
								"char": 7,
								"type": "const Json(long other)",
								"parameters": [
									{
										"deco": "l",
										"name": "other"
									}
								],
								"name": "opBinaryRight",
								"endline": 632
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "ditto\n",
						"name": "opBinaryRight"
					},
					{
						"kind": "template",
						"line": 634,
						"members": [
							{
								"kind": "function",
								"line": 634,
								"endchar": 119,
								"char": 7,
								"type": "const Json(double other)",
								"parameters": [
									{
										"deco": "d",
										"name": "other"
									}
								],
								"name": "opBinaryRight",
								"endline": 634
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "ditto\n",
						"name": "opBinaryRight"
					},
					{
						"kind": "template",
						"line": 636,
						"constraint": "op == \"~\"",
						"members": [
							{
								"kind": "function",
								"line": 636,
								"endchar": 119,
								"char": 7,
								"type": "const Json(string other)",
								"parameters": [
									{
										"type": "string",
										"name": "other"
									}
								],
								"name": "opBinaryRight",
								"endline": 636
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "ditto\n",
						"name": "opBinaryRight"
					},
					{
						"kind": "template",
						"line": 638,
						"constraint": "op == \"in\"",
						"members": [
							{
								"kind": "function",
								"line": 638,
								"endchar": 2,
								"char": 15,
								"type": "inout inout(Json)*(string other)",
								"parameters": [
									{
										"type": "string",
										"name": "other"
									}
								],
								"name": "opBinaryRight",
								"endline": 644
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "ditto\n",
						"name": "opBinaryRight"
					},
					{
						"kind": "template",
						"line": 646,
						"members": [
							{
								"kind": "function",
								"line": 646,
								"endchar": 115,
								"char": 7,
								"type": "Json(Json[] other)",
								"parameters": [
									{
										"type": "Json[]",
										"name": "other"
									}
								],
								"name": "opBinaryRight",
								"endline": 646
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "ditto\n",
						"name": "opBinaryRight"
					},
					{
						"kind": "function",
						"line": 651,
						"deco": "FS4vibe4data4json4JsonZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "S4vibe4data4json4Json",
								"name": "element"
							}
						],
						"name": "appendArrayElement",
						"comment": " The append operator will append arrays. This method always appends it's argument as an array element, so nested arrays can be created.\n",
						"endline": 655
					},
					{
						"kind": "template",
						"line": 660,
						"members": [
							{
								"kind": "function",
								"line": 660,
								"endchar": 80,
								"char": 24,
								"type": "const @property const(Json)()",
								"name": "opDispatch",
								"endline": 660
							}
						],
						"char": 24,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "prop"
							}
						],
						"comment": "\t\tAllows to access existing fields of a JSON object using dot syntax.\n",
						"name": "opDispatch"
					},
					{
						"kind": "template",
						"line": 662,
						"members": [
							{
								"kind": "function",
								"line": 662,
								"endchar": 71,
								"char": 21,
								"type": "@property ref Json()",
								"name": "opDispatch",
								"endline": 662
							}
						],
						"char": 21,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "prop"
							}
						],
						"comment": "ditto\n",
						"name": "opDispatch"
					},
					{
						"kind": "function",
						"line": 671,
						"deco": "xFKxS4vibe4data4json4JsonZb",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xS4vibe4data4json4Json",
								"storageClass": [
									"ref"
								],
								"name": "other"
							}
						],
						"name": "opEquals",
						"comment": "\t\tCompares two JSON values for equality.\n\n\t\tIf the two values have different types, they are considered unequal.\n\t\tThis differs with ECMA script, which performs a type conversion before\n\t\tcomparing the values.\n",
						"originalType": "const bool(ref const Json other)",
						"endline": 684
					},
					{
						"kind": "function",
						"line": 686,
						"deco": "xFxS4vibe4data4json4JsonZb",
						"endchar": 66,
						"char": 7,
						"parameters": [
							{
								"deco": "xS4vibe4data4json4Json",
								"name": "other"
							}
						],
						"name": "opEquals",
						"comment": "ditto\n",
						"originalType": "const bool(const Json other)",
						"endline": 686
					},
					{
						"kind": "function",
						"line": 688,
						"deco": "xFnZb",
						"endchar": 67,
						"char": 7,
						"parameters": [
							{
								"deco": "n",
								"name": "_param_0"
							}
						],
						"name": "opEquals",
						"comment": "ditto\n",
						"originalType": "const bool(typeof(null))",
						"endline": 688
					},
					{
						"kind": "function",
						"line": 690,
						"deco": "xFbZb",
						"endchar": 76,
						"char": 7,
						"parameters": [
							{
								"deco": "b",
								"name": "v"
							}
						],
						"name": "opEquals",
						"comment": "ditto\n",
						"endline": 690
					},
					{
						"kind": "function",
						"line": 692,
						"deco": "xFlZb",
						"endchar": 74,
						"char": 7,
						"parameters": [
							{
								"deco": "l",
								"name": "v"
							}
						],
						"name": "opEquals",
						"comment": "ditto\n",
						"endline": 692
					},
					{
						"kind": "function",
						"line": 694,
						"deco": "xFdZb",
						"endchar": 80,
						"char": 7,
						"parameters": [
							{
								"deco": "d",
								"name": "v"
							}
						],
						"name": "opEquals",
						"comment": "ditto\n",
						"endline": 694
					},
					{
						"kind": "function",
						"line": 696,
						"deco": "xFAyaZb",
						"endchar": 81,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "v"
							}
						],
						"name": "opEquals",
						"comment": "ditto\n",
						"endline": 696
					},
					{
						"kind": "function",
						"line": 708,
						"deco": "xFKxS4vibe4data4json4JsonZi",
						"endchar": 2,
						"char": 6,
						"parameters": [
							{
								"deco": "xS4vibe4data4json4Json",
								"storageClass": [
									"ref"
								],
								"name": "other"
							}
						],
						"name": "opCmp",
						"comment": "\t\tCompares two JSON values.\n\n\t\tIf the types of the two values differ, the value with the smaller type\n\t\tid is considered the smaller value. This differs from ECMA script, which\n\t\tperforms a type conversion before comparing the values.\n\n\t\tJSON values of type Object cannot be compared and will throw an\n\t\texception.\n",
						"originalType": "const int(ref const Json other)",
						"endline": 723
					},
					{
						"kind": "alias",
						"line": 725,
						"char": 2,
						"name": "opDollar"
					},
					{
						"kind": "template",
						"line": 730,
						"members": [
							{
								"kind": "function",
								"line": 730,
								"endchar": 2,
								"char": 24,
								"type": "@property Type()",
								"name": "typeId",
								"endline": 740
							}
						],
						"char": 24,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "\t\tReturns the type id corresponding to the given D type.\n",
						"name": "typeId"
					},
					{
						"kind": "function",
						"line": 750,
						"deco": "xFZAya",
						"endchar": 2,
						"char": 9,
						"name": "toString",
						"comment": "\t\tReturns the JSON object as a string.\n\n\t\tFor large JSON values use writeJsonString instead as this function will store the whole string\n\t\tin memory, whereas writeJsonString writes it out bit for bit.\n\n\t\tSee_Also: writeJsonString, toPrettyString\n",
						"endline": 755
					},
					{
						"kind": "function",
						"line": 776,
						"deco": "xFiZAya",
						"endchar": 2,
						"char": 9,
						"parameters": [
							{
								"deco": "i",
								"default": "0",
								"name": "level"
							}
						],
						"name": "toPrettyString",
						"comment": "\t\tReturns the JSON object as a \"pretty\" string.\n\n\t\t---\n\t\tauto json = Json([\"foo\": Json(\"bar\")]);\n\t\twriteln(json.toPrettyString());\n\n\t\t// output:\n\t\t// {\n\t\t//     \"foo\": \"bar\"\n\t\t// }\n\t\t---\n\n\t\tParams:\n\t\t\tlevel = Specifies the base amount of indentation for the output. Indentation  is always\n\t\t\t\tdone using tab characters.\n\n\t\tSee_Also: writePrettyJsonString, toString\n",
						"endline": 781
					}
				],
				"char": 1,
				"name": "Json",
				"comment": "\n\n\n\n\tRepresents a single JSON value.\n\n\tJson values can have one of the types defined in the Json.Type enum. They\n\tbehave mostly like values in ECMA script in the way that you can\n\ttransparently perform operations on them. However, strict typechecking is\n\tdone, so that operations between differently typed JSON values will throw\n\ta JSONException. Additionally, an explicit cast or using get!() or to!() is\n\trequired to convert a JSON value to the corresponding static D type.\n"
			},
			{
				"kind": "template",
				"line": 827,
				"constraint": "is(R == string)",
				"members": [
					{
						"kind": "function",
						"line": 827,
						"endchar": 1,
						"char": 6,
						"type": "Json(ref R range, int* line = null, string filename = null)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "range"
							},
							{
								"default": "null",
								"type": "int*",
								"name": "line"
							},
							{
								"default": "null",
								"type": "string",
								"name": "filename"
							}
						],
						"name": "parseJson",
						"endline": 916
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "\n\n\n\n\tParses the given range as a JSON string and returns the corresponding Json object.\n\n\tThe range is shrunk during parsing, leaving any remaining text that is not part of\n\tthe JSON contents.\n\n\tThrows a JSONException if any parsing error occured.\n",
				"name": "parseJson"
			},
			{
				"kind": "function",
				"line": 923,
				"deco": "FAyaAyaZS4vibe4data4json4Json",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "str"
					},
					{
						"deco": "Aya",
						"default": "null",
						"name": "filename"
					}
				],
				"name": "parseJsonString",
				"comment": "\tParses the given JSON string and returns the corresponding Json object.\n\n\tThrows a JSONException if any parsing error occurs.\n",
				"endline": 930
			},
			{
				"kind": "template",
				"line": 995,
				"members": [
					{
						"kind": "function",
						"line": 995,
						"endchar": 1,
						"char": 6,
						"type": "Json(T value)",
						"parameters": [
							{
								"type": "T",
								"name": "value"
							}
						],
						"name": "serializeToJson",
						"endline": 1002
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tSerializes the given value to JSON.\n\n\tThe following types of values are supported:\n\n\t$(DL\n\t\t$(DT Json)            $(DD Used as-is)\n\t\t$(DT null)            $(DD Converted to Json.Type.Null)\n\t\t$(DT bool)            $(DD Converted to Json.Type.Bool)\n\t\t$(DT float, double)   $(DD Converted to Json.Type.Double)\n\t\t$(DT short, ushort, int, uint, long, ulong) $(DD Converted to Json.Type.Int)\n\t\t$(DT string)          $(DD Converted to Json.Type.String)\n\t\t$(DT T[])             $(DD Converted to Json.Type.Array)\n\t\t$(DT T[string])       $(DD Converted to Json.Type.Object)\n\t\t$(DT struct)          $(DD Converted to Json.Type.Object)\n\t\t$(DT class)           $(DD Converted to Json.Type.Object or Json.Type.Null)\n\t)\n\n\tAll entries of an array or an associative array, as well as all R/W properties and\n\tall public fields of a struct/class are recursively serialized using the same rules.\n\n\tFields ending with an underscore will have the last underscore stripped in the\n\tserialized output. This makes it possible to use fields with D keywords as their name\n\tby simply appending an underscore.\n\n\tThe following methods can be used to customize the serialization of structs/classes:\n\n\t---\n\tJson toJson() const;\n\tstatic T fromJson(Json src);\n\n\tstring toString() const;\n\tstatic T fromString(string src);\n\t---\n\n\tThe methods will have to be defined in pairs. The first pair that is implemented by\n\tthe type will be used for serialization (i.e. toJson overrides toString).\n",
				"name": "serializeToJson"
			},
			{
				"kind": "template",
				"line": 1004,
				"constraint": "isOutputRange!(R, char) || isOutputRange!(R, ubyte)",
				"members": [
					{
						"kind": "function",
						"line": 1004,
						"endchar": 1,
						"char": 6,
						"type": "void(R destination, T value)",
						"parameters": [
							{
								"type": "R",
								"name": "destination"
							},
							{
								"type": "T",
								"name": "value"
							}
						],
						"name": "serializeToJson",
						"endline": 1008
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "serializeToJson"
			},
			{
				"kind": "template",
				"line": 1010,
				"members": [
					{
						"kind": "function",
						"line": 1010,
						"endchar": 1,
						"char": 8,
						"type": "string(T value)",
						"parameters": [
							{
								"type": "T",
								"name": "value"
							}
						],
						"name": "serializeToJsonString",
						"endline": 1015
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "serializeToJsonString"
			},
			{
				"kind": "template",
				"line": 1022,
				"constraint": "isOutputRange!(R, char) || isOutputRange!(R, ubyte)",
				"members": [
					{
						"kind": "function",
						"line": 1022,
						"endchar": 1,
						"char": 6,
						"type": "void(R destination, T value)",
						"parameters": [
							{
								"type": "R",
								"name": "destination"
							},
							{
								"type": "T",
								"name": "value"
							}
						],
						"name": "serializeToPrettyJson",
						"endline": 1026
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tSerializes the given value to a pretty printed JSON string.\n\n\tSee_also: $(D serializeToJson)\n",
				"name": "serializeToPrettyJson"
			},
			{
				"kind": "template",
				"line": 1028,
				"members": [
					{
						"kind": "function",
						"line": 1028,
						"endchar": 1,
						"char": 8,
						"type": "string(T value)",
						"parameters": [
							{
								"type": "T",
								"name": "value"
							}
						],
						"name": "serializeToPrettyJson",
						"endline": 1033
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "serializeToPrettyJson"
			},
			{
				"kind": "template",
				"line": 1106,
				"members": [
					{
						"kind": "function",
						"line": 1106,
						"endchar": 1,
						"char": 6,
						"type": "void(ref T dst, Json src)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "T",
								"name": "dst"
							},
							{
								"type": "Json",
								"name": "src"
							}
						],
						"name": "deserializeJson",
						"endline": 1109
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tDeserializes a JSON value into the destination variable.\n\n\tThe same types as for serializeToJson() are supported and handled inversely.\n",
				"name": "deserializeJson"
			},
			{
				"kind": "template",
				"line": 1111,
				"members": [
					{
						"kind": "function",
						"line": 1111,
						"endchar": 1,
						"char": 3,
						"type": "T(Json src)",
						"parameters": [
							{
								"type": "Json",
								"name": "src"
							}
						],
						"name": "deserializeJson",
						"endline": 1118
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "deserializeJson"
			},
			{
				"kind": "template",
				"line": 1120,
				"constraint": "isInputRange!R && !is(R == Json)",
				"members": [
					{
						"kind": "function",
						"line": 1120,
						"endchar": 1,
						"char": 3,
						"type": "T(R input)",
						"parameters": [
							{
								"type": "R",
								"name": "input"
							}
						],
						"name": "deserializeJson",
						"endline": 1124
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "ditto\n",
				"name": "deserializeJson"
			},
			{
				"kind": "struct",
				"line": 1344,
				"members": [
					{
						"kind": "template",
						"line": 1345,
						"members": [
							{
								"kind": "variable",
								"line": 1345,
								"init": "isNumeric!T || isBoolean!T || is(T == string) || is(T == typeof(null)) || isJsonSerializable!T",
								"storageClass": [
									"enum"
								],
								"char": 37,
								"name": "isJsonBasicType"
							}
						],
						"char": 2,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "isJsonBasicType"
					},
					{
						"kind": "template",
						"line": 1347,
						"members": [
							{
								"kind": "variable",
								"line": 1347,
								"init": "isJsonBasicType!T || is(T == Json)",
								"storageClass": [
									"enum"
								],
								"char": 42,
								"name": "isSupportedValueType"
							}
						],
						"char": 2,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "isSupportedValueType"
					},
					{
						"kind": "constructor",
						"line": 1354,
						"deco": "FNcS4vibe4data4json4JsonZS4vibe4data4json14JsonSerializer",
						"endchar": 38,
						"char": 2,
						"parameters": [
							{
								"deco": "S4vibe4data4json4Json",
								"name": "data"
							}
						],
						"name": "this",
						"originalType": "ref (Json data)",
						"endline": 1354
					},
					{
						"kind": "function",
						"line": 1361,
						"deco": "FZS4vibe4data4json4Json",
						"endchar": 49,
						"char": 7,
						"name": "getSerializedResult",
						"endline": 1361
					},
					{
						"kind": "template",
						"line": 1362,
						"members": [
							{
								"kind": "function",
								"line": 1362,
								"endchar": 73,
								"char": 7,
								"type": "void()",
								"name": "beginWriteDictionary",
								"endline": 1362
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "beginWriteDictionary"
					},
					{
						"kind": "template",
						"line": 1363,
						"members": [
							{
								"kind": "function",
								"line": 1363,
								"endchar": 95,
								"char": 7,
								"type": "void()",
								"name": "endWriteDictionary",
								"endline": 1363
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "endWriteDictionary"
					},
					{
						"kind": "template",
						"line": 1364,
						"members": [
							{
								"kind": "function",
								"line": 1364,
								"endchar": 50,
								"char": 7,
								"type": "void(string name)",
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"name": "beginWriteDictionaryEntry",
								"endline": 1364
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "beginWriteDictionaryEntry"
					},
					{
						"kind": "template",
						"line": 1365,
						"members": [
							{
								"kind": "function",
								"line": 1365,
								"endchar": 90,
								"char": 7,
								"type": "void(string name)",
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"name": "endWriteDictionaryEntry",
								"endline": 1365
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "endWriteDictionaryEntry"
					},
					{
						"kind": "template",
						"line": 1367,
						"members": [
							{
								"kind": "function",
								"line": 1367,
								"endchar": 73,
								"char": 7,
								"type": "void(size_t)",
								"parameters": [
									{
										"type": "size_t"
									}
								],
								"name": "beginWriteArray",
								"endline": 1367
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "beginWriteArray"
					},
					{
						"kind": "template",
						"line": 1368,
						"members": [
							{
								"kind": "function",
								"line": 1368,
								"endchar": 90,
								"char": 7,
								"type": "void()",
								"name": "endWriteArray",
								"endline": 1368
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "endWriteArray"
					},
					{
						"kind": "template",
						"line": 1369,
						"members": [
							{
								"kind": "function",
								"line": 1369,
								"endchar": 40,
								"char": 7,
								"type": "void(size_t)",
								"parameters": [
									{
										"type": "size_t"
									}
								],
								"name": "beginWriteArrayEntry",
								"endline": 1369
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "beginWriteArrayEntry"
					},
					{
						"kind": "template",
						"line": 1370,
						"members": [
							{
								"kind": "function",
								"line": 1370,
								"endchar": 92,
								"char": 7,
								"type": "void(size_t)",
								"parameters": [
									{
										"type": "size_t"
									}
								],
								"name": "endWriteArrayEntry",
								"endline": 1370
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "endWriteArrayEntry"
					},
					{
						"kind": "template",
						"line": 1372,
						"members": [
							{
								"kind": "function",
								"line": 1372,
								"endchar": 2,
								"char": 7,
								"type": "void(T value)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "writeValue",
								"endline": 1377
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "writeValue"
					},
					{
						"kind": "template",
						"line": 1379,
						"constraint": "is(T == Json)",
						"members": [
							{
								"kind": "function",
								"line": 1379,
								"endchar": 2,
								"char": 7,
								"type": "void(in Json value)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Json",
										"name": "value"
									}
								],
								"name": "writeValue",
								"endline": 1382
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "writeValue"
					},
					{
						"kind": "template",
						"line": 1387,
						"members": [
							{
								"kind": "function",
								"line": 1387,
								"endchar": 2,
								"char": 7,
								"type": "void(scope void delegate(string) field_handler)",
								"parameters": [
									{
										"storageClass": [
											"scope"
										],
										"type": "void delegate(string)",
										"name": "field_handler"
									}
								],
								"name": "readDictionary",
								"endline": 1396
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "readDictionary"
					},
					{
						"kind": "template",
						"line": 1398,
						"members": [
							{
								"kind": "function",
								"line": 1398,
								"endchar": 2,
								"char": 7,
								"type": "void(scope void delegate(size_t) size_callback, scope void delegate() entry_callback)",
								"parameters": [
									{
										"storageClass": [
											"scope"
										],
										"type": "void delegate(size_t)",
										"name": "size_callback"
									},
									{
										"storageClass": [
											"scope"
										],
										"type": "void delegate()",
										"name": "entry_callback"
									}
								],
								"name": "readArray",
								"endline": 1408
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "readArray"
					},
					{
						"kind": "template",
						"line": 1410,
						"members": [
							{
								"kind": "function",
								"line": 1410,
								"endchar": 2,
								"char": 4,
								"type": "T()",
								"name": "readValue",
								"endline": 1421
							}
						],
						"char": 4,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "readValue"
					},
					{
						"kind": "function",
						"line": 1423,
						"deco": "FZb",
						"endchar": 65,
						"char": 7,
						"name": "tryReadNull",
						"endline": 1423
					},
					{
						"kind": "function",
						"line": 1344,
						"deco": "FNaNbNcNiNjNfS4vibe4data4json14JsonSerializerZS4vibe4data4json14JsonSerializer",
						"char": 1,
						"parameters": [
							{
								"deco": "S4vibe4data4json14JsonSerializer",
								"name": "p"
							}
						],
						"name": "opAssign"
					}
				],
				"char": 1,
				"name": "JsonSerializer",
				"comment": "\tSerializer for a plain Json representation.\n\n\tSee_Also: vibe.data.serialization.serialize, vibe.data.serialization.deserialize, serializeToJson, deserializeJson\n"
			},
			{
				"kind": "template",
				"line": 1432,
				"constraint": "isInputRange!R || isOutputRange!(R, char)",
				"members": [
					{
						"kind": "struct",
						"line": 1432,
						"members": [
							{
								"kind": "variable",
								"line": 1436,
								"char": 5,
								"type": "R",
								"name": "m_range"
							},
							{
								"kind": "variable",
								"line": 1437,
								"init": "0",
								"char": 10,
								"type": "size_t",
								"name": "m_level"
							},
							{
								"kind": "template",
								"line": 1440,
								"members": [
									{
										"kind": "variable",
										"line": 1440,
										"init": "isNumeric!T || isBoolean!T || is(T == string) || is(T == typeof(null)) || isJsonSerializable!T",
										"storageClass": [
											"enum"
										],
										"char": 37,
										"name": "isJsonBasicType"
									}
								],
								"char": 2,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"name": "isJsonBasicType"
							},
							{
								"kind": "template",
								"line": 1442,
								"members": [
									{
										"kind": "variable",
										"line": 1442,
										"init": "isJsonBasicType!T || is(T == Json)",
										"storageClass": [
											"enum"
										],
										"char": 42,
										"name": "isSupportedValueType"
									}
								],
								"char": 2,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"name": "isSupportedValueType"
							},
							{
								"kind": "constructor",
								"line": 1444,
								"endchar": 2,
								"char": 2,
								"type": "(R range)",
								"parameters": [
									{
										"type": "R",
										"name": "range"
									}
								],
								"name": "this",
								"endline": 1447
							}
						],
						"char": 1,
						"name": "JsonStringSerializer"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "value",
						"defaultValue": "false",
						"deco": "b",
						"name": "pretty"
					}
				],
				"comment": "\tSerializer for a range based plain JSON string representation.\n\n\tSee_Also: vibe.data.serialization.serialize, vibe.data.serialization.deserialize, serializeToJson, deserializeJson\n",
				"name": "JsonStringSerializer"
			},
			{
				"kind": "template",
				"line": 1644,
				"members": [
					{
						"kind": "function",
						"line": 1644,
						"endchar": 1,
						"char": 6,
						"type": "void(ref R dst, in Json json, size_t level = 0)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "dst"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "Json",
								"name": "json"
							},
							{
								"default": "0",
								"type": "size_t",
								"name": "level"
							}
						],
						"name": "writeJsonString",
						"endline": 1710
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "value",
						"defaultValue": "false",
						"deco": "b",
						"name": "pretty"
					}
				],
				"comment": "\tWrites the given JSON object as a JSON string into the destination range.\n\n\tThis function will convert the given JSON value to a string without adding\n\tany white space between tokens (no newlines, no indentation and no padding).\n\tThe output size is thus minimized, at the cost of bad human readability.\n\n\tParams:\n\t\tdst   = References the string output range to which the result is written.\n\t\tjson  = Specifies the JSON value that is to be stringified.\n\n\tSee_Also: Json.toString, writePrettyJsonString\n",
				"name": "writeJsonString"
			},
			{
				"kind": "template",
				"line": 1784,
				"members": [
					{
						"kind": "function",
						"line": 1784,
						"endchar": 1,
						"char": 6,
						"type": "void(ref R dst, in Json json, int level = 0)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "dst"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "Json",
								"name": "json"
							},
							{
								"deco": "i",
								"default": "0",
								"name": "level"
							}
						],
						"name": "writePrettyJsonString",
						"endline": 1788
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "\tWrites the given JSON object as a prettified JSON string into the destination range.\n\n\tThe output will contain newlines and indents to make the output human readable.\n\n\tParams:\n\t\tdst   = References the string output range to which the result is written.\n\t\tjson  = Specifies the JSON value that is to be stringified.\n\t\tlevel = Specifies the base amount of indentation for the output. Indentation  is always\n\t\t        done using tab characters.\n\n\tSee_Also: Json.toPrettyString, writeJsonString\n",
				"name": "writePrettyJsonString"
			},
			{
				"kind": "function",
				"line": 1794,
				"deco": "FAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "json"
					}
				],
				"name": "convertJsonToASCII",
				"comment": "\tHelper function that escapes all Unicode characters in a JSON string.\n",
				"endline": 1799
			}
		],
		"name": "vibe.data.json",
		"comment": "\tJSON serialization and value handling.\n\n\tThis module provides the Json struct for reading, writing and manipulating JSON values in a seamless,\n\tJavaScript like way. De(serialization) of arbitrary D types is also supported.\n\n\tExamples:\n\n\t---\n\tvoid manipulateJson(Json j)\n\t{\n\t\t// object members can be accessed using member syntax, just like in JavaScript\n\t\tj = Json.emptyObject;\n\t\tj.name = \"Example\";\n\t\tj.id = 1;\n\n\t\t// retrieving the values is done using get()\n\t\tassert(j[\"name\"].get!string == \"Example\");\n\t\tassert(j[\"id\"].get!int == 1);\n\n\t\t// semantic conversions can be done using to()\n\t\tassert(j.id.to!string == \"1\");\n\n\t\t// prints:\n\t\t// name: \"Example\"\n\t\t// id: 1\n\t\tforeach( string key, value; j ){\n\t\t\twritefln(\"%s: %s\", key, value);\n\t\t}\n\n\t\t// print out as JSON: {\"name\": \"Example\", \"id\": 1}\n\t\twritefln(\"JSON: %s\", j.toString());\n\t}\n\t---\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\data\\serialization.d",
		"members": [
			{
				"kind": "template",
				"line": 111,
				"members": [
					{
						"kind": "function",
						"line": 111,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(T value, ARGS args)",
						"parameters": [
							{
								"type": "T",
								"name": "value"
							},
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"name": "serialize",
						"endline": 116
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Serializer"
					},
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"comment": "\tSerializes a value with the given serializer.\n\n\tThe serializer must have a value result for the first form\n\tto work. Otherwise, use the range based form.\n\n\tSee_Also: vibe.data.json.JsonSerializer, vibe.data.json.JsonStringSerializer, vibe.data.bson.BsonSerializer\nExample:\n\n---\nimport vibe.data.json;\n\nstruct Test {\n\tint value;\n\tstring text;\n}\n\nTest test;\ntest.value = 12;\ntest.text = \"Hello\";\n\nJson serialized = serialize!JsonSerializer(test);\nassert(serialized.value.get!int == 12);\nassert(serialized.text.get!string == \"Hello\");\n\n---\n",
				"name": "serialize"
			},
			{
				"kind": "template",
				"line": 118,
				"members": [
					{
						"kind": "function",
						"line": 118,
						"endchar": 1,
						"char": 6,
						"type": "void(ref Serializer serializer, T value)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "Serializer",
								"name": "serializer"
							},
							{
								"type": "T",
								"name": "value"
							}
						],
						"name": "serialize",
						"endline": 121
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Serializer"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "serialize"
			},
			{
				"kind": "template",
				"line": 160,
				"members": [
					{
						"kind": "function",
						"line": 160,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(T value, ARGS args)",
						"parameters": [
							{
								"type": "T",
								"name": "value"
							},
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"name": "serializeWithPolicy",
						"endline": 165
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Serializer"
					},
					{
						"kind": "alias",
						"name": "Policy"
					},
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"comment": "\tSerializes a value with the given serializer, representing values according to $(D Policy) when possible.\n\n\tThe serializer must have a value result for the first form\n\tto work. Otherwise, use the range based form.\n\n\tSee_Also: vibe.data.json.JsonSerializer, vibe.data.json.JsonStringSerializer, vibe.data.bson.BsonSerializer\nExample:\n\n---\nimport vibe.data.json;\n\nstatic struct SizeI {\n\tint x;\n\tint y;\n}\nSizeI sizeI = SizeI(1,2);\nJson serializedI = serializeWithPolicy!(JsonSerializer, SizePol)(sizeI);\nassert(serializedI.get!string == \"1x2\");\n\nstatic struct SizeF {\n\tfloat x;\n\tfloat y;\n}\nSizeF sizeF = SizeF(0.1f,0.2f);\nJson serializedF = serializeWithPolicy!(JsonSerializer, SizePol)(sizeF);\nassert(serializedF.get!string == \"0.1x0.2\");\n\n---\n",
				"name": "serializeWithPolicy"
			},
			{
				"kind": "template",
				"line": 167,
				"members": [
					{
						"kind": "function",
						"line": 167,
						"endchar": 1,
						"char": 6,
						"type": "void(ref Serializer serializer, T value)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "Serializer",
								"name": "serializer"
							},
							{
								"type": "T",
								"name": "value"
							}
						],
						"name": "serializeWithPolicy",
						"endline": 170
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Serializer"
					},
					{
						"kind": "alias",
						"name": "Policy"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "serializeWithPolicy"
			},
			{
				"kind": "template",
				"line": 221,
				"members": [
					{
						"kind": "function",
						"line": 221,
						"endchar": 1,
						"char": 3,
						"type": "T(ARGS args)",
						"parameters": [
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"name": "deserialize",
						"endline": 225
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "Serializer"
					},
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"comment": "\tDeserializes and returns a serialized value.\n\n\tserialized_data can be either an input range or a value containing\n\tthe serialized data, depending on the type of serializer used.\n\n\tSee_Also: vibe.data.json.JsonSerializer, vibe.data.json.JsonStringSerializer, vibe.data.bson.BsonSerializer\nExample:\n\n---\nimport vibe.data.json;\n\nstruct Test {\n\tint value;\n\tstring text;\n}\n\nJson serialized = Json.emptyObject;\nserialized.value = 12;\nserialized.text = \"Hello\";\n\nTest test = deserialize!(JsonSerializer, Test)(serialized);\nassert(test.value == 12);\nassert(test.text == \"Hello\");\n\n---\n",
				"name": "deserialize"
			},
			{
				"kind": "template",
				"line": 253,
				"members": [
					{
						"kind": "function",
						"line": 253,
						"endchar": 1,
						"char": 3,
						"type": "T(ARGS args)",
						"parameters": [
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"name": "deserializeWithPolicy",
						"endline": 257
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "Serializer"
					},
					{
						"kind": "alias",
						"name": "Policy"
					},
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"comment": "\tDeserializes and returns a serialized value, interpreting values according to $(D Policy) when possible.\n\n\tserialized_data can be either an input range or a value containing\n\tthe serialized data, depending on the type of serializer used.\n\n\tSee_Also: vibe.data.json.JsonSerializer, vibe.data.json.JsonStringSerializer, vibe.data.bson.BsonSerializer\nExample:\n\n---\nimport vibe.data.json;\n\nstatic struct SizeI {\n\tint x;\n\tint y;\n}\n\nJson serializedI = \"1x2\";\nSizeI sizeI = deserializeWithPolicy!(JsonSerializer, SizePol, SizeI)(serializedI);\nassert(sizeI.x == 1);\nassert(sizeI.y == 2);\n\nstatic struct SizeF {\n\tfloat x;\n\tfloat y;\n}\nJson serializedF = \"0.1x0.2\";\nSizeF sizeF = deserializeWithPolicy!(JsonSerializer, SizePol, SizeF)(serializedF);\nassert(sizeF.x == 0.1f);\nassert(sizeF.y == 0.2f);\n\n---\n",
				"name": "deserializeWithPolicy"
			},
			{
				"kind": "function",
				"line": 554,
				"deco": "FAyaZS4vibe4data13serialization13NameAttribute",
				"endchar": 1,
				"char": 15,
				"parameters": [
					{
						"deco": "Aya",
						"name": "name"
					}
				],
				"name": "name",
				"comment": "\tAttribute for overriding the field name during (de-)serialization.\nExample:\n\n---\nstruct Test {\n\t@name(\"screen-size\") int screenSize;\n}\n\n---\n",
				"endline": 557
			},
			{
				"kind": "function",
				"line": 569,
				"deco": "FNdZS4vibe4data13serialization17OptionalAttribute",
				"endchar": 1,
				"char": 29,
				"name": "optional",
				"comment": "\tAttribute marking a field as optional during deserialization.\nExample:\n\n---\nstruct Test {\n\t// does not need to be present during deserialization\n\t@optional int screenSize = 100;\n}\n\n---\n",
				"endline": 572
			},
			{
				"kind": "function",
				"line": 585,
				"deco": "FNdZS4vibe4data13serialization15IgnoreAttribute",
				"endchar": 1,
				"char": 27,
				"name": "ignore",
				"comment": "\tAttribute for marking non-serialized fields.\nExample:\n\n---\nstruct Test {\n\t// is neither serialized not deserialized\n\t@ignore int screenSize;\n}\n\n---\n",
				"endline": 588
			},
			{
				"kind": "function",
				"line": 601,
				"deco": "FNdZS4vibe4data13serialization15ByNameAttribute",
				"endchar": 1,
				"char": 27,
				"name": "byName",
				"comment": "\tAttribute for forcing serialization of enum fields by name instead of by value.\nExample:\n\n---\nenum Color {\n\tred,\n\tgreen,\n\tblue\n}\n\nstruct Test {\n\t// serialized as an int (e.g. 1 for Color.green)\n\tColor color;\n\t// serialized as a string (e.g. \"green\" for Color.green)\n\t@byName Color namedColor;\n\t// serialized as array of ints\n\tColor[] colorArray;\n\t// serialized as array of strings\n\t@byName Color[] namedColorArray;\n}\n\n---\n",
				"endline": 604
			},
			{
				"kind": "function",
				"line": 634,
				"deco": "FNdZS4vibe4data13serialization16AsArrayAttribute",
				"endchar": 1,
				"char": 28,
				"name": "asArray",
				"comment": "\tAttribute for representing a struct/class as an array instead of an object.\n\n\tUsually structs and class objects are serialized as dictionaries mapping\n\tfrom field name to value. Using this attribute, they will be serialized\n\tas a flat array instead. Note that changing the layout will make any\n\talready serialized data mismatch when this attribute is used.\nExample:\n\n---\nstruct Fields {\n\tint f1;\n\tstring f2;\n\tdouble f3;\n}\n\nstruct Test {\n\t// serialized as name:value pairs [\"f1\": int, \"f2\": string, \"f3\": double]\n\tFields object;\n\t// serialized as a sequential list of values [int, string, double]\n\t@asArray Fields array;\n}\n\nimport vibe.data.json;\nstatic assert(is(typeof(serializeToJson(Test()))));\n\n---\n",
				"endline": 637
			},
			{
				"kind": "enum",
				"line": 659,
				"members": [
					{
						"kind": "enum member",
						"line": 661,
						"value": "0",
						"char": 2,
						"name": "missing"
					},
					{
						"kind": "enum member",
						"line": 662,
						"value": "1",
						"char": 2,
						"name": "exists"
					},
					{
						"kind": "enum member",
						"line": 663,
						"value": "2",
						"char": 2,
						"name": "defer"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "FieldExistence",
				"comment": "\n"
			},
			{
				"kind": "struct",
				"line": 667,
				"members": [
					{
						"kind": "variable",
						"line": 667,
						"deco": "Aya",
						"char": 31,
						"name": "name",
						"offset": 0
					}
				],
				"char": 1,
				"name": "NameAttribute",
				"comment": "User defined attribute (not intended for direct use)\n"
			},
			{
				"kind": "struct",
				"line": 669,
				"members": [],
				"char": 1,
				"name": "OptionalAttribute",
				"comment": "ditto\n"
			},
			{
				"kind": "struct",
				"line": 671,
				"members": [],
				"char": 1,
				"name": "IgnoreAttribute",
				"comment": "ditto\n"
			},
			{
				"kind": "struct",
				"line": 673,
				"members": [],
				"char": 1,
				"name": "ByNameAttribute",
				"comment": "ditto\n"
			},
			{
				"kind": "struct",
				"line": 675,
				"members": [],
				"char": 1,
				"name": "AsArrayAttribute",
				"comment": "ditto\n"
			},
			{
				"kind": "template",
				"line": 688,
				"members": [
					{
						"kind": "variable",
						"line": 690,
						"init": "is(typeof(T.init.toRepresentation())) && is(typeof(T.fromRepresentation(T.init.toRepresentation())) == T)",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 12,
						"name": "isCustomSerializable"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tChecks if a given type has a custom serialization representation.\n\n\tA class or struct type is custom serializable if it defines a pair of\n\t$(D toRepresentation)/$(D fromRepresentation) methods. Any class or\n\tstruct type that has this trait will be serialized by using the return\n\tvalue of it's $(D toRepresentation) method instead of the original value.\n\n\tThis trait has precedence over $(D isISOExtStringSerializable) and\n\t$(D isStringSerializable).\nExample:\n\n---\n// represented as a single uint when serialized\nstatic struct S {\n\tushort x, y;\n\n\tuint toRepresentation() const { return x + (y << 16); }\n\tstatic S fromRepresentation(uint i) { return S(i & 0xFFFF, i >> 16); }\n}\n\nstatic assert(isCustomSerializable!S);\n\n---\n",
				"name": "isCustomSerializable"
			},
			{
				"kind": "template",
				"line": 719,
				"members": [
					{
						"kind": "variable",
						"line": 721,
						"init": "is(typeof(T.init.toISOExtString()) == string) && is(typeof(T.fromISOExtString(\"\")) == T)",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 12,
						"name": "isISOExtStringSerializable"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tChecks if a given type has an ISO extended string serialization representation.\n\n\tA class or struct type is ISO extended string serializable if it defines a\n\tpair of $(D toISOExtString)/$(D fromISOExtString) methods. Any class or\n\tstruct type that has this trait will be serialized by using the return\n\tvalue of it's $(D toISOExtString) method instead of the original value.\n\n\tThis is mainly useful for supporting serialization of the the date/time\n\ttypes in $(D std.datetime).\n\n\tThis trait has precedence over $(D isStringSerializable).\nExample:\n\n---\nimport std.datetime;\n\nstatic assert(isISOExtStringSerializable!DateTime);\nstatic assert(isISOExtStringSerializable!SysTime);\n\n// represented as an ISO extended string when serialized\nstatic struct S {\n\t// dummy example implementations\n\tstring toISOExtString() const { return \"\"; }\n\tstatic S fromISOExtString(string s) { return S.init; }\n}\n\nstatic assert(isISOExtStringSerializable!S);\n\n---\n",
				"name": "isISOExtStringSerializable"
			},
			{
				"kind": "template",
				"line": 749,
				"members": [
					{
						"kind": "variable",
						"line": 751,
						"init": "is(typeof(T.init.toString()) == string) && is(typeof(T.fromString(\"\")) == T)",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 12,
						"name": "isStringSerializable"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tChecks if a given type has a string serialization representation.\n\n\tA class or struct type is string serializable if it defines a pair of\n\t$(D toString)/$(D fromString) methods. Any class or struct type that\n\thas this trait will be serialized by using the return value of it's\n\t$(D toString) method instead of the original value.\nExample:\n\n---\nimport std.conv;\n\n// represented as the boxed value when serialized\nstatic struct Box(T) {\n\tT value;\n}\n\ntemplate BoxPol(S)\n{\n\tauto toRepresentation(S s) {\n\t\treturn s.value;\n\t}\n\n\tS fromRepresentation(typeof(S.init.value) v) {\n\t\treturn S(v);\n\t}\n}\nstatic assert(isPolicySerializable!(BoxPol, Box!int));\n\n---\n",
				"name": "isStringSerializable"
			},
			{
				"kind": "template",
				"line": 793,
				"members": [
					{
						"kind": "variable",
						"line": 795,
						"init": "is(typeof(Policy!T.toRepresentation(T.init))) && is(typeof(Policy!T.fromRepresentation(Policy!T.toRepresentation(T.init))) == T)",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 12,
						"name": "isPolicySerializable"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "Policy"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tChecks if a given policy supports custom serialization for a given type.\n\n\tA class or struct type is custom serializable according to a policy if\n\tthe policy defines a pair of $(D toRepresentation)/$(D fromRepresentation)\n\tfunctions. Any class or struct type that has this trait for the policy supplied to\n\t$D(serializeWithPolicy) will be serialized by using the return value of the\n\tpolicy $(D toRepresentation) function instead of the original value.\n\n\tThis trait has precedence over $(D isCustomSerializable),\n\t$(D isISOExtStringSerializable) and $(D isStringSerializable).\n\n\tSee_Also: vibe.data.serialization.serializeWithPolicy\nExample:\n\n---\nimport std.conv;\n\n// represented as a string when serialized\nstatic struct S {\n\tint value;\n\t\n\t// dummy example implementations\n\tstring toString() const { return value.to!string(); }\n\tstatic S fromString(string s) { return S(s.to!int()); }\n}\n\nstatic assert(isStringSerializable!S);\n\n---\n",
				"name": "isPolicySerializable"
			},
			{
				"kind": "template",
				"line": 824,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "Primary"
					},
					{
						"kind": "tuple",
						"name": "Fallbacks"
					}
				],
				"comment": "\tChains serialization policy.\n\n\tConstructs a serialization policy that given a type $(D T) will apply the\n\tfirst compatible policy $(D toRepresentation) and $(D fromRepresentation)\n\tfunctions. Policies are evaluated left-to-right according to\n\t$(D isPolicySerializable).\n\n\tSee_Also: vibe.data.serialization.serializeWithPolicy\nExample:\n\n---\nimport std.conv;\n\n// To be represented as the boxed value when serialized\nstatic struct Box(T) {\n\tT value;\n}\n// Also to berepresented as the boxed value when serialized, but has\n// a different way to access the value.\nstatic struct Box2(T) {\n\tprivate T v;\n\tref T get() {\n\t\treturn v;\n\t}\n}\ntemplate BoxPol(S)\n{\n\tauto toRepresentation(S s) {\n\t\treturn s.value;\n\t}\n\t\n\tS fromRepresentation(typeof(toRepresentation(S.init)) v) {\n\t\treturn S(v);\n\t}\n}\ntemplate Box2Pol(S)\n{\n\tauto toRepresentation(S s) {\n\t\treturn s.get();\n\t}\n\t\n\tS fromRepresentation(typeof(toRepresentation(S.init)) v) {\n\t\tS s;\n\t\ts.get() = v;\n\t\treturn s;\n\t}\n}\nalias ChainPol = ChainedPolicy!(BoxPol, Box2Pol);\nstatic assert(!isPolicySerializable!(BoxPol, Box2!int));\nstatic assert(!isPolicySerializable!(Box2Pol, Box!int));\nstatic assert(isPolicySerializable!(ChainPol, Box!int));\nstatic assert(isPolicySerializable!(ChainPol, Box2!int));\n\n---\n",
				"name": "ChainedPolicy"
			}
		],
		"name": "vibe.data.serialization",
		"comment": "\tGeneric serialization framework.\n\n\tThis module provides general means for implementing (de-)serialization with\n\ta standardized behavior.\n\n\tSupported_types:\n\t\tThe following rules are applied in order when serializing or\n\t\tdeserializing a certain type:\n\n\t\t$(OL\n\t\t\t$(LI An $(D enum) type is serialized as its raw value, except if\n\t\t\t\t$(D @byName) is used, in which case the name of the enum value\n\t\t\t\tis serialized.)\n\t\t\t$(LI Any type that is specifically supported by the serializer\n\t\t\t\tis directly serialized. For example, the BSON serializer\n\t\t\t\tsupports $(D BsonObjectID) directly.)\n\t\t\t$(LI Arrays and tuples ($(D std.typecons.Tuple)) are serialized\n\t\t\t\tusing the array serialization functions where each element is\n\t\t\t\tserialized again according to these rules.)\n\t\t\t$(LI Associative arrays are serialized similar to arrays. The key\n\t\t\t\ttype of the AA must satisfy the $(D isStringSerializable) trait\n\t\t\t\tand will always be serialized as a string.)\n\t\t\t$(LI Any $(D Nullable!T) will be serialized as either $(D null), or\n\t\t\t\tas the contained value (subject to these rules again).)\n\t\t\t$(LI Types satisfying the $(D isPolicySerializable) trait for the\n\t\t\t\tsupplied $(D Policy) will be serialized as the value returned\n\t\t\t\tby the policy $(D toRepresentation) function (again subject to\n\t\t\t\tthese rules).)\n\t\t\t$(LI Types satisfying the $(D isCustomSerializable) trait will be\n\t\t\t\tserialized as the value returned by their $(D toRepresentation)\n\t\t\t\tmethod (again subject to these rules).)\n\t\t\t$(LI Types satisfying the $(D isISOExtSerializable) trait will be\n\t\t\t\tserialized as a string, as returned by their $(D toISOExtString)\n\t\t\t\tmethod. This causes types such as $(D SysTime) to be serialized\n\t\t\t\tas strings.)\n\t\t\t$(LI Types satisfying the $(D isStringSerializable) trait will be\n\t\t\t\tserialized as a string, as returned by their $(D toString)\n\t\t\t\tmethod.)\n\t\t\t$(LI Struct and class types by default will be serialized as\n\t\t\t\tassociative arrays, where the key is the name of the\n\t\t\t\tcorresponding field (can be overridden using the $(D @name)\n\t\t\t\tattribute). If the struct/class is annotated with $(D @asArray),\n\t\t\t\tit will instead be serialized as a flat array of values in the\n\t\t\t\torder of declaration. Null class references will be serialized\n\t\t\t\tas $(D null).)\n\t\t\t$(LI Pointer types will be serialized as either $(D null), or as\n\t\t\t\tthe value they point to.)\n\t\t\t$(LI Built-in integers and floating point values, as well as\n\t\t\t\tboolean values will be converted to strings, if the serializer\n\t\t\t\tdoesn't support them directly.)\n\t\t)\n\n\t\tNote that no aliasing detection is performed, so that pointers, class\n\t\treferences and arrays referencing the same memory will be serialized\n\t\tas multiple copies. When in turn deserializing the data, they will also\n\t\tend up as separate copies in memory.\n\n\tSerializer_implementation:\n\t\tSerializers are implemented in terms of a struct with template methods that\n\t\tget called by the serialization framework:\n\n\t\t---\n\t\tstruct ExampleSerializer {\n\t\t\tenum isSupportedValueType(T) = is(T == string) || is(T == typeof(null));\n\n\t\t\t// serialization\n\t\t\tauto getSerializedResult();\n\t\t\tvoid beginWriteDictionary(T)();\n\t\t\tvoid endWriteDictionary(T)();\n\t\t\tvoid beginWriteDictionaryEntry(T)(string name);\n\t\t\tvoid endWriteDictionaryEntry(T)(string name);\n\t\t\tvoid beginWriteArray(T)(size_t length);\n\t\t\tvoid endWriteArray(T)();\n\t\t\tvoid beginWriteArrayEntry(T)(size_t index);\n\t\t\tvoid endWriteArrayEntry(T)(size_t index);\n\t\t\tvoid writeValue(T)(T value);\n\n\t\t\t// deserialization\n\t\t\tvoid readDictionary(T)(scope void delegate(string) entry_callback);\n\t\t\tvoid readArray(T)(scope void delegate(size_t) size_callback, scope void delegate() entry_callback);\n\t\t\tT readValue(T)();\n\t\t\tbool tryReadNull();\n\t\t}\n\t\t---\n\n\tCopyright: © 2013-2014 rejectedsoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\db\\mongo\\client.d",
		"members": [
			{
				"kind": "import",
				"line": 11,
				"char": 15,
				"name": "vibe.db.mongo.collection"
			},
			{
				"kind": "import",
				"line": 12,
				"char": 15,
				"name": "vibe.db.mongo.database"
			},
			{
				"kind": "class",
				"line": 31,
				"members": [
					{
						"kind": "function",
						"line": 84,
						"deco": "FAyaZS4vibe2db5mongo10collection15MongoCollection",
						"endchar": 2,
						"char": 18,
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"name": "getCollection",
						"comment": "\t\tAccesses a collection using an absolute path.\n\n\t\tThe full database.collection path must be specified. To access\n\t\tcollections using a path relative to their database, use getDatabase in\n\t\tconjunction with MongoDatabase.opIndex.\n\n\t\tReturns:\n\t\t\tMongoCollection for the given combined database and collectiion name(path)\n\n\t\tExamples:\n\t\t\t---\n\t\t\tauto col = client.getCollection(\"test.collection\");\n\t\t\t---\n",
						"endline": 87
					},
					{
						"kind": "function",
						"line": 111,
						"deco": "FAyaZS4vibe2db5mongo8database13MongoDatabase",
						"endchar": 2,
						"char": 16,
						"parameters": [
							{
								"deco": "Aya",
								"name": "dbName"
							}
						],
						"name": "getDatabase",
						"comment": "\t\tReturns an object representing the specified database.\n\n\t\tThe returned object allows to access the database entity (which contains\n\t\ta set of collections). There are two main use cases:\n\n\t\t1. Accessing collections using a relative path\n\n\t\t2. Performing service commands on the database itself\n\n\t\tNote that there is no performance gain in accessing collections via a\n\t\trelative path compared to getCollection and an absolute path.\n\n\t\tReturns:\n\t\t\tMongoDatabase instance representing requested database\n\n\t\tExamples:\n\t\t\t---\n\t\t\tauto db = client.getDatabase(\"test\");\n\t\t\tauto coll = db[\"collection\"];\n\t\t\t---\n",
						"endline": 114
					},
					{
						"kind": "template",
						"line": 130,
						"members": [
							{
								"kind": "function",
								"line": 130,
								"storageClass": [
									"auto"
								],
								"endchar": 2,
								"char": 7,
								"type": "()",
								"name": "getDatabases",
								"endline": 134
							}
						],
						"char": 7,
						"parameters": [],
						"comment": "\t \tReturn string array representing all current database names.\n\n\t \tReturns:\n\t \t\tAn input range of $(D MongoDatabase) objects.\n\n\t \tExamples:\n\t \t\t---\n\t \t\tauto names = client.getDatabaseNames();\n\t \t\twriteln(\"Current databases are: \", names);\n\t \t\t---\n",
						"name": "getDatabases"
					}
				],
				"char": 7,
				"name": "MongoClient",
				"comment": "\tRepresents a connection to a MongoDB server.\n\n\tNote that this class uses a ConnectionPool internally to create and reuse\n\tnetwork conections to the server as necessary. It should be reused for all\n\tfibers in a thread for optimum performance in high concurrency scenarios.\n"
			}
		],
		"name": "vibe.db.mongo.client",
		"comment": "\tMongoClient class doing connection management. Usually this is a main entry point\n\tfor client code.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\db\\mongo\\collection.d",
		"members": [
			{
				"kind": "import",
				"line": 10,
				"char": 15,
				"name": "vibe.db.mongo.cursor"
			},
			{
				"kind": "import",
				"line": 11,
				"char": 15,
				"name": "vibe.db.mongo.connection"
			},
			{
				"kind": "struct",
				"line": 54,
				"members": [
					{
						"kind": "constructor",
						"line": 62,
						"deco": "FNcC4vibe2db5mongo6client11MongoClientAyaZS4vibe2db5mongo10collection15MongoCollection",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe2db5mongo6client11MongoClient",
								"name": "client"
							},
							{
								"deco": "Aya",
								"name": "fullPath"
							}
						],
						"name": "this",
						"originalType": "ref (MongoClient client, string fullPath)",
						"endline": 73
					},
					{
						"kind": "constructor",
						"line": 75,
						"deco": "FNcKS4vibe2db5mongo8database13MongoDatabaseAyaZS4vibe2db5mongo10collection15MongoCollection",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "S4vibe2db5mongo8database13MongoDatabase",
								"storageClass": [
									"ref"
								],
								"name": "db"
							},
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"name": "this",
						"originalType": "ref (ref MongoDatabase db, string name)",
						"endline": 82
					},
					{
						"kind": "function",
						"line": 87,
						"deco": "FNdZS4vibe2db5mongo8database13MongoDatabase",
						"endchar": 52,
						"char": 26,
						"name": "database",
						"comment": "\t  Returns: Root database to which this collection belongs.\n",
						"endline": 87
					},
					{
						"kind": "function",
						"line": 92,
						"deco": "xFNdZAya",
						"endchar": 49,
						"char": 19,
						"name": "name",
						"comment": "\t  Returns: Name of this collection (excluding the database name).\n",
						"endline": 92
					},
					{
						"kind": "template",
						"line": 100,
						"members": [
							{
								"kind": "function",
								"line": 100,
								"endchar": 2,
								"char": 7,
								"type": "void(T selector, U update, UpdateFlags flags = UpdateFlags.None)",
								"parameters": [
									{
										"type": "T",
										"name": "selector"
									},
									{
										"type": "U",
										"name": "update"
									},
									{
										"default": "UpdateFlags.None",
										"type": "UpdateFlags",
										"name": "flags"
									}
								],
								"name": "update",
								"endline": 106
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							},
							{
								"kind": "type",
								"name": "U"
							}
						],
						"comment": "\t  Performs an update operation on documents matching 'selector', updating them with 'update'.\n\n\t  Throws: Exception if a DB communication error occured.\n\t  See_Also: $(LINK http://www.mongodb.org/display/DOCS/Updating)\n",
						"name": "update"
					},
					{
						"kind": "template",
						"line": 114,
						"members": [
							{
								"kind": "function",
								"line": 114,
								"endchar": 2,
								"char": 7,
								"type": "void(T document_or_documents, InsertFlags flags = InsertFlags.None)",
								"parameters": [
									{
										"type": "T",
										"name": "document_or_documents"
									},
									{
										"default": "InsertFlags.None",
										"type": "InsertFlags",
										"name": "flags"
									}
								],
								"name": "insert",
								"endline": 123
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "\t  Inserts new documents into the collection.\n\n\t  Throws: Exception if a DB communication error occured.\n\t  See_Also: $(LINK http://www.mongodb.org/display/DOCS/Inserting)\n",
						"name": "insert"
					},
					{
						"kind": "template",
						"line": 132,
						"members": [
							{
								"kind": "function",
								"line": 132,
								"endchar": 2,
								"char": 24,
								"type": "MongoCursor!(T, R, U)(T query, U returnFieldSelector, QueryFlags flags = QueryFlags.None, int num_skip = 0, int num_docs_per_chunk = 0)",
								"parameters": [
									{
										"type": "T",
										"name": "query"
									},
									{
										"type": "U",
										"name": "returnFieldSelector"
									},
									{
										"default": "QueryFlags.None",
										"type": "QueryFlags",
										"name": "flags"
									},
									{
										"deco": "i",
										"default": "0",
										"name": "num_skip"
									},
									{
										"deco": "i",
										"default": "0",
										"name": "num_docs_per_chunk"
									}
								],
								"name": "find",
								"endline": 136
							}
						],
						"char": 24,
						"parameters": [
							{
								"kind": "type",
								"default": "Bson",
								"name": "R"
							},
							{
								"kind": "type",
								"name": "T"
							},
							{
								"kind": "type",
								"name": "U"
							}
						],
						"comment": "\t  Queries the collection for existing documents.\n\n\t  If no arguments are passed to find(), all documents of the collection will be returned.\n\n\t  See_Also: $(LINK http://www.mongodb.org/display/DOCS/Querying)\n",
						"name": "find"
					},
					{
						"kind": "template",
						"line": 139,
						"members": [
							{
								"kind": "function",
								"line": 139,
								"endchar": 92,
								"char": 35,
								"type": "MongoCursor!(T, R, typeof(null))(T query)",
								"parameters": [
									{
										"type": "T",
										"name": "query"
									}
								],
								"name": "find",
								"endline": 139
							}
						],
						"char": 35,
						"parameters": [
							{
								"kind": "type",
								"default": "Bson",
								"name": "R"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "ditto\n",
						"name": "find"
					},
					{
						"kind": "template",
						"line": 142,
						"members": [
							{
								"kind": "function",
								"line": 142,
								"endchar": 96,
								"char": 38,
								"type": "MongoCursor!(Bson, R, typeof(null))()",
								"name": "find",
								"endline": 142
							}
						],
						"char": 38,
						"parameters": [
							{
								"kind": "type",
								"default": "Bson",
								"name": "R"
							}
						],
						"comment": "ditto\n",
						"name": "find"
					},
					{
						"kind": "template",
						"line": 154,
						"members": [
							{
								"kind": "function",
								"line": 154,
								"storageClass": [
									"auto"
								],
								"endchar": 2,
								"char": 7,
								"type": "(T query, U returnFieldSelector, QueryFlags flags = QueryFlags.None)",
								"parameters": [
									{
										"type": "T",
										"name": "query"
									},
									{
										"type": "U",
										"name": "returnFieldSelector"
									},
									{
										"default": "QueryFlags.None",
										"type": "QueryFlags",
										"name": "flags"
									}
								],
								"name": "findOne",
								"endline": 174
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"default": "Bson",
								"name": "R"
							},
							{
								"kind": "type",
								"name": "T"
							},
							{
								"kind": "type",
								"name": "U"
							}
						],
						"comment": " Queries the collection for existing documents.\n\n\t\tReturns:\n\t\t\tBy default, a Bson value of the matching document is returned, or $(D Bson(null))\n\t\t\twhen no document matched. For types R that are not Bson, the returned value is either\n\t\t\tof type $(D R), or of type $(Nullable!R), if $(D R) is not a reference/pointer type.\n\n\t\tThrows: Exception if a DB communication error or a query error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Querying)\n",
						"name": "findOne"
					},
					{
						"kind": "template",
						"line": 176,
						"members": [
							{
								"kind": "function",
								"line": 176,
								"storageClass": [
									"auto"
								],
								"endchar": 76,
								"char": 7,
								"type": "(T query)",
								"parameters": [
									{
										"type": "T",
										"name": "query"
									}
								],
								"name": "findOne",
								"endline": 176
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"default": "Bson",
								"name": "R"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "ditto\n",
						"name": "findOne"
					},
					{
						"kind": "template",
						"line": 184,
						"members": [
							{
								"kind": "function",
								"line": 184,
								"endchar": 2,
								"char": 7,
								"type": "void(T selector, DeleteFlags flags = DeleteFlags.None)",
								"parameters": [
									{
										"type": "T",
										"name": "selector"
									},
									{
										"default": "DeleteFlags.None",
										"type": "DeleteFlags",
										"name": "flags"
									}
								],
								"name": "remove",
								"endline": 190
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "\t  Removes documents from the collection.\n\n\t  Throws: Exception if a DB communication error occured.\n\t  See_Also: $(LINK http://www.mongodb.org/display/DOCS/Removing)\n",
						"name": "remove"
					},
					{
						"kind": "template",
						"line": 193,
						"members": [
							{
								"kind": "function",
								"line": 193,
								"endchar": 46,
								"char": 7,
								"type": "void()",
								"name": "remove",
								"endline": 193
							}
						],
						"char": 7,
						"parameters": [],
						"comment": "ditto\n",
						"name": "remove"
					},
					{
						"kind": "template",
						"line": 201,
						"members": [
							{
								"kind": "function",
								"line": 201,
								"endchar": 2,
								"char": 7,
								"type": "Bson(T query, U update, V returnFieldSelector)",
								"parameters": [
									{
										"type": "T",
										"name": "query"
									},
									{
										"type": "U",
										"name": "update"
									},
									{
										"type": "V",
										"name": "returnFieldSelector"
									}
								],
								"name": "findAndModify",
								"endline": 217
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							},
							{
								"kind": "type",
								"name": "U"
							},
							{
								"kind": "type",
								"name": "V"
							}
						],
						"comment": "\t  Combines a modify and find operation to a single atomic operation.\n\n\t  Throws Exception if a DB communication error occured.\n\t  See_Also: $(LINK http://docs.mongodb.org/manual/reference/command/findAndModify)\n",
						"name": "findAndModify"
					},
					{
						"kind": "template",
						"line": 220,
						"members": [
							{
								"kind": "function",
								"line": 220,
								"endchar": 2,
								"char": 7,
								"type": "Bson(T query, U update)",
								"parameters": [
									{
										"type": "T",
										"name": "query"
									},
									{
										"type": "U",
										"name": "update"
									}
								],
								"name": "findAndModify",
								"endline": 223
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							},
							{
								"kind": "type",
								"name": "U"
							}
						],
						"comment": "ditto\n",
						"name": "findAndModify"
					},
					{
						"kind": "template",
						"line": 231,
						"members": [
							{
								"kind": "function",
								"line": 231,
								"endchar": 2,
								"char": 8,
								"type": "ulong(T query)",
								"parameters": [
									{
										"type": "T",
										"name": "query"
									}
								],
								"name": "count",
								"endline": 246
							}
						],
						"char": 8,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "\t\tCounts the results of the specified query expression.\n\n\t\tThrows Exception if a DB communication error occured.\n\t\tSee_Also: $(LINK http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-{{count%28%29}})\n",
						"name": "count"
					},
					{
						"kind": "template",
						"line": 262,
						"members": [
							{
								"kind": "function",
								"line": 262,
								"endchar": 2,
								"char": 7,
								"type": "Bson(ARGS pipeline)",
								"parameters": [
									{
										"type": "ARGS",
										"name": "pipeline"
									}
								],
								"name": "aggregate",
								"endline": 283
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"comment": "\t\tCalculates aggregate values for the data in a collection.\n\n\t\tParams:\n\t\t\tpipeline = A sequence of data aggregation processes. These can\n\t\t\t\teither be given as separate parameters, or as a single array\n\t\t\t\tparameter.\n\n\t\tReturns: An array of documents returned by the pipeline\n\n\t\tThrows: Exception if a DB communication error occured\n\n\t\tSee_Also: $(LINK http://docs.mongodb.org/manual/reference/method/db.collection.aggregate)\nExample:\nExample taken from the MongoDB documentation\n---\nimport vibe.db.mongo.mongo;\n\nvoid test() {\n\tauto db = connectMongoDB(\"127.0.0.1\").getDatabase(\"test\");\n\tauto results = db[\"coll\"].aggregate(\n\t\t[\"$match\": [\"status\": \"A\"]],\n\t\t[\"$group\": [\"_id\": Bson(\"$cust_id\"),\n\t\t\t\"total\": Bson([\"$sum\": Bson(\"$amount\")])]],\n\t\t[\"$sort\": [\"total\": -1]]);\n}\n\n\n---\nExample:\nThe same example, but using an array of arguments\n---\nimport vibe.db.mongo.mongo;\n\nvoid test() {\n\tauto db = connectMongoDB(\"127.0.0.1\").getDatabase(\"test\");\n\n\tBson[] args;\n\targs ~= serializeToBson([\"$match\": [\"status\": \"A\"]]);\n\targs ~= serializeToBson([\"$group\": [\"_id\": Bson(\"$cust_id\"),\n\t\t\t\"total\": Bson([\"$sum\": Bson(\"$amount\")])]]);\n\targs ~= serializeToBson([\"$sort\": [\"total\": -1]]);\n\n\tauto results = db[\"coll\"].aggregate(args);\n}\n\n\n---\n",
						"name": "aggregate"
					},
					{
						"kind": "function",
						"line": 323,
						"deco": "FMAxS3std8typecons16__T5TupleTAyaTiZ5TupleE4vibe2db5mongo10collection10IndexFlagsS4core4time8DurationZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "AxS3std8typecons16__T5TupleTAyaTiZ5Tuple",
								"storageClass": [
									"scope"
								],
								"name": "field_orders"
							},
							{
								"deco": "E4vibe2db5mongo10collection10IndexFlags",
								"default": "cast(IndexFlags)0",
								"name": "flags"
							},
							{
								"deco": "S4core4time8Duration",
								"default": "dur(0L)",
								"name": "expire_time"
							}
						],
						"name": "ensureIndex",
						"comment": "\t\tCreates or updates an index.\n\n\t\tNote that the overload taking an associative array of field orders is\n\t\tscheduled for deprecation. Since the order of fields matters, it is\n\t\tonly suitable for single-field indices.\n",
						"originalType": "void(scope const(Tuple!(string, int))[] field_orders, IndexFlags flags = IndexFlags.None, Duration expire_time = 0.seconds)",
						"endline": 350
					},
					{
						"kind": "function",
						"line": 352,
						"deco": "FHAyaiE4vibe2db5mongo10collection10IndexFlagsmZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "HAyai",
								"name": "field_orders"
							},
							{
								"deco": "E4vibe2db5mongo10collection10IndexFlags",
								"default": "cast(IndexFlags)0",
								"name": "flags"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "expireAfterSeconds"
							}
						],
						"name": "ensureIndex",
						"comment": "ditto\n",
						"originalType": "void(int[string] field_orders, IndexFlags flags = IndexFlags.None, ulong expireAfterSeconds = 0)",
						"endline": 358
					},
					{
						"kind": "function",
						"line": 360,
						"deco": "FAyaZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"name": "dropIndex",
						"endline": 372
					},
					{
						"kind": "function",
						"line": 374,
						"deco": "FZv",
						"endchar": 5,
						"char": 10,
						"name": "drop",
						"endline": 383
					}
				],
				"char": 1,
				"name": "MongoCollection",
				"comment": "  Represents a single collection inside a MongoDB.\n\n  All methods take arbitrary types for Bson arguments. serializeToBson() is implicitly called on\n  them before they are send to the database. The following example shows some possible ways\n  to specify objects.\n\nExamples:\n\n---\nMongoClient client = connectMongoDB(\"127.0.0.1\");\nMongoCollection users = client.getCollection(\"myapp.users\");\n\n// canonical version using a Bson object\nusers.insert(Bson([\"name\": Bson(\"admin\"), \"password\": Bson(\"secret\")]));\n\n// short version using a string[string] AA that is automatically\n// serialized to Bson\nusers.insert([\"name\": \"admin\", \"password\": \"secret\"]);\n\n// BSON specific types are also serialized automatically\nBsonObjectId uid = ...;\nBson usr = users.find([\"_id\": uid]);\n\n// JSON is another possibility\nJson jusr = parseJson(\"{\\\"name\\\": \\\"admin\\\", \\\"password\\\": \\\"secret\\\"}\");\nusers.insert(jusr);\n---\n"
			},
			{
				"kind": "enum",
				"line": 386,
				"members": [
					{
						"kind": "enum member",
						"line": 387,
						"value": "0",
						"char": 2,
						"name": "None"
					},
					{
						"kind": "enum member",
						"line": 388,
						"value": "1",
						"char": 2,
						"name": "Unique"
					},
					{
						"kind": "enum member",
						"line": 389,
						"value": "4",
						"char": 2,
						"name": "DropDuplicates"
					},
					{
						"kind": "enum member",
						"line": 390,
						"value": "8",
						"char": 2,
						"name": "Background"
					},
					{
						"kind": "enum member",
						"line": 391,
						"value": "16",
						"char": 2,
						"name": "Sparse"
					},
					{
						"kind": "enum member",
						"line": 392,
						"value": "32",
						"char": 2,
						"name": "ExpireAfterSeconds"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "IndexFlags"
			}
		],
		"name": "vibe.db.mongo.collection",
		"comment": "\tMongoCollection class\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\db\\mongo\\connection.d",
		"members": [
			{
				"kind": "import",
				"line": 10,
				"char": 15,
				"name": "vibe.data.bson"
			},
			{
				"kind": "alias",
				"line": 42,
				"deco": "yS4vibe2db5mongo10connection22_MongoErrorDescription",
				"char": 1,
				"name": "MongoErrorDescription",
				"comment": " D POD representation of Mongo error object.\n\n For successful queries \"code\" is negative.\n Can be used also to check how many documents where updated upon\n a successful query via \"n\" field.\n"
			},
			{
				"kind": "class",
				"line": 47,
				"base": "object.Exception",
				"members": [
					{
						"kind": "constructor",
						"line": 49,
						"deco": "FAyaAyaiC6object9ThrowableZC4vibe2db5mongo10connection14MongoException",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"name": "message"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "i",
								"default": "__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"name": "this",
						"originalType": "(string message, string file = __FILE__, int line = __LINE__, Throwable next = null)",
						"endline": 52
					}
				],
				"char": 1,
				"name": "MongoException",
				"comment": " Root class for vibe.d Mongo driver exception hierarchy.\n"
			},
			{
				"kind": "class",
				"line": 60,
				"base": "vibe.db.mongo.connection.MongoException",
				"members": [
					{
						"kind": "constructor",
						"line": 62,
						"deco": "FAyaAyaiC6object9ThrowableZC4vibe2db5mongo10connection20MongoDriverException",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"name": "message"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "i",
								"default": "__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"name": "this",
						"originalType": "(string message, string file = __FILE__, int line = __LINE__, Throwable next = null)",
						"endline": 65
					}
				],
				"char": 1,
				"name": "MongoDriverException",
				"comment": " Generic class for all exception related to unhandled driver problems.\n\n I.e.: protocol mismatch or unexpected mongo service behavior.\n"
			},
			{
				"kind": "class",
				"line": 74,
				"base": "vibe.db.mongo.connection.MongoException",
				"members": [
					{
						"kind": "variable",
						"line": 76,
						"storageClass": [
							"immutable"
						],
						"deco": "yS4vibe2db5mongo10connection22_MongoErrorDescription",
						"char": 24,
						"name": "description",
						"originalType": "MongoErrorDescription",
						"offset": 40
					},
					{
						"kind": "constructor",
						"line": 79,
						"deco": "FyS4vibe2db5mongo10connection22_MongoErrorDescriptionAyaiC6object9ThrowableZC4vibe2db5mongo10connection16MongoDBException",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "yS4vibe2db5mongo10connection22_MongoErrorDescription",
								"name": "description"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "i",
								"default": "__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"name": "this",
						"originalType": "(MongoErrorDescription description, string file = __FILE__, int line = __LINE__, Throwable next = null)",
						"endline": 84
					}
				],
				"char": 1,
				"name": "MongoDBException",
				"comment": " Wrapper class for all inner mongo collection manipulation errors.\n\n It does not indicate problem with vibe.d driver itself. Most frequently this\n one is thrown when MongoConnection is in checked mode and getLastError() has something interesting.\n"
			},
			{
				"kind": "class",
				"line": 92,
				"base": "vibe.db.mongo.connection.MongoException",
				"members": [
					{
						"kind": "constructor",
						"line": 94,
						"deco": "FAyaAyaiC6object9ThrowableZC4vibe2db5mongo10connection18MongoAuthException",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"name": "message"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "i",
								"default": "__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"name": "this",
						"originalType": "(string message, string file = __FILE__, int line = __LINE__, Throwable next = null)",
						"endline": 97
					}
				],
				"char": 1,
				"name": "MongoAuthException",
				"comment": " Generic class for all exceptions related to authentication problems.\n\n I.e.: unsupported mechanisms or wrong credentials.\n"
			},
			{
				"kind": "class",
				"line": 106,
				"members": [
					{
						"kind": "variable",
						"line": 115,
						"init": "cast(ushort)27017u",
						"storageClass": [
							"enum"
						],
						"deco": "t",
						"char": 14,
						"name": "defaultPort"
					},
					{
						"kind": "constructor",
						"line": 118,
						"deco": "FAyatZC4vibe2db5mongo10connection15MongoConnection",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"name": "server"
							},
							{
								"deco": "t",
								"default": "cast(ushort)27017u",
								"name": "port"
							}
						],
						"name": "this",
						"comment": "Simplified constructor overload, with no m_settings\n",
						"originalType": "(string server, ushort port = defaultPort)",
						"endline": 122
					},
					{
						"kind": "constructor",
						"line": 124,
						"deco": "FC4vibe2db5mongo10connection19MongoClientSettingsZC4vibe2db5mongo10connection15MongoConnection",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe2db5mongo10connection19MongoClientSettings",
								"name": "cfg"
							}
						],
						"name": "this",
						"originalType": "(MongoClientSettings cfg)",
						"endline": 132
					},
					{
						"kind": "function",
						"line": 134,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "connect",
						"endline": 163
					},
					{
						"kind": "function",
						"line": 165,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "disconnect",
						"endline": 176
					},
					{
						"kind": "function",
						"line": 178,
						"deco": "xFNdZb",
						"endchar": 72,
						"char": 17,
						"name": "connected",
						"endline": 178
					},
					{
						"kind": "function",
						"line": 181,
						"deco": "FAyaE4vibe2db5mongo10connection11UpdateFlagsS4vibe4data4bson4BsonS4vibe4data4bson4BsonZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "collection_name"
							},
							{
								"deco": "E4vibe2db5mongo10connection11UpdateFlags",
								"name": "flags"
							},
							{
								"deco": "S4vibe4data4bson4Bson",
								"name": "selector"
							},
							{
								"deco": "S4vibe4data4bson4Bson",
								"name": "update"
							}
						],
						"name": "update",
						"endline": 186
					},
					{
						"kind": "function",
						"line": 188,
						"deco": "FAyaE4vibe2db5mongo10connection11InsertFlagsAS4vibe4data4bson4BsonZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "collection_name"
							},
							{
								"deco": "E4vibe2db5mongo10connection11InsertFlags",
								"name": "flags"
							},
							{
								"deco": "AS4vibe4data4bson4Bson",
								"name": "documents"
							}
						],
						"name": "insert",
						"endline": 194
					},
					{
						"kind": "template",
						"line": 196,
						"members": [
							{
								"kind": "function",
								"line": 196,
								"endchar": 2,
								"char": 7,
								"type": "void(string collection_name, QueryFlags flags, int nskip, int nret, Bson query, Bson returnFieldSelector, scope ReplyDelegate on_msg, scope DocDelegate!T on_doc)",
								"parameters": [
									{
										"type": "string",
										"name": "collection_name"
									},
									{
										"type": "QueryFlags",
										"name": "flags"
									},
									{
										"deco": "i",
										"name": "nskip"
									},
									{
										"deco": "i",
										"name": "nret"
									},
									{
										"type": "Bson",
										"name": "query"
									},
									{
										"type": "Bson",
										"name": "returnFieldSelector"
									},
									{
										"storageClass": [
											"scope"
										],
										"type": "ReplyDelegate",
										"name": "on_msg"
									},
									{
										"storageClass": [
											"scope"
										],
										"type": "DocDelegate!T",
										"name": "on_doc"
									}
								],
								"name": "query",
								"endline": 206
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "query"
					},
					{
						"kind": "template",
						"line": 208,
						"members": [
							{
								"kind": "function",
								"line": 208,
								"endchar": 2,
								"char": 7,
								"type": "void(string collection_name, int nret, long cursor_id, scope ReplyDelegate on_msg, scope DocDelegate!T on_doc)",
								"parameters": [
									{
										"type": "string",
										"name": "collection_name"
									},
									{
										"deco": "i",
										"name": "nret"
									},
									{
										"deco": "l",
										"name": "cursor_id"
									},
									{
										"storageClass": [
											"scope"
										],
										"type": "ReplyDelegate",
										"name": "on_msg"
									},
									{
										"storageClass": [
											"scope"
										],
										"type": "DocDelegate!T",
										"name": "on_doc"
									}
								],
								"name": "getMore",
								"endline": 213
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "getMore"
					},
					{
						"kind": "function",
						"line": 215,
						"deco": "FAyaE4vibe2db5mongo10connection11DeleteFlagsS4vibe4data4bson4BsonZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "collection_name"
							},
							{
								"deco": "E4vibe2db5mongo10connection11DeleteFlags",
								"name": "flags"
							},
							{
								"deco": "S4vibe4data4bson4Bson",
								"name": "selector"
							}
						],
						"name": "delete_",
						"endline": 220
					},
					{
						"kind": "function",
						"line": 222,
						"deco": "FAlZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Al",
								"name": "cursors"
							}
						],
						"name": "killCursors",
						"endline": 226
					},
					{
						"kind": "function",
						"line": 228,
						"deco": "FAyaZyS4vibe2db5mongo10connection22_MongoErrorDescription",
						"endchar": 2,
						"char": 24,
						"parameters": [
							{
								"deco": "Aya",
								"name": "db"
							}
						],
						"name": "getLastError",
						"originalType": "MongoErrorDescription(string db)",
						"endline": 275
					},
					{
						"kind": "function",
						"line": 282,
						"storageClass": [
							"auto"
						],
						"deco": "FZS3std9algorithm9iteration177__T9MapResultS135_D4vibe2db5mongo10connection15MongoConnection13listDatabasesMFZ6toInfoMFxS4vibe4data4bson4BsonZS4vibe2db5mongo10connection11MongoDBInfoTAxS4vibe4data4bson4BsonZ9MapResult",
						"endchar": 2,
						"char": 7,
						"name": "listDatabases",
						"comment": " Queries the server for all databases.\n\n\t\tReturns:\n\t\t\tAn input range of $(D MongoDBInfo) values.\n",
						"originalType": "()",
						"endline": 312
					}
				],
				"char": 7,
				"name": "MongoConnection",
				"comment": "  [internal] Provides low-level mongodb protocol access.\n\n  It is not intended for direct usage. Please use vibe.db.mongo.db and vibe.db.mongo.collection modules for your code.\n  Note that a MongoConnection may only be used from one fiber/thread at a time.\n"
			},
			{
				"kind": "function",
				"line": 469,
				"deco": "FJC4vibe2db5mongo10connection19MongoClientSettingsAyaZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "C4vibe2db5mongo10connection19MongoClientSettings",
						"storageClass": [
							"out"
						],
						"name": "cfg"
					},
					{
						"deco": "Aya",
						"name": "url"
					}
				],
				"name": "parseMongoDBUrl",
				"comment": " Parses the given string as a mongodb URL. The URL must be in the form documented at\n $(LINK http://www.mongodb.org/display/DOCS/Connections) which is:\n\n mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n\n Returns: true if the URL was successfully parsed. False if the URL can not be parsed.\n\n If the URL is successfully parsed the MongoClientSettings instance will contain the parsed config.\n If the URL is not successfully parsed the information in the MongoClientSettings instance may be\n incomplete and should not be used.\n",
				"endline": 625
			},
			{
				"kind": "alias",
				"line": 744,
				"deco": "DFlE4vibe2db5mongo10connection10ReplyFlagsiiZv",
				"char": 1,
				"name": "ReplyDelegate"
			},
			{
				"kind": "template",
				"line": 745,
				"members": [
					{
						"kind": "alias",
						"line": 745,
						"char": 27,
						"type": "void delegate(size_t idx, ref T doc)",
						"name": "DocDelegate"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"name": "DocDelegate"
			},
			{
				"kind": "enum",
				"line": 747,
				"members": [
					{
						"kind": "enum member",
						"line": 748,
						"value": "0",
						"char": 2,
						"name": "None"
					},
					{
						"kind": "enum member",
						"line": 749,
						"value": "1",
						"char": 2,
						"name": "Upsert"
					},
					{
						"kind": "enum member",
						"line": 750,
						"value": "2",
						"char": 2,
						"name": "MultiUpdate"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "UpdateFlags"
			},
			{
				"kind": "enum",
				"line": 753,
				"members": [
					{
						"kind": "enum member",
						"line": 754,
						"value": "0",
						"char": 2,
						"name": "None"
					},
					{
						"kind": "enum member",
						"line": 755,
						"value": "1",
						"char": 2,
						"name": "ContinueOnError"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "InsertFlags"
			},
			{
				"kind": "enum",
				"line": 758,
				"members": [
					{
						"kind": "enum member",
						"line": 759,
						"value": "0",
						"char": 2,
						"name": "None"
					},
					{
						"kind": "enum member",
						"line": 760,
						"value": "2",
						"char": 2,
						"name": "TailableCursor"
					},
					{
						"kind": "enum member",
						"line": 761,
						"value": "4",
						"char": 2,
						"name": "SlaveOk"
					},
					{
						"kind": "enum member",
						"line": 762,
						"value": "8",
						"char": 2,
						"name": "OplogReplay"
					},
					{
						"kind": "enum member",
						"line": 763,
						"value": "16",
						"char": 2,
						"name": "NoCursorTimeout"
					},
					{
						"kind": "enum member",
						"line": 764,
						"value": "32",
						"char": 2,
						"name": "AwaitData"
					},
					{
						"kind": "enum member",
						"line": 765,
						"value": "64",
						"char": 2,
						"name": "Exhaust"
					},
					{
						"kind": "enum member",
						"line": 766,
						"value": "128",
						"char": 2,
						"name": "Partial"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "QueryFlags"
			},
			{
				"kind": "enum",
				"line": 769,
				"members": [
					{
						"kind": "enum member",
						"line": 770,
						"value": "0",
						"char": 2,
						"name": "None"
					},
					{
						"kind": "enum member",
						"line": 771,
						"value": "1",
						"char": 2,
						"name": "SingleRemove"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "DeleteFlags"
			},
			{
				"kind": "enum",
				"line": 774,
				"members": [
					{
						"kind": "enum member",
						"line": 775,
						"value": "0",
						"char": 2,
						"name": "None"
					},
					{
						"kind": "enum member",
						"line": 776,
						"value": "1",
						"char": 2,
						"name": "CursorNotFound"
					},
					{
						"kind": "enum member",
						"line": 777,
						"value": "2",
						"char": 2,
						"name": "QueryFailure"
					},
					{
						"kind": "enum member",
						"line": 778,
						"value": "4",
						"char": 2,
						"name": "ShardConfigStale"
					},
					{
						"kind": "enum member",
						"line": 779,
						"value": "8",
						"char": 2,
						"name": "AwaitCapable"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "ReplyFlags"
			},
			{
				"kind": "class",
				"line": 783,
				"members": [
					{
						"kind": "variable",
						"line": 785,
						"deco": "Aya",
						"char": 9,
						"name": "username",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 786,
						"deco": "Aya",
						"char": 9,
						"name": "digest",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 787,
						"deco": "AS4vibe2db5mongo10connection9MongoHost",
						"char": 14,
						"name": "hosts",
						"offset": 24
					},
					{
						"kind": "variable",
						"line": 788,
						"deco": "Aya",
						"char": 9,
						"name": "database",
						"offset": 32
					},
					{
						"kind": "variable",
						"line": 789,
						"init": "cast(QueryFlags)0",
						"deco": "E4vibe2db5mongo10connection10QueryFlags",
						"char": 13,
						"name": "defQueryFlags",
						"offset": 40
					},
					{
						"kind": "variable",
						"line": 790,
						"deco": "Aya",
						"char": 9,
						"name": "replicaSet",
						"offset": 44
					},
					{
						"kind": "variable",
						"line": 791,
						"deco": "b",
						"char": 7,
						"name": "safe",
						"offset": 52
					},
					{
						"kind": "variable",
						"line": 792,
						"deco": "S4vibe4data4bson4Bson",
						"char": 7,
						"name": "w",
						"offset": 56
					},
					{
						"kind": "variable",
						"line": 793,
						"deco": "l",
						"char": 7,
						"name": "wTimeoutMS",
						"offset": 72
					},
					{
						"kind": "variable",
						"line": 794,
						"deco": "b",
						"char": 7,
						"name": "fsync",
						"offset": 80
					},
					{
						"kind": "variable",
						"line": 795,
						"deco": "b",
						"char": 7,
						"name": "journal",
						"offset": 81
					},
					{
						"kind": "variable",
						"line": 796,
						"deco": "l",
						"char": 7,
						"name": "connectTimeoutMS",
						"offset": 88
					},
					{
						"kind": "variable",
						"line": 797,
						"deco": "l",
						"char": 7,
						"name": "socketTimeoutMS",
						"offset": 96
					},
					{
						"kind": "variable",
						"line": 798,
						"deco": "b",
						"char": 7,
						"name": "ssl",
						"offset": 104
					},
					{
						"kind": "variable",
						"line": 799,
						"init": "true",
						"deco": "b",
						"char": 7,
						"name": "sslverifycertificate",
						"offset": 105
					},
					{
						"kind": "function",
						"line": 801,
						"storageClass": [
							"static"
						],
						"deco": "FAyaAyaZAya",
						"endchar": 2,
						"char": 16,
						"parameters": [
							{
								"deco": "Aya",
								"name": "username"
							},
							{
								"deco": "Aya",
								"name": "password"
							}
						],
						"name": "makeDigest",
						"endline": 804
					}
				],
				"char": 1,
				"name": "MongoClientSettings",
				"comment": "[internal]\n"
			},
			{
				"kind": "struct",
				"line": 807,
				"members": [
					{
						"kind": "variable",
						"line": 809,
						"deco": "Aya",
						"char": 9,
						"name": "name",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 810,
						"deco": "d",
						"char": 9,
						"name": "sizeOnDisk",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 811,
						"deco": "b",
						"char": 7,
						"name": "empty",
						"offset": 16
					}
				],
				"char": 1,
				"name": "MongoDBInfo"
			}
		],
		"name": "vibe.db.mongo.connection",
		"comment": "\tLow level mongodb protocol.\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\db\\mongo\\cursor.d",
		"members": [
			{
				"kind": "import",
				"line": 10,
				"char": 15,
				"name": "vibe.data.bson"
			},
			{
				"kind": "template",
				"line": 27,
				"members": [
					{
						"kind": "struct",
						"line": 27,
						"members": [
							{
								"kind": "variable",
								"line": 28,
								"char": 36,
								"type": "MongoCursorData!(Q, R, S)",
								"name": "m_data"
							},
							{
								"kind": "constructor",
								"line": 30,
								"endchar": 2,
								"char": 10,
								"type": "(MongoClient client, string collection, QueryFlags flags, int nskip, int nret, Q query, S return_field_selector)",
								"parameters": [
									{
										"type": "MongoClient",
										"name": "client"
									},
									{
										"type": "string",
										"name": "collection"
									},
									{
										"type": "QueryFlags",
										"name": "flags"
									},
									{
										"deco": "i",
										"name": "nskip"
									},
									{
										"deco": "i",
										"name": "nret"
									},
									{
										"type": "Q",
										"name": "query"
									},
									{
										"type": "S",
										"name": "return_field_selector"
									}
								],
								"name": "this",
								"endline": 34
							},
							{
								"kind": "destructor",
								"line": 41,
								"endchar": 2,
								"char": 2,
								"name": "~this",
								"endline": 46
							},
							{
								"kind": "function",
								"line": 53,
								"endchar": 66,
								"char": 17,
								"type": "@property bool()",
								"name": "empty",
								"comment": "\t\tReturns true if there are no more documents for this cursor.\n\n\t\tThrows: An exception if there is a query or communication error.\n",
								"endline": 53
							},
							{
								"kind": "function",
								"line": 62,
								"endchar": 45,
								"char": 14,
								"type": "@property R()",
								"name": "front",
								"comment": "\t\tReturns the current document of the response.\n\n\t\tUse empty and popFront to iterate over the list of documents using an\n\t\tinput range interface. Note that calling this function is only allowed\n\t\tif empty returns false.\n",
								"endline": 62
							},
							{
								"kind": "template",
								"line": 84,
								"members": [
									{
										"kind": "function",
										"line": 84,
										"endchar": 2,
										"char": 14,
										"type": "MongoCursor(T order)",
										"parameters": [
											{
												"type": "T",
												"name": "order"
											}
										],
										"name": "sort",
										"endline": 88
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "\t\tControls the order in which the query returns matching documents.\n\n\t\tThis method must be called before starting to iterate, or an exeption\n\t\twill be thrown. If multiple calls to $(D sort()) are issued, only\n\t\tthe last one will have an effect.\n\n\t\tParams:\n\t\t\torder = A BSON object convertible value that defines the sort order\n\t\t\t\tof the result. This BSON object must be structured according to\n\t\t\t\tthe MongoDB documentation (see below).\n\n\t\tReturns: Reference to the modified original curser instance.\n\n\t\tThrows:\n\t\t\tAn exception if there is a query or communication error.\n\t\t\tAlso throws if the method was called after beginning of iteration.\n\n\t\tSee_Also: $(LINK http://docs.mongodb.org/manual/reference/method/cursor.sort)\nExample:\n\n---\nimport vibe.core.log;\nimport vibe.db.mongo.mongo;\n\nvoid test()\n{\n\tauto db = connectMongoDB(\"127.0.0.1\").getDatabase(\"test\");\n\tauto coll = db[\"testcoll\"];\n\n\t// find all entries in reverse date order\n\tforeach (entry; coll.find().sort([\"date\": -1]))\n\t\tlogInfo(\"Entry: %s\", entry);\n\n\t// the same, but using a struct to avoid memory allocations\n\tstatic struct Order { int date; }\n\tforeach (entry; coll.find().sort(Order(-1)))\n\t\tlogInfo(\"Entry: %s\", entry);\n}\n\n\n---\n",
								"name": "sort"
							},
							{
								"kind": "function",
								"line": 126,
								"endchar": 2,
								"char": 14,
								"type": "MongoCursor(size_t count)",
								"parameters": [
									{
										"type": "size_t",
										"name": "count"
									}
								],
								"name": "limit",
								"comment": "\t\tLimits the number of documents that the cursor returns.\n\n\t\tThis method must be called before beginnig iteration in order to have\n\t\teffect. If multiple calls to limit() are made, the one with the lowest\n\t\tlimit will be chosen.\n\n\t\tParams:\n\t\t\tcount = The maximum number number of documents to return. A value\n\t\t\t\tof zero means unlimited.\n\n\t\tReturns: the same cursor\n\n\t\tSee_Also: $(LINK http://docs.mongodb.org/manual/reference/method/cursor.limit)\n",
								"endline": 130
							},
							{
								"kind": "function",
								"line": 146,
								"endchar": 2,
								"char": 14,
								"type": "MongoCursor(int count)",
								"parameters": [
									{
										"deco": "i",
										"name": "count"
									}
								],
								"name": "skip",
								"comment": "\t\tSkips a given number of elements at the beginning of the cursor.\n\n\t\tThis method must be called before beginnig iteration in order to have\n\t\teffect. If multiple calls to skip() are made, the one with the maximum\n\t\tnumber will be chosen.\n\n\t\tParams:\n\t\t\tcount = The number of documents to skip.\n\n\t\tReturns: the same cursor\n\n\t\tSee_Also: $(LINK http://docs.mongodb.org/manual/reference/method/cursor.skip)\n",
								"endline": 150
							},
							{
								"kind": "function",
								"line": 157,
								"endchar": 39,
								"char": 7,
								"type": "void()",
								"name": "popFront",
								"comment": "\t\tAdvances the cursor to the next document of the response.\n\n\t\tNote that calling this function is only allowed if empty returns false.\n",
								"endline": 157
							},
							{
								"kind": "function",
								"line": 167,
								"endchar": 2,
								"char": 6,
								"type": "int(int delegate(ref R doc) del)",
								"parameters": [
									{
										"type": "int delegate(ref R doc)",
										"name": "del"
									}
								],
								"name": "opApply",
								"comment": "\t\tIterates over all remaining documents.\n\n\t\tNote that iteration is one-way - elements that have already been visited\n\t\twill not be visited again if another iteration is done.\n\n\t\tThrows: An exception if there is a query or communication error.\n",
								"endline": 178
							},
							{
								"kind": "function",
								"line": 188,
								"endchar": 2,
								"char": 6,
								"type": "int(int delegate(ref size_t idx, ref R doc) del)",
								"parameters": [
									{
										"type": "int delegate(ref size_t idx, ref R doc)",
										"name": "del"
									}
								],
								"name": "opApply",
								"comment": "\t\tIterates over all remaining documents.\n\n\t\tNote that iteration is one-way - elements that have already been visited\n\t\twill not be visited again if another iteration is done.\n\n\t\tThrows: An exception if there is a query or communication error.\n",
								"endline": 200
							}
						],
						"char": 1,
						"name": "MongoCursor"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"default": "Bson",
						"name": "Q"
					},
					{
						"kind": "type",
						"default": "Bson",
						"name": "R"
					},
					{
						"kind": "type",
						"default": "Bson",
						"name": "S"
					}
				],
				"comment": "\tRepresents a cursor for a MongoDB query.\n\n\tUse foreach( doc; cursor ) to iterate over the list of documents.\n\n\tThis struct uses reference counting to destroy the underlying MongoDB cursor.\n",
				"name": "MongoCursor"
			}
		],
		"name": "vibe.db.mongo.cursor",
		"comment": "\tMongoDB cursor abstraction\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\db\\mongo\\database.d",
		"members": [
			{
				"kind": "struct",
				"line": 20,
				"members": [
					{
						"kind": "constructor",
						"line": 30,
						"deco": "FNcC4vibe2db5mongo6client11MongoClientAyaZS4vibe2db5mongo8database13MongoDatabase",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe2db5mongo6client11MongoClient",
								"name": "client"
							},
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"name": "this",
						"originalType": "ref (MongoClient client, string name)",
						"endline": 43
					},
					{
						"kind": "function",
						"line": 46,
						"deco": "FNdZAya",
						"endchar": 2,
						"char": 19,
						"name": "name",
						"comment": "The name of this database\n",
						"endline": 49
					},
					{
						"kind": "function",
						"line": 52,
						"deco": "FNdZC4vibe2db5mongo6client11MongoClient",
						"endchar": 2,
						"char": 24,
						"name": "client",
						"comment": "The client which represents the connection to the database server\n",
						"endline": 55
					},
					{
						"kind": "function",
						"line": 61,
						"deco": "FAyaZS4vibe2db5mongo10collection15MongoCollection",
						"endchar": 2,
						"char": 18,
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"name": "opIndex",
						"comment": " Accesses the collections of this database.\n\n\t\tReturns: The collection with the given name\n",
						"endline": 64
					},
					{
						"kind": "function",
						"line": 74,
						"deco": "FZyS4vibe2db5mongo10connection22_MongoErrorDescription",
						"endchar": 2,
						"char": 24,
						"name": "getLastError",
						"comment": " Retrieves the last error code (if any) from the database server.\n\n\t\tExact object format is not documented. MongoErrorDescription signature will be\n\t\tupdated upon any issues. Note that this method will execute a query to service\n\t\tcollection and thus is far from being \"free\".\n\n\t\tReturns: struct storing data from MongoDB db.getLastErrorObj() object\n",
						"originalType": "MongoErrorDescription()",
						"endline": 77
					},
					{
						"kind": "function",
						"line": 88,
						"deco": "FAyaZS4vibe4data4bson4Bson",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "mask"
							}
						],
						"name": "getLog",
						"comment": " Returns recent log messages for this database from the database server.\n\n\t\tSee $(LINK http://www.mongodb.org/display/DOCS/getLog+Command).\n\n\t \tParams:\n\t \t\tmask = \"global\" or \"rs\" or \"startupWarnings\". Refer to official MongoDB docs.\n\n     \tReturns: Bson document with recent log messages from MongoDB service.\n",
						"endline": 96
					},
					{
						"kind": "function",
						"line": 104,
						"deco": "FbZS4vibe4data4bson4Bson",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "b",
								"default": "false",
								"name": "async"
							}
						],
						"name": "fsync",
						"comment": " Performs a filesystem/disk sync of the database on the server.\n\n\t\tSee $(LINK http://www.mongodb.org/display/DOCS/fsync+Command)\n\n\t\tReturns: check documentation\n",
						"endline": 113
					},
					{
						"kind": "template",
						"line": 127,
						"members": [
							{
								"kind": "function",
								"line": 127,
								"endchar": 2,
								"char": 7,
								"type": "Bson(T command_and_options)",
								"parameters": [
									{
										"type": "T",
										"name": "command_and_options"
									}
								],
								"name": "runCommand",
								"endline": 130
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": " Generic means to run commands on the database.\n\n\t\tSee $(LINK http://www.mongodb.org/display/DOCS/Commands) for a list\n\t\tof possible values for command_and_options.\n\n\t\tParams:\n\t\t\tcommand_and_options = Bson object containing the command to be executed\n\t\t\t\tas well as the command parameters as fields\n\n\t\tReturns: The raw response of the MongoDB server\n",
						"name": "runCommand"
					}
				],
				"char": 1,
				"name": "MongoDatabase",
				"comment": " Represents a single database accessible through a given MongoClient.\n"
			}
		],
		"name": "vibe.db.mongo.database",
		"comment": "\tMongoDatabase class representing common database for group of collections.\n\n\tTechnically it is very special collection with common query functions\n\tdisabled and some service commands provided.\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\db\\mongo\\mongo.d",
		"members": [
			{
				"kind": "import",
				"line": 19,
				"char": 15,
				"name": "vibe.db.mongo.client"
			},
			{
				"kind": "function",
				"line": 69,
				"deco": "FAyatZC4vibe2db5mongo6client11MongoClient",
				"endchar": 1,
				"char": 13,
				"parameters": [
					{
						"deco": "Aya",
						"name": "host"
					},
					{
						"deco": "t",
						"name": "port"
					}
				],
				"name": "connectMongoDB",
				"comment": "\tConnects to a MongoDB instance.\n\n\tIf the host/port form is used, default settings will be used, which enable\n\tsafe updates, but no fsync. By specifying a URL instead, it is possible to\n\tfully customize the settings. See\n\t$(LINK http://www.mongodb.org/display/DOCS/Connections) for the complete set\n\tof options. Note that 'sslverifycertificate' is only present in some client\n\tbindings, including here.\n\n\n\tNote that the returned MongoClient uses a vibe.core.connectionpool.ConnectionPool\n\tinternally to create and reuse connections as necessary. Thus, the\n\tMongoClient instance can - and should - be shared among all fibers in a\n\tthread by storing in in a thread local variable.\n\n\tExamples:\n\t\t---\n\t\t// connecting with default settings:\n\t\tauto client = connectMongoDB(\"127.0.0.1\");\n\t\tauto users = client.getCollection(\"users\");\n\t\tusers.insert(Bson(\"peter\"));\n\t\t---\n\n\t\t---\n\t\t// connecting using the URL form with custom settings\n\t\tauto client = connectMongoDB(\"mongodb://localhost/?slaveOk=true\");\n\t\t---\n\n\t\t---\n\t\t// connecting with SSL encryption enabled and verification off\n\t\tauto client = connectMongoDB(\"mongodb://localhost/?ssl=true&sslverifycertificate=false\");\n\t\t---\n\n\tParams:\n\t\thost = Specifies the host name or IP address of the MongoDB server.\n\t\tport = Can be used to specify the port of the MongoDB server if different from the default one.\n\t\thost_or_url = Can either be a host name, in which case the default port will be used, or a URL with the mongodb:// scheme.\n\n\tReturns:\n\t\tA new MongoClient instance that can be used to access the database.\n\n \tThrows:\n \t\tThrows an exception if a mongodb:// URL is given and the URL cannot be parsed.\n \t\tAn exception will not be thrown if called with a hostname and port.\n",
				"endline": 73
			},
			{
				"kind": "function",
				"line": 75,
				"deco": "FAyaZC4vibe2db5mongo6client11MongoClient",
				"endchar": 1,
				"char": 13,
				"parameters": [
					{
						"deco": "Aya",
						"name": "host_or_url"
					}
				],
				"name": "connectMongoDB",
				"comment": "ditto\n",
				"endline": 83
			}
		],
		"name": "vibe.db.mongo.mongo",
		"comment": "\tMongoDB and MongoCollection classes and connections.\n\n\tImplementation_Note:\n\n\tThe MongoDB driver implementation here is missing a number of API functions\n\tknown from the JavaScript driver, but these can usually be implemented in\n\tterms of MongoDatabase.runCommand or MongoCollection.find. Since the\n\tofficial documentation is lacking in some places, it may be necessary to use\n\ta network sniffer to monitor what exectly needs to be sent. MongoDB has a\n\tdedicated utility for this called $(LINK2 http://docs.mongodb.org/manual/reference/program/mongosniff/ mongosniff).\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\db\\redis\\idioms.d",
		"members": [
			{
				"kind": "template",
				"line": 18,
				"members": [
					{
						"kind": "struct",
						"line": 18,
						"members": [
							{
								"kind": "alias",
								"line": 23,
								"char": 2,
								"type": "Replicate!(long, ID_LENGTH)",
								"name": "IDS"
							},
							{
								"kind": "variable",
								"line": 28,
								"char": 17,
								"type": "RedisDatabase",
								"name": "m_db"
							},
							{
								"kind": "variable",
								"line": 29,
								"char": 21,
								"type": "string[ID_LENGTH]",
								"name": "m_prefix"
							},
							{
								"kind": "variable",
								"line": 30,
								"char": 10,
								"type": "string",
								"name": "m_suffix"
							},
							{
								"kind": "constructor",
								"line": 37,
								"endchar": 2,
								"char": 2,
								"type": "(RedisDatabase db, Replicate!(string, ID_LENGTH) name, string suffix = null)",
								"parameters": [
									{
										"type": "RedisDatabase",
										"name": "db"
									},
									{
										"type": "Replicate!(string, ID_LENGTH)",
										"name": "name"
									},
									{
										"default": "null",
										"type": "string",
										"name": "suffix"
									}
								],
								"name": "this",
								"endline": 45
							},
							{
								"kind": "function",
								"line": 47,
								"endchar": 65,
								"char": 33,
								"type": "inout @property inout(RedisDatabase)()",
								"name": "database",
								"endline": 47
							},
							{
								"kind": "function",
								"line": 49,
								"endchar": 50,
								"char": 4,
								"type": "T(IDS id)",
								"parameters": [
									{
										"type": "IDS",
										"name": "id"
									}
								],
								"name": "opIndex",
								"endline": 49
							},
							{
								"kind": "function",
								"line": 112,
								"endchar": 2,
								"char": 7,
								"type": "void(IDS id)",
								"parameters": [
									{
										"type": "IDS",
										"name": "id"
									}
								],
								"name": "remove",
								"comment": " Removes an ID along with the corresponding value.\n",
								"endline": 121
							},
							{
								"kind": "function",
								"line": 124,
								"endchar": 2,
								"char": 17,
								"type": "string(IDS ids)",
								"parameters": [
									{
										"type": "IDS",
										"name": "ids"
									}
								],
								"name": "getKey",
								"endline": 134
							}
						],
						"char": 1,
						"name": "RedisCollection"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"defaultValue": "RedisCollectionOptions.defaults",
						"deco": "E4vibe2db5redis6idioms22RedisCollectionOptions",
						"name": "OPTIONS"
					},
					{
						"kind": "value",
						"defaultValue": "1",
						"deco": "k",
						"name": "ID_LENGTH"
					}
				],
				"comment": "\n",
				"name": "RedisCollection"
			},
			{
				"kind": "enum",
				"line": 137,
				"members": [
					{
						"kind": "enum member",
						"line": 138,
						"value": "0",
						"char": 2,
						"name": "none"
					},
					{
						"kind": "enum member",
						"line": 139,
						"value": "1",
						"char": 2,
						"name": "supportIteration"
					},
					{
						"kind": "enum member",
						"line": 140,
						"value": "2",
						"char": 2,
						"name": "supportPaging"
					},
					{
						"kind": "enum member",
						"line": 141,
						"value": "1",
						"char": 2,
						"name": "defaults"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "RedisCollectionOptions"
			},
			{
				"kind": "template",
				"line": 154,
				"members": [
					{
						"kind": "alias",
						"line": 156,
						"char": 2,
						"type": "RedisCollection!(RedisHash, OPTIONS, ID_LENGTH)",
						"name": "RedisHashCollection"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "RedisCollectionOptions.defaults",
						"deco": "E4vibe2db5redis6idioms22RedisCollectionOptions",
						"name": "OPTIONS"
					},
					{
						"kind": "value",
						"defaultValue": "1",
						"deco": "k",
						"name": "ID_LENGTH"
					}
				],
				"comment": " Models a set of numbered hashes.\n\n\tThis structure is roughly equivalent to a $(D string[string][long]) and is\n\tcommonly used to store collections of objects, such as all users of a\n\tservice. For a strongly typed variant of this class, see\n\t$(D RedisObjectCollection).\n\n\tSee_also: $(D RedisObjectCollection)\n",
				"name": "RedisHashCollection"
			},
			{
				"kind": "template",
				"line": 166,
				"members": [
					{
						"kind": "alias",
						"line": 168,
						"char": 2,
						"type": "RedisCollection!(RedisObject!T, OPTIONS, ID_LENGTH)",
						"name": "RedisObjectCollection"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"defaultValue": "RedisCollectionOptions.defaults",
						"deco": "E4vibe2db5redis6idioms22RedisCollectionOptions",
						"name": "OPTIONS"
					},
					{
						"kind": "value",
						"defaultValue": "1",
						"deco": "k",
						"name": "ID_LENGTH"
					}
				],
				"comment": " Models a strongly typed set of numbered hashes.\n\n\tThis structure is roughly equivalent of a $(D T[long]).\n\n\tSee_also: $(D RedisHashCollection)\nExample:\n\n---\nstruct User {\n\tstring name;\n\tstring email;\n\tint age;\n\tstring password;\n}\n\nvoid test()\n{\n\tauto db = connectRedis(\"127.0.0.1\").getDatabase(0);\n\tdb.deleteAll();\n\n\tauto users = RedisObjectCollection!User(db, \"users\");\n\tassert(users.add(User(\"Tom\", \"tom@example.com\", 42, \"secret\")) == 0);\n\tassert(users.add(User(\"Peter\", \"peter@example.com\", 42, \"secret\")) == 1);\n\n\tauto peter = users[1];\n\tassert(peter.name == \"Peter\");\n}\n\n---\n",
				"name": "RedisObjectCollection"
			},
			{
				"kind": "template",
				"line": 201,
				"members": [
					{
						"kind": "struct",
						"line": 201,
						"members": [
							{
								"kind": "variable",
								"line": 203,
								"char": 20,
								"type": "RedisHash!string",
								"name": "m_hash"
							},
							{
								"kind": "constructor",
								"line": 206,
								"endchar": 2,
								"char": 2,
								"type": "(RedisDatabase db, string key)",
								"parameters": [
									{
										"type": "RedisDatabase",
										"name": "db"
									},
									{
										"type": "string",
										"name": "key"
									}
								],
								"name": "this",
								"endline": 209
							},
							{
								"kind": "constructor",
								"line": 211,
								"endchar": 2,
								"char": 2,
								"type": "(RedisHash!string hash)",
								"parameters": [
									{
										"type": "RedisHash!string",
										"name": "hash"
									}
								],
								"name": "this",
								"endline": 214
							},
							{
								"kind": "function",
								"line": 216,
								"endchar": 2,
								"char": 14,
								"type": "@property T()",
								"name": "get",
								"endline": 227
							},
							{
								"kind": "function",
								"line": 229,
								"endchar": 58,
								"char": 17,
								"type": "@property bool()",
								"name": "exists",
								"endline": 229
							},
							{
								"kind": "function",
								"line": 233,
								"endchar": 35,
								"char": 7,
								"type": "void()",
								"name": "remove",
								"endline": 233
							},
							{
								"kind": "function",
								"line": 235,
								"endchar": 2,
								"char": 7,
								"type": "void(T val)",
								"parameters": [
									{
										"type": "T",
										"name": "val"
									}
								],
								"name": "opAssign",
								"endline": 238
							},
							{
								"kind": "function",
								"line": 242,
								"storageClass": [
									"static"
								],
								"endchar": 2,
								"char": 24,
								"type": "string()",
								"name": "fields",
								"endline": 250
							},
							{
								"kind": "function",
								"line": 257,
								"storageClass": [
									"static"
								],
								"endchar": 2,
								"char": 44,
								"type": "string[T.tupleof.length * 2](T val)",
								"parameters": [
									{
										"type": "T",
										"name": "val"
									}
								],
								"name": "toKeysAndValues",
								"endline": 266
							},
							{
								"kind": "variable",
								"line": 268,
								"init": "fieldNames!T",
								"storageClass": [
									"enum"
								],
								"char": 15,
								"name": "keys"
							}
						],
						"char": 1,
						"name": "RedisObject"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Models a single strongly typed object.\n\n\tThis structure is rougly equivalent to a value of type $(D T). The\n\tunderlying data is represented as a Redis hash. This means that only\n\tprimitive fields are supported for $(D T).\n",
				"name": "RedisObject"
			},
			{
				"kind": "template",
				"line": 271,
				"members": [
					{
						"kind": "struct",
						"line": 271,
						"members": [
							{
								"kind": "variable",
								"line": 273,
								"char": 20,
								"type": "RedisHash!string",
								"name": "m_hash"
							},
							{
								"kind": "variable",
								"line": 274,
								"char": 10,
								"type": "string",
								"name": "m_field"
							},
							{
								"kind": "constructor",
								"line": 277,
								"endchar": 2,
								"char": 2,
								"type": "(RedisHash!string hash, string field)",
								"parameters": [
									{
										"type": "RedisHash!string",
										"name": "hash"
									},
									{
										"type": "string",
										"name": "field"
									}
								],
								"name": "this",
								"endline": 281
							},
							{
								"kind": "function",
								"line": 283,
								"endchar": 91,
								"char": 14,
								"type": "@property T()",
								"name": "get",
								"endline": 283
							},
							{
								"kind": "function",
								"line": 287,
								"endchar": 81,
								"char": 7,
								"type": "void(T val)",
								"parameters": [
									{
										"type": "T",
										"name": "val"
									}
								],
								"name": "opAssign",
								"endline": 287
							},
							{
								"kind": "template",
								"line": 289,
								"constraint": "op == \"++\"",
								"members": [
									{
										"kind": "function",
										"line": 289,
										"endchar": 92,
										"char": 7,
										"type": "void()",
										"name": "opUnary",
										"endline": 289
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"name": "opUnary"
							},
							{
								"kind": "template",
								"line": 290,
								"constraint": "op == \"--\"",
								"members": [
									{
										"kind": "function",
										"line": 290,
										"endchar": 93,
										"char": 7,
										"type": "void()",
										"name": "opUnary",
										"endline": 290
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"name": "opUnary"
							},
							{
								"kind": "template",
								"line": 292,
								"constraint": "op == \"+\"",
								"members": [
									{
										"kind": "function",
										"line": 292,
										"endchar": 105,
										"char": 7,
										"type": "void(long val)",
										"parameters": [
											{
												"deco": "l",
												"name": "val"
											}
										],
										"name": "opOpAssign",
										"endline": 292
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"name": "opOpAssign"
							},
							{
								"kind": "template",
								"line": 293,
								"constraint": "op == \"-\"",
								"members": [
									{
										"kind": "function",
										"line": 293,
										"endchar": 106,
										"char": 7,
										"type": "void(long val)",
										"parameters": [
											{
												"deco": "l",
												"name": "val"
											}
										],
										"name": "opOpAssign",
										"endline": 293
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"name": "opOpAssign"
							},
							{
								"kind": "template",
								"line": 294,
								"constraint": "op == \"+\"",
								"members": [
									{
										"kind": "function",
										"line": 294,
										"endchar": 107,
										"char": 7,
										"type": "void(double val)",
										"parameters": [
											{
												"deco": "d",
												"name": "val"
											}
										],
										"name": "opOpAssign",
										"endline": 294
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"name": "opOpAssign"
							},
							{
								"kind": "template",
								"line": 295,
								"constraint": "op == \"-\"",
								"members": [
									{
										"kind": "function",
										"line": 295,
										"endchar": 108,
										"char": 7,
										"type": "void(double val)",
										"parameters": [
											{
												"deco": "d",
												"name": "val"
											}
										],
										"name": "opOpAssign",
										"endline": 295
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"name": "opOpAssign"
							}
						],
						"char": 1,
						"name": "RedisObjectField"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"name": "RedisObjectField"
			},
			{
				"kind": "template",
				"line": 303,
				"members": [
					{
						"kind": "alias",
						"line": 305,
						"char": 2,
						"type": "RedisCollection!(RedisSet!T, OPTIONS, ID_LENGTH)",
						"name": "RedisSetCollection"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"defaultValue": "RedisCollectionOptions.defaults",
						"deco": "E4vibe2db5redis6idioms22RedisCollectionOptions",
						"name": "OPTIONS"
					},
					{
						"kind": "value",
						"defaultValue": "1",
						"deco": "k",
						"name": "ID_LENGTH"
					}
				],
				"comment": " Models a strongly typed numbered set of values.\n\n\nExample:\n\n---\nvoid test()\n{\n\tauto db = connectRedis(\"127.0.0.1\").getDatabase(0);\n\tauto user_groups = RedisSetCollection!(string, RedisCollectionOptions.none)(db, \"user_groups\");\n\n\t// add some groups for user with ID 0\n\tuser_groups[0].insert(\"cooking\");\n\tuser_groups[0].insert(\"hiking\");\n\t// add some groups for user with ID 1\n\tuser_groups[1].insert(\"coding\");\n\n\tassert(user_groups[0].contains(\"hiking\"));\n\tassert(!user_groups[0].contains(\"coding\"));\n\tassert(user_groups[1].contains(\"coding\"));\n\n\tuser_groups[0].remove(\"hiking\");\n\tassert(!user_groups[0].contains(\"hiking\"));\n}\n\n---\n",
				"name": "RedisSetCollection"
			},
			{
				"kind": "template",
				"line": 335,
				"members": [
					{
						"kind": "alias",
						"line": 337,
						"char": 2,
						"type": "RedisCollection!(RedisList!T, OPTIONS, ID_LENGTH)",
						"name": "RedisListCollection"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"defaultValue": "RedisCollectionOptions.defaults",
						"deco": "E4vibe2db5redis6idioms22RedisCollectionOptions",
						"name": "OPTIONS"
					},
					{
						"kind": "value",
						"defaultValue": "1",
						"deco": "k",
						"name": "ID_LENGTH"
					}
				],
				"comment": " Models a strongly typed numbered set of values.\n\n\n",
				"name": "RedisListCollection"
			},
			{
				"kind": "template",
				"line": 345,
				"members": [
					{
						"kind": "alias",
						"line": 347,
						"char": 2,
						"type": "RedisCollection!(RedisString!T, OPTIONS, ID_LENGTH)",
						"name": "RedisStringCollection"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"defaultValue": "RedisCollectionOptions.defaults",
						"deco": "E4vibe2db5redis6idioms22RedisCollectionOptions",
						"name": "OPTIONS"
					},
					{
						"kind": "value",
						"defaultValue": "1",
						"deco": "k",
						"name": "ID_LENGTH"
					}
				],
				"comment": " Models a strongly typed numbered set of values.\n\n\n",
				"name": "RedisStringCollection"
			},
			{
				"kind": "struct",
				"line": 352,
				"members": [
					{
						"kind": "constructor",
						"line": 359,
						"deco": "FNcS4vibe2db5redis5redis13RedisDatabaseAyaZS4vibe2db5redis6idioms9RedisLock",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "S4vibe2db5redis5redis13RedisDatabase",
								"name": "db"
							},
							{
								"deco": "Aya",
								"name": "lock_key"
							}
						],
						"name": "this",
						"originalType": "ref (RedisDatabase db, string lock_key)",
						"endline": 369
					},
					{
						"kind": "function",
						"line": 371,
						"deco": "FMDFZvZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "DFZv",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"name": "performLocked",
						"endline": 384
					}
				],
				"char": 1,
				"name": "RedisLock"
			},
			{
				"kind": "template",
				"line": 389,
				"members": [
					{
						"kind": "struct",
						"line": 389,
						"members": [
							{
								"kind": "variable",
								"line": 391,
								"char": 4,
								"type": "T",
								"name": "value"
							},
							{
								"kind": "function",
								"line": 395,
								"storageClass": [
									"static"
								],
								"endchar": 90,
								"char": 21,
								"type": "JsonEncoded(string str)",
								"parameters": [
									{
										"type": "string",
										"name": "str"
									}
								],
								"name": "fromString",
								"endline": 395
							},
							{
								"kind": "function",
								"line": 396,
								"endchar": 59,
								"char": 9,
								"type": "string()",
								"name": "toString",
								"endline": 396
							}
						],
						"char": 1,
						"name": "JsonEncoded"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"name": "JsonEncoded"
			},
			{
				"kind": "template",
				"line": 400,
				"members": [
					{
						"kind": "function",
						"line": 400,
						"endchar": 70,
						"char": 15,
						"type": "JsonEncoded!T(T value)",
						"parameters": [
							{
								"type": "T",
								"name": "value"
							}
						],
						"name": "jsonEncoded",
						"endline": 400
					}
				],
				"char": 15,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"name": "jsonEncoded"
			},
			{
				"kind": "template",
				"line": 403,
				"members": [
					{
						"kind": "struct",
						"line": 403,
						"members": [
							{
								"kind": "variable",
								"line": 405,
								"char": 5,
								"type": "T",
								"name": "m_values"
							},
							{
								"kind": "constructor",
								"line": 408,
								"endchar": 38,
								"char": 2,
								"type": "(T values)",
								"parameters": [
									{
										"type": "T",
										"name": "values"
									}
								],
								"name": "this",
								"endline": 408
							},
							{
								"kind": "function",
								"line": 410,
								"endchar": 2,
								"char": 7,
								"type": "void(void delegate(string) sink)",
								"parameters": [
									{
										"type": "void delegate(string)",
										"name": "sink"
									}
								],
								"name": "toString",
								"endline": 414
							}
						],
						"char": 1,
						"name": "LazyString"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"name": "LazyString"
			},
			{
				"kind": "template",
				"line": 427,
				"members": [
					{
						"kind": "function",
						"line": 427,
						"endchar": 72,
						"char": 17,
						"type": "RedisStripped!T(in T val)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "T",
								"name": "val"
							}
						],
						"name": "redisStrip",
						"endline": 427
					}
				],
				"char": 17,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tStrips all non-Redis fields from a struct.\n\n\tThe returned struct will contain only fiels that can be converted using\n\t$(D toRedis) and that have names different than \"id\" or \"_id\".\n\n\tTo reconstruct the full struct type, use the $(D RedisStripped.unstrip)\n\tmethod.\n",
				"name": "redisStrip"
			},
			{
				"kind": "template",
				"line": 434,
				"members": [
					{
						"kind": "struct",
						"line": 434,
						"members": [
							{
								"kind": "constructor",
								"line": 437,
								"endchar": 97,
								"char": 2,
								"type": "(in T src)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "T",
										"name": "src"
									}
								],
								"name": "this",
								"endline": 437
							},
							{
								"kind": "function",
								"line": 444,
								"endchar": 2,
								"char": 4,
								"type": "T(StrippedMembers stripped_members)",
								"parameters": [
									{
										"type": "StrippedMembers",
										"name": "stripped_members"
									}
								],
								"name": "unstrip",
								"comment": " Reconstructs the full (unstripped) struct value.\n\n\t\tThe parameters for this method are all stripped fields in the order in\n\t\twhich they appear in the original struct definition.\n",
								"endline": 449
							},
							{
								"kind": "function",
								"line": 451,
								"endchar": 2,
								"char": 15,
								"type": "void(ref T dst, UnstrippedMembers values)",
								"parameters": [
									{
										"storageClass": [
											"ref"
										],
										"type": "T",
										"name": "dst"
									},
									{
										"type": "UnstrippedMembers",
										"name": "values"
									}
								],
								"name": "populateRedisFields",
								"endline": 455
							},
							{
								"kind": "function",
								"line": 457,
								"endchar": 2,
								"char": 15,
								"type": "void(ref T dst, StrippedMembers values)",
								"parameters": [
									{
										"storageClass": [
											"ref"
										],
										"type": "T",
										"name": "dst"
									},
									{
										"type": "StrippedMembers",
										"name": "values"
									}
								],
								"name": "populateNonRedisFields",
								"endline": 461
							},
							{
								"kind": "alias",
								"line": 466,
								"char": 2,
								"type": "FilterToType!(isNonRedisType, T.tupleof)",
								"name": "StrippedMembers"
							},
							{
								"kind": "alias",
								"line": 467,
								"char": 2,
								"type": "FilterToType!(isRedisType, T.tupleof)",
								"name": "UnstrippedMembers"
							},
							{
								"kind": "alias",
								"line": 468,
								"char": 2,
								"type": "indicesOf!(isNonRedisType, T.tupleof)",
								"name": "strippedMemberIndices"
							},
							{
								"kind": "alias",
								"line": 469,
								"char": 2,
								"type": "indicesOf!(isRedisType, T.tupleof)",
								"name": "unstrippedMemberIndices"
							},
							{
								"kind": "template",
								"line": 475,
								"members": [
									{
										"kind": "template",
										"line": 476,
										"members": [],
										"char": 3,
										"parameters": [
											{
												"kind": "value",
												"type": "size_t",
												"name": "i"
											}
										],
										"name": "impl"
									},
									{
										"kind": "variable",
										"line": 483,
										"init": "impl!0",
										"storageClass": [
											"enum"
										],
										"char": 8,
										"name": "membersString"
									}
								],
								"char": 2,
								"parameters": [],
								"name": "membersString"
							}
						],
						"char": 1,
						"name": "RedisStripped"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tRepresents the stripped type of a struct.\n\n\tSee_also: $(D redisStrip)\n",
				"name": "RedisStripped"
			}
		],
		"name": "vibe.db.redis.idioms",
		"comment": "\tType safe implementations of common Redis storage idioms.\n\n\tNote that the API is still subject to change!\n\n\tCopyright: © 2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\db\\redis\\redis.d",
		"members": [
			{
				"kind": "import",
				"line": 10,
				"char": 15,
				"name": "vibe.core.net"
			},
			{
				"kind": "function",
				"line": 29,
				"deco": "FAyatZC4vibe2db5redis5redis11RedisClient",
				"endchar": 1,
				"char": 13,
				"parameters": [
					{
						"deco": "Aya",
						"name": "host"
					},
					{
						"deco": "t",
						"default": "cast(ushort)6379u",
						"name": "port"
					}
				],
				"name": "connectRedis",
				"comment": "\tReturns a RedisClient that can be used to communicate to the specified database server.\n",
				"originalType": "RedisClient(string host, ushort port = 6379)",
				"endline": 32
			},
			{
				"kind": "class",
				"line": 37,
				"members": [
					{
						"kind": "constructor",
						"line": 45,
						"deco": "FAyatZC4vibe2db5redis5redis11RedisClient",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"default": "\"127.0.0.1\"",
								"name": "host"
							},
							{
								"deco": "t",
								"default": "cast(ushort)6379u",
								"name": "port"
							}
						],
						"name": "this",
						"originalType": "(string host = \"127.0.0.1\", ushort port = 6379)",
						"endline": 50
					},
					{
						"kind": "function",
						"line": 53,
						"deco": "FNdZAya",
						"endchar": 2,
						"char": 19,
						"name": "redisVersion",
						"comment": "Returns Redis version\n",
						"endline": 72
					},
					{
						"kind": "function",
						"line": 76,
						"deco": "FlZS4vibe2db5redis5redis13RedisDatabase",
						"endchar": 77,
						"char": 16,
						"parameters": [
							{
								"deco": "l",
								"name": "index"
							}
						],
						"name": "getDatabase",
						"comment": " Returns a handle to the given database.\n",
						"endline": 76
					},
					{
						"kind": "function",
						"line": 80,
						"deco": "FZS4vibe5utils6memory64__T11FreeListRefTC4vibe2db5redis5redis19RedisSubscriberImplVbi1Z11FreeListRef",
						"endchar": 2,
						"char": 18,
						"name": "createSubscriber",
						"comment": " Creates a RedisSubscriber instance for launching a pubsub listener\n",
						"originalType": "RedisSubscriber()",
						"endline": 82
					},
					{
						"kind": "function",
						"line": 89,
						"deco": "FAyaZv",
						"endchar": 58,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "password"
							}
						],
						"name": "auth",
						"comment": "Authenticate to the server\n",
						"endline": 89
					},
					{
						"kind": "template",
						"line": 91,
						"constraint": "isValidRedisValueReturn!T && isValidRedisValueType!U",
						"members": [
							{
								"kind": "function",
								"line": 91,
								"endchar": 114,
								"char": 4,
								"type": "T(U data)",
								"parameters": [
									{
										"type": "U",
										"name": "data"
									}
								],
								"name": "echo",
								"endline": 91
							}
						],
						"char": 4,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							},
							{
								"kind": "type",
								"name": "U"
							}
						],
						"comment": "Echo the given string\n",
						"name": "echo"
					},
					{
						"kind": "function",
						"line": 93,
						"deco": "FZv",
						"endchar": 33,
						"char": 7,
						"name": "ping",
						"comment": "Ping the server\n",
						"endline": 93
					},
					{
						"kind": "function",
						"line": 95,
						"deco": "FZv",
						"endchar": 33,
						"char": 7,
						"name": "quit",
						"comment": "Close the connection\n",
						"endline": 95
					},
					{
						"kind": "template",
						"line": 105,
						"constraint": "isValidRedisValueReturn!T",
						"members": [
							{
								"kind": "function",
								"line": 105,
								"endchar": 110,
								"char": 4,
								"type": "T(string parameter)",
								"parameters": [
									{
										"type": "string",
										"name": "parameter"
									}
								],
								"name": "getConfig",
								"endline": 105
							}
						],
						"char": 4,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Get the value of a configuration parameter\n",
						"name": "getConfig"
					},
					{
						"kind": "template",
						"line": 107,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 107,
								"endchar": 118,
								"char": 7,
								"type": "void(string parameter, T value)",
								"parameters": [
									{
										"type": "string",
										"name": "parameter"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "setConfig",
								"endline": 107
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Set a configuration parameter to the given value\n",
						"name": "setConfig"
					},
					{
						"kind": "function",
						"line": 109,
						"deco": "FZv",
						"endchar": 56,
						"char": 7,
						"name": "configResetStat",
						"comment": "Reset the stats returned by INFO\n",
						"endline": 109
					},
					{
						"kind": "function",
						"line": 118,
						"deco": "FZv",
						"endchar": 42,
						"char": 7,
						"name": "deleteAll",
						"comment": " Deletes all keys from all databases.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/flushall, FLUSHALL)\n",
						"endline": 118
					},
					{
						"kind": "alias",
						"line": 120,
						"char": 2,
						"name": "flushAll",
						"comment": "Scheduled for deprecation, use $(D deleteAll) instead.\n"
					},
					{
						"kind": "function",
						"line": 123,
						"deco": "FZv",
						"endchar": 39,
						"char": 7,
						"name": "flushDB",
						"comment": "Scheduled for deprecation, use $(D RedisDatabase.deleteAll) instead.\n",
						"endline": 123
					},
					{
						"kind": "function",
						"line": 125,
						"deco": "FZAya",
						"endchar": 49,
						"char": 9,
						"name": "info",
						"comment": "Get information and statistics about the server\n",
						"endline": 125
					},
					{
						"kind": "function",
						"line": 127,
						"deco": "FZl",
						"endchar": 53,
						"char": 7,
						"name": "lastSave",
						"comment": "Get the UNIX time stamp of the last successful save to disk\n",
						"endline": 127
					},
					{
						"kind": "function",
						"line": 130,
						"deco": "FZv",
						"endchar": 33,
						"char": 7,
						"name": "save",
						"comment": "Synchronously save the dataset to disk\n",
						"endline": 130
					},
					{
						"kind": "function",
						"line": 132,
						"deco": "FZv",
						"endchar": 41,
						"char": 7,
						"name": "shutdown",
						"comment": "Synchronously save the dataset to disk and then shut down the server\n",
						"endline": 132
					},
					{
						"kind": "function",
						"line": 134,
						"deco": "FAyatZv",
						"endchar": 75,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "host"
							},
							{
								"deco": "t",
								"name": "port"
							}
						],
						"name": "slaveOf",
						"comment": "Make the server a slave of another instance, or promote it as master\n",
						"endline": 134
					}
				],
				"char": 7,
				"name": "RedisClient",
				"comment": "\tA redis client with connection pooling.\n"
			},
			{
				"kind": "struct",
				"line": 174,
				"members": [
					{
						"kind": "function",
						"line": 188,
						"deco": "NgFNdZNgC4vibe2db5redis5redis11RedisClient",
						"endchar": 65,
						"char": 31,
						"name": "client",
						"comment": " The Redis client with which the database is accessed.\n",
						"endline": 188
					},
					{
						"kind": "function",
						"line": 192,
						"deco": "xFNdZl",
						"endchar": 49,
						"char": 17,
						"name": "index",
						"comment": " Index of the database.\n",
						"endline": 192
					},
					{
						"kind": "function",
						"line": 198,
						"deco": "FZv",
						"endchar": 46,
						"char": 7,
						"name": "deleteAll",
						"comment": " Deletes all keys of the database.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/flushdb, FLUSHDB)\n",
						"endline": 198
					},
					{
						"kind": "function",
						"line": 200,
						"deco": "FMAAyaXl",
						"endchar": 71,
						"char": 7,
						"parameters": [
							{
								"deco": "AAya",
								"storageClass": [
									"scope"
								],
								"name": "keys"
							}
						],
						"name": "del",
						"comment": "Delete a key\n",
						"endline": 200
					},
					{
						"kind": "function",
						"line": 202,
						"deco": "FAyaZb",
						"endchar": 64,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"name": "exists",
						"comment": "Determine if a key exists\n",
						"endline": 202
					},
					{
						"kind": "function",
						"line": 204,
						"deco": "FAyalZb",
						"endchar": 87,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "l",
								"name": "seconds"
							}
						],
						"name": "expire",
						"comment": "Set a key's time to live in seconds\n",
						"endline": 204
					},
					{
						"kind": "function",
						"line": 206,
						"deco": "FAyaS4core4time8DurationZb",
						"endchar": 106,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							}
						],
						"name": "expire",
						"comment": "Set a key's time to live with D notation. E.g. $(D 5.minutes) for 60 * 5 seconds.\n",
						"endline": 206
					},
					{
						"kind": "function",
						"line": 208,
						"deco": "FAyalZb",
						"endchar": 95,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "l",
								"name": "timestamp"
							}
						],
						"name": "expireAt",
						"comment": "Set the expiration for a key as a UNIX timestamp\n",
						"endline": 208
					},
					{
						"kind": "template",
						"line": 210,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 210,
								"endchar": 126,
								"char": 15,
								"type": "RedisReply!T(string pattern)",
								"parameters": [
									{
										"type": "string",
										"name": "pattern"
									}
								],
								"name": "keys",
								"endline": 210
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Find all keys matching the given glob-style pattern (Supported wildcards: *, ?, [ABC])\n",
						"name": "keys"
					},
					{
						"kind": "function",
						"line": 212,
						"deco": "FAyalZb",
						"endchar": 73,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "l",
								"name": "db"
							}
						],
						"name": "move",
						"comment": "Move a key to another database\n",
						"endline": 212
					},
					{
						"kind": "function",
						"line": 214,
						"deco": "FAyaZb",
						"endchar": 66,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"name": "persist",
						"comment": "Remove the expiration from a key\n",
						"endline": 214
					},
					{
						"kind": "function",
						"line": 217,
						"deco": "FZAya",
						"endchar": 59,
						"char": 9,
						"name": "randomKey",
						"comment": "Return a random key from the keyspace\n",
						"endline": 217
					},
					{
						"kind": "function",
						"line": 219,
						"deco": "FAyaAyaZv",
						"endchar": 75,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "Aya",
								"name": "newkey"
							}
						],
						"name": "rename",
						"comment": "Rename a key\n",
						"endline": 219
					},
					{
						"kind": "function",
						"line": 221,
						"deco": "FAyaAyaZb",
						"endchar": 91,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "Aya",
								"name": "newkey"
							}
						],
						"name": "renameNX",
						"comment": "Rename a key, only if the new key does not exist\n",
						"endline": 221
					},
					{
						"kind": "function",
						"line": 224,
						"deco": "FAyaZl",
						"endchar": 58,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"name": "ttl",
						"comment": "Get the time to live for a key\n",
						"endline": 224
					},
					{
						"kind": "function",
						"line": 226,
						"deco": "FAyaZl",
						"endchar": 60,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"name": "pttl",
						"comment": "Get the time to live for a key in milliseconds\n",
						"endline": 226
					},
					{
						"kind": "function",
						"line": 228,
						"deco": "FAyaZAya",
						"endchar": 64,
						"char": 9,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"name": "type",
						"comment": "Determine the type stored at key (string, list, set, zset and hash.)\n",
						"endline": 228
					},
					{
						"kind": "template",
						"line": 235,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 235,
								"endchar": 113,
								"char": 7,
								"type": "long(string key, T suffix)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "suffix"
									}
								],
								"name": "append",
								"endline": 235
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Append a value to a key\n",
						"name": "append"
					},
					{
						"kind": "function",
						"line": 237,
						"deco": "FAyalZl",
						"endchar": 126,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "l",
								"default": "1L",
								"name": "value"
							}
						],
						"name": "decr",
						"comment": "Decrement the integer value of a key by one\n",
						"originalType": "long(string key, long value = 1)",
						"endline": 237
					},
					{
						"kind": "template",
						"line": 239,
						"constraint": "isValidRedisValueReturn!T",
						"members": [
							{
								"kind": "function",
								"line": 239,
								"endchar": 94,
								"char": 4,
								"type": "T(string key)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"name": "get",
								"endline": 239
							}
						],
						"char": 4,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Get the value of a key\n",
						"name": "get"
					},
					{
						"kind": "function",
						"line": 241,
						"deco": "FAyalZb",
						"endchar": 85,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "l",
								"name": "offset"
							}
						],
						"name": "getBit",
						"comment": "Returns the bit value at offset in the string value stored at key\n",
						"endline": 241
					},
					{
						"kind": "template",
						"line": 243,
						"constraint": "isValidRedisValueReturn!T",
						"members": [
							{
								"kind": "function",
								"line": 243,
								"endchar": 138,
								"char": 4,
								"type": "T(string key, long start, long end)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "l",
										"name": "start"
									},
									{
										"deco": "l",
										"name": "end"
									}
								],
								"name": "getRange",
								"endline": 243
							}
						],
						"char": 4,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Get a substring of the string stored at a key\n",
						"name": "getRange"
					},
					{
						"kind": "template",
						"line": 245,
						"constraint": "isValidRedisValueReturn!T && isValidRedisValueType!U",
						"members": [
							{
								"kind": "function",
								"line": 245,
								"endchar": 146,
								"char": 4,
								"type": "T(string key, U value)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "U",
										"name": "value"
									}
								],
								"name": "getSet",
								"endline": 245
							}
						],
						"char": 4,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							},
							{
								"kind": "type",
								"name": "U"
							}
						],
						"comment": "Set the string value of a key and return its old value\n",
						"name": "getSet"
					},
					{
						"kind": "function",
						"line": 247,
						"deco": "FAyalZl",
						"endchar": 126,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "l",
								"default": "1L",
								"name": "value"
							}
						],
						"name": "incr",
						"comment": "Increment the integer value of a key\n",
						"originalType": "long(string key, long value = 1)",
						"endline": 247
					},
					{
						"kind": "function",
						"line": 249,
						"deco": "FAyadZl",
						"endchar": 88,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "d",
								"name": "value"
							}
						],
						"name": "incr",
						"comment": "Increment the real number value of a key\n",
						"endline": 249
					},
					{
						"kind": "template",
						"line": 251,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 251,
								"endchar": 122,
								"char": 15,
								"type": "RedisReply!T(string[] keys)",
								"parameters": [
									{
										"type": "string[]",
										"name": "keys"
									}
								],
								"name": "mget",
								"endline": 251
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Get the values of all the given keys\n",
						"name": "mget"
					},
					{
						"kind": "template",
						"line": 254,
						"members": [
							{
								"kind": "function",
								"line": 254,
								"endchar": 2,
								"char": 7,
								"type": "void(ARGS args)",
								"parameters": [
									{
										"type": "ARGS",
										"name": "args"
									}
								],
								"name": "mset",
								"endline": 259
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"comment": "Set multiple keys to multiple values\n",
						"name": "mset"
					},
					{
						"kind": "template",
						"line": 262,
						"members": [
							{
								"kind": "function",
								"line": 262,
								"endchar": 2,
								"char": 7,
								"type": "bool(ARGS args)",
								"parameters": [
									{
										"type": "ARGS",
										"name": "args"
									}
								],
								"name": "msetNX",
								"endline": 266
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"comment": "Set multiple keys to multiple values, only if none of the keys exist\n",
						"name": "msetNX"
					},
					{
						"kind": "template",
						"line": 269,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 269,
								"endchar": 93,
								"char": 7,
								"type": "void(string key, T value)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "set",
								"endline": 269
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Set the string value of a key\n",
						"name": "set"
					},
					{
						"kind": "template",
						"line": 271,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 271,
								"endchar": 109,
								"char": 7,
								"type": "bool(string key, T value)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "setNX",
								"endline": 271
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Set the value of a key, only if the key does not exist\n",
						"name": "setNX"
					},
					{
						"kind": "template",
						"line": 273,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 273,
								"endchar": 123,
								"char": 7,
								"type": "bool(string key, T value)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "setXX",
								"endline": 273
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Set the value of a key, only if the key already exists\n",
						"name": "setXX"
					},
					{
						"kind": "template",
						"line": 275,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 275,
								"endchar": 178,
								"char": 7,
								"type": "bool(string key, T value, Duration expire_time)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "value"
									},
									{
										"type": "Duration",
										"name": "expire_time"
									}
								],
								"name": "setNX",
								"endline": 275
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Set the value of a key, only if the key does not exist, and also set the specified expire time using D notation, e.g. $(D 5.minutes) for 5 minutes.\n",
						"name": "setNX"
					},
					{
						"kind": "template",
						"line": 277,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 277,
								"endchar": 178,
								"char": 7,
								"type": "bool(string key, T value, Duration expire_time)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "value"
									},
									{
										"type": "Duration",
										"name": "expire_time"
									}
								],
								"name": "setXX",
								"endline": 277
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Set the value of a key, only if the key already exists, and also set the specified expire time using D notation, e.g. $(D 5.minutes) for 5 minutes.\n",
						"name": "setXX"
					},
					{
						"kind": "function",
						"line": 279,
						"deco": "FAyalbZb",
						"endchar": 116,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "l",
								"name": "offset"
							},
							{
								"deco": "b",
								"name": "value"
							}
						],
						"name": "setBit",
						"comment": "Sets or clears the bit at offset in the string value stored at key\n",
						"endline": 279
					},
					{
						"kind": "template",
						"line": 281,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 281,
								"endchar": 120,
								"char": 7,
								"type": "void(string key, long seconds, T value)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "l",
										"name": "seconds"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "setEX",
								"endline": 281
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Set the value and expiration of a key\n",
						"name": "setEX"
					},
					{
						"kind": "template",
						"line": 283,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 283,
								"endchar": 136,
								"char": 7,
								"type": "long(string key, long offset, T value)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "l",
										"name": "offset"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "setRange",
								"endline": 283
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Overwrite part of a string at key starting at the specified offset\n",
						"name": "setRange"
					},
					{
						"kind": "function",
						"line": 285,
						"deco": "FAyaZl",
						"endchar": 64,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"name": "strlen",
						"comment": "Get the length of the value stored in a key\n",
						"endline": 285
					},
					{
						"kind": "function",
						"line": 291,
						"deco": "FAyaMAAyaXl",
						"endchar": 94,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "AAya",
								"storageClass": [
									"scope"
								],
								"name": "fields"
							}
						],
						"name": "hdel",
						"comment": "Delete one or more hash fields\n",
						"endline": 291
					},
					{
						"kind": "function",
						"line": 293,
						"deco": "FAyaAyaZb",
						"endchar": 87,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "Aya",
								"name": "field"
							}
						],
						"name": "hexists",
						"comment": "Determine if a hash field exists\n",
						"endline": 293
					},
					{
						"kind": "template",
						"line": 295,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 295,
								"endchar": 116,
								"char": 7,
								"type": "void(string key, string field, T value)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "string",
										"name": "field"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "hset",
								"endline": 295
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Set multiple hash fields to multiple values\n",
						"name": "hset"
					},
					{
						"kind": "template",
						"line": 297,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 297,
								"endchar": 132,
								"char": 7,
								"type": "bool(string key, string field, T value)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "string",
										"name": "field"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "hsetNX",
								"endline": 297
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Set the value of a hash field, only if the field does not exist\n",
						"name": "hsetNX"
					},
					{
						"kind": "template",
						"line": 299,
						"constraint": "isValidRedisValueReturn!T",
						"members": [
							{
								"kind": "function",
								"line": 299,
								"endchar": 117,
								"char": 4,
								"type": "T(string key, string field)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "string",
										"name": "field"
									}
								],
								"name": "hget",
								"endline": 299
							}
						],
						"char": 4,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Get the value of a hash field.\n",
						"name": "hget"
					},
					{
						"kind": "template",
						"line": 301,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 301,
								"endchar": 124,
								"char": 15,
								"type": "RedisReply!T(string key)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"name": "hgetAll",
								"endline": 301
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Get all the fields and values in a hash\n",
						"name": "hgetAll"
					},
					{
						"kind": "function",
						"line": 303,
						"deco": "FAyaAyalZl",
						"endchar": 106,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "Aya",
								"name": "field"
							},
							{
								"deco": "l",
								"default": "1L",
								"name": "value"
							}
						],
						"name": "hincr",
						"comment": "Increment the integer value of a hash field\n",
						"originalType": "long(string key, string field, long value = 1)",
						"endline": 303
					},
					{
						"kind": "function",
						"line": 305,
						"deco": "FAyaAyadZl",
						"endchar": 111,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "Aya",
								"name": "field"
							},
							{
								"deco": "d",
								"name": "value"
							}
						],
						"name": "hincr",
						"comment": "Increment the real number value of a hash field\n",
						"endline": 305
					},
					{
						"kind": "template",
						"line": 307,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 307,
								"endchar": 120,
								"char": 15,
								"type": "RedisReply!T(string key)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"name": "hkeys",
								"endline": 307
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Get all the fields in a hash\n",
						"name": "hkeys"
					},
					{
						"kind": "function",
						"line": 309,
						"deco": "FAyaZl",
						"endchar": 60,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"name": "hlen",
						"comment": "Get the number of fields in a hash\n",
						"endline": 309
					},
					{
						"kind": "template",
						"line": 311,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 311,
								"endchar": 154,
								"char": 15,
								"type": "RedisReply!T(string key, scope string[] fields...)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"storageClass": [
											"scope"
										],
										"type": "string[]",
										"name": "fields"
									}
								],
								"name": "hmget",
								"endline": 311
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Get the values of all the given hash fields\n",
						"name": "hmget"
					},
					{
						"kind": "template",
						"line": 313,
						"members": [
							{
								"kind": "function",
								"line": 313,
								"endchar": 76,
								"char": 7,
								"type": "void(string key, ARGS args)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "ARGS",
										"name": "args"
									}
								],
								"name": "hmset",
								"endline": 313
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"comment": "Set multiple hash fields to multiple values\n",
						"name": "hmset"
					},
					{
						"kind": "template",
						"line": 316,
						"members": [
							{
								"kind": "function",
								"line": 316,
								"storageClass": [
									"deprecated"
								],
								"endchar": 101,
								"char": 18,
								"type": "bool(string key, ARGS args)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "ARGS",
										"name": "args"
									}
								],
								"name": "hmsetNX",
								"endline": 316
							}
						],
						"char": 18,
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"comment": "This command does not exist in redis and must be implemented at a higher level\n",
						"name": "hmsetNX"
					},
					{
						"kind": "template",
						"line": 319,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 319,
								"endchar": 120,
								"char": 15,
								"type": "RedisReply!T(string key)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"name": "hvals",
								"endline": 319
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Get all the values in a hash\n",
						"name": "hvals"
					},
					{
						"kind": "template",
						"line": 325,
						"constraint": "isValidRedisValueReturn!T",
						"members": [
							{
								"kind": "function",
								"line": 325,
								"endchar": 119,
								"char": 4,
								"type": "T(string key, long index)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "l",
										"name": "index"
									}
								],
								"name": "lindex",
								"endline": 325
							}
						],
						"char": 4,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Get an element from a list by its index\n",
						"name": "lindex"
					},
					{
						"kind": "template",
						"line": 327,
						"constraint": "isValidRedisValueType!T1 && isValidRedisValueType!T2",
						"members": [
							{
								"kind": "function",
								"line": 327,
								"endchar": 181,
								"char": 7,
								"type": "long(string key, T1 pivot, T2 value)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T1",
										"name": "pivot"
									},
									{
										"type": "T2",
										"name": "value"
									}
								],
								"name": "linsertBefore",
								"endline": 327
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T1"
							},
							{
								"kind": "type",
								"name": "T2"
							}
						],
						"comment": "Insert value in the list stored at key before the reference value pivot.\n",
						"name": "linsertBefore"
					},
					{
						"kind": "template",
						"line": 329,
						"constraint": "isValidRedisValueType!T1 && isValidRedisValueType!T2",
						"members": [
							{
								"kind": "function",
								"line": 329,
								"endchar": 179,
								"char": 7,
								"type": "long(string key, T1 pivot, T2 value)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T1",
										"name": "pivot"
									},
									{
										"type": "T2",
										"name": "value"
									}
								],
								"name": "linsertAfter",
								"endline": 329
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T1"
							},
							{
								"kind": "type",
								"name": "T2"
							}
						],
						"comment": "Insert value in the list stored at key after the reference value pivot.\n",
						"name": "linsertAfter"
					},
					{
						"kind": "function",
						"line": 331,
						"deco": "FAyaZl",
						"endchar": 60,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"name": "llen",
						"comment": "Returns the length of the list stored at key. If key does not exist, it is interpreted as an empty list and 0 is returned.\n",
						"endline": 331
					},
					{
						"kind": "template",
						"line": 333,
						"members": [
							{
								"kind": "function",
								"line": 333,
								"endchar": 88,
								"char": 7,
								"type": "long(string key, ARGS args)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "ARGS",
										"name": "args"
									}
								],
								"name": "lpush",
								"endline": 333
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"comment": "Insert all the specified values at the head of the list stored at key.\n",
						"name": "lpush"
					},
					{
						"kind": "template",
						"line": 335,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 335,
								"endchar": 111,
								"char": 7,
								"type": "long(string key, T value)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "lpushX",
								"endline": 335
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Inserts value at the head of the list stored at key, only if key already exists and holds a list.\n",
						"name": "lpushX"
					},
					{
						"kind": "template",
						"line": 337,
						"members": [
							{
								"kind": "function",
								"line": 337,
								"endchar": 88,
								"char": 7,
								"type": "long(string key, ARGS args)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "ARGS",
										"name": "args"
									}
								],
								"name": "rpush",
								"endline": 337
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"comment": "Insert all the specified values at the tail of the list stored at key.\n",
						"name": "rpush"
					},
					{
						"kind": "template",
						"line": 339,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 339,
								"endchar": 111,
								"char": 7,
								"type": "long(string key, T value)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "rpushX",
								"endline": 339
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Inserts value at the tail of the list stored at key, only if key already exists and holds a list.\n",
						"name": "rpushX"
					},
					{
						"kind": "template",
						"line": 341,
						"members": [
							{
								"kind": "function",
								"line": 341,
								"endchar": 131,
								"char": 15,
								"type": "RedisReply!T(string key, long start, long stop)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "l",
										"name": "start"
									},
									{
										"deco": "l",
										"name": "stop"
									}
								],
								"name": "lrange",
								"endline": 341
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Returns the specified elements of the list stored at key.\n",
						"name": "lrange"
					},
					{
						"kind": "template",
						"line": 343,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 343,
								"endchar": 126,
								"char": 7,
								"type": "long(string key, long count, T value)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "l",
										"name": "count"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "lrem",
								"endline": 343
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Removes the first count occurrences of elements equal to value from the list stored at key.\n",
						"name": "lrem"
					},
					{
						"kind": "template",
						"line": 345,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 345,
								"endchar": 114,
								"char": 7,
								"type": "void(string key, long index, T value)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "l",
										"name": "index"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "lset",
								"endline": 345
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Sets the list element at index to value.\n",
						"name": "lset"
					},
					{
						"kind": "function",
						"line": 348,
						"deco": "FAyallZv",
						"endchar": 87,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "l",
								"name": "start"
							},
							{
								"deco": "l",
								"name": "stop"
							}
						],
						"name": "ltrim",
						"comment": "Trim an existing list so that it will contain only the specified range of elements specified.\n\nEquivalent to $(D range = range[start .. stop+1])\n",
						"endline": 348
					},
					{
						"kind": "template",
						"line": 350,
						"constraint": "isValidRedisValueReturn!T",
						"members": [
							{
								"kind": "function",
								"line": 350,
								"endchar": 96,
								"char": 4,
								"type": "T(string key)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"name": "rpop",
								"endline": 350
							}
						],
						"char": 4,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Removes and returns the last element of the list stored at key.\n",
						"name": "rpop"
					},
					{
						"kind": "template",
						"line": 352,
						"constraint": "isValidRedisValueReturn!T",
						"members": [
							{
								"kind": "function",
								"line": 352,
								"endchar": 96,
								"char": 4,
								"type": "T(string key)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"name": "lpop",
								"endline": 352
							}
						],
						"char": 4,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Removes and returns the first element of the list stored at key.\n",
						"name": "lpop"
					},
					{
						"kind": "template",
						"line": 355,
						"constraint": "isValidRedisValueReturn!T",
						"members": [
							{
								"kind": "function",
								"line": 355,
								"endchar": 121,
								"char": 4,
								"type": "T(string key, long seconds)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "l",
										"name": "seconds"
									}
								],
								"name": "blpop",
								"endline": 355
							}
						],
						"char": 4,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "BLPOP is a blocking list pop primitive. It is the blocking version of LPOP because it blocks\n\nthe connection when there are no elements to pop from any of the given lists.\n",
						"name": "blpop"
					},
					{
						"kind": "template",
						"line": 358,
						"constraint": "isValidRedisValueReturn!T",
						"members": [
							{
								"kind": "function",
								"line": 358,
								"endchar": 139,
								"char": 4,
								"type": "T(string key, string destination)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "string",
										"name": "destination"
									}
								],
								"name": "rpoplpush",
								"endline": 358
							}
						],
						"char": 4,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Atomically returns and removes the last element (tail) of the list stored at source,\n\nand pushes the element at the first element (head) of the list stored at destination.\n",
						"name": "rpoplpush"
					},
					{
						"kind": "template",
						"line": 365,
						"members": [
							{
								"kind": "function",
								"line": 365,
								"endchar": 86,
								"char": 7,
								"type": "long(string key, ARGS args)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "ARGS",
										"name": "args"
									}
								],
								"name": "sadd",
								"endline": 365
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"comment": "Add the specified members to the set stored at key. Specified members that are already a member of this set are ignored.\n\nIf key does not exist, a new set is created before adding the specified members.\n",
						"name": "sadd"
					},
					{
						"kind": "function",
						"line": 367,
						"deco": "FAyaZl",
						"endchar": 62,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"name": "scard",
						"comment": "Returns the set cardinality (number of elements) of the set stored at key.\n",
						"endline": 367
					},
					{
						"kind": "template",
						"line": 369,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 369,
								"endchar": 133,
								"char": 15,
								"type": "RedisReply!T(scope string[] keys...)",
								"parameters": [
									{
										"storageClass": [
											"scope"
										],
										"type": "string[]",
										"name": "keys"
									}
								],
								"name": "sdiff",
								"endline": 369
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Returns the members of the set resulting from the difference between the first set and all the successive sets.\n",
						"name": "sdiff"
					},
					{
						"kind": "function",
						"line": 372,
						"deco": "FAyaMAAyaXl",
						"endchar": 118,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "destination"
							},
							{
								"deco": "AAya",
								"storageClass": [
									"scope"
								],
								"name": "keys"
							}
						],
						"name": "sdiffStore",
						"comment": "This command is equal to SDIFF, but instead of returning the resulting set, it is stored in destination.\n\nIf destination already exists, it is overwritten.\n",
						"endline": 372
					},
					{
						"kind": "template",
						"line": 374,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 374,
								"endchar": 126,
								"char": 15,
								"type": "RedisReply!T(string[] keys)",
								"parameters": [
									{
										"type": "string[]",
										"name": "keys"
									}
								],
								"name": "sinter",
								"endline": 374
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Returns the members of the set resulting from the intersection of all the given sets.\n",
						"name": "sinter"
					},
					{
						"kind": "function",
						"line": 377,
						"deco": "FAyaMAAyaXl",
						"endchar": 120,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "destination"
							},
							{
								"deco": "AAya",
								"storageClass": [
									"scope"
								],
								"name": "keys"
							}
						],
						"name": "sinterStore",
						"comment": "This command is equal to SINTER, but instead of returning the resulting set, it is stored in destination.\n\nIf destination already exists, it is overwritten.\n",
						"endline": 377
					},
					{
						"kind": "template",
						"line": 379,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 379,
								"endchar": 119,
								"char": 7,
								"type": "bool(string key, T member)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "member"
									}
								],
								"name": "sisMember",
								"endline": 379
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Returns if member is a member of the set stored at key.\n",
						"name": "sisMember"
					},
					{
						"kind": "template",
						"line": 381,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 381,
								"endchar": 126,
								"char": 15,
								"type": "RedisReply!T(string key)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"name": "smembers",
								"endline": 381
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Returns all the members of the set value stored at key.\n",
						"name": "smembers"
					},
					{
						"kind": "template",
						"line": 384,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 384,
								"endchar": 150,
								"char": 7,
								"type": "bool(string source, string destination, T member)",
								"parameters": [
									{
										"type": "string",
										"name": "source"
									},
									{
										"type": "string",
										"name": "destination"
									},
									{
										"type": "T",
										"name": "member"
									}
								],
								"name": "smove",
								"endline": 384
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Move member from the set at source to the set at destination. This operation is atomic.\n\nIn every given moment the element will appear to be a member of source or destination for other clients.\n",
						"name": "smove"
					},
					{
						"kind": "template",
						"line": 386,
						"constraint": "isValidRedisValueReturn!T",
						"members": [
							{
								"kind": "function",
								"line": 386,
								"endchar": 97,
								"char": 4,
								"type": "T(string key)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"name": "spop",
								"endline": 386
							}
						],
						"char": 4,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Removes and returns a random element from the set value stored at key.\n",
						"name": "spop"
					},
					{
						"kind": "template",
						"line": 388,
						"constraint": "isValidRedisValueReturn!T",
						"members": [
							{
								"kind": "function",
								"line": 388,
								"endchar": 111,
								"char": 4,
								"type": "T(string key)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"name": "srandMember",
								"endline": 388
							}
						],
						"char": 4,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Returns a random element from the set stored at key.\n",
						"name": "srandMember"
					},
					{
						"kind": "template",
						"line": 393,
						"members": [
							{
								"kind": "function",
								"line": 393,
								"endchar": 86,
								"char": 7,
								"type": "long(string key, ARGS args)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "ARGS",
										"name": "args"
									}
								],
								"name": "srem",
								"endline": 393
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"comment": "Remove the specified members from the set stored at key.\n",
						"name": "srem"
					},
					{
						"kind": "template",
						"line": 395,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 395,
								"endchar": 135,
								"char": 15,
								"type": "RedisReply!T(scope string[] keys...)",
								"parameters": [
									{
										"storageClass": [
											"scope"
										],
										"type": "string[]",
										"name": "keys"
									}
								],
								"name": "sunion",
								"endline": 395
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Returns the members of the set resulting from the union of all the given sets.\n",
						"name": "sunion"
					},
					{
						"kind": "function",
						"line": 397,
						"deco": "FMAAyaXl",
						"endchar": 87,
						"char": 7,
						"parameters": [
							{
								"deco": "AAya",
								"storageClass": [
									"scope"
								],
								"name": "keys"
							}
						],
						"name": "sunionStore",
						"comment": "This command is equal to SUNION, but instead of returning the resulting set, it is stored in destination.\n",
						"endline": 397
					},
					{
						"kind": "template",
						"line": 403,
						"members": [
							{
								"kind": "function",
								"line": 403,
								"endchar": 86,
								"char": 7,
								"type": "long(string key, ARGS args)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "ARGS",
										"name": "args"
									}
								],
								"name": "zadd",
								"endline": 403
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"comment": "Add one or more members to a sorted set, or update its score if it already exists\n",
						"name": "zadd"
					},
					{
						"kind": "function",
						"line": 405,
						"deco": "FAyaZl",
						"endchar": 62,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"name": "zcard",
						"comment": "Returns the sorted set cardinality (number of elements) of the sorted set stored at key.\n",
						"endline": 405
					},
					{
						"kind": "alias",
						"line": 406,
						"storageClass": [
							"deprecated"
						],
						"char": 37,
						"name": "Zcard"
					},
					{
						"kind": "template",
						"line": 408,
						"members": [
							{
								"kind": "function",
								"line": 408,
								"endchar": 136,
								"char": 7,
								"type": "long(string key, double min, double max)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "d",
										"name": "min"
									},
									{
										"deco": "d",
										"name": "max"
									}
								],
								"name": "zcount",
								"endline": 408
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"defaultValue": "\"[]\"",
								"deco": "Aya",
								"name": "RNG"
							}
						],
						"comment": "Returns the number of elements in the sorted set at key with a score between min and max\n",
						"name": "zcount"
					},
					{
						"kind": "template",
						"line": 410,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 410,
								"endchar": 141,
								"char": 9,
								"type": "double(string key, double value, T member)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "d",
										"name": "value"
									},
									{
										"type": "T",
										"name": "member"
									}
								],
								"name": "zincrby",
								"endline": 410
							}
						],
						"char": 9,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Increments the score of member in the sorted set stored at key by increment.\n",
						"name": "zincrby"
					},
					{
						"kind": "template",
						"line": 413,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 413,
								"endchar": 2,
								"char": 15,
								"type": "RedisReply!T(string key, long start, long end, bool with_scores = false)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "l",
										"name": "start"
									},
									{
										"deco": "l",
										"name": "end"
									},
									{
										"deco": "b",
										"default": "false",
										"name": "with_scores"
									}
								],
								"name": "zrange",
								"endline": 418
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Returns the specified range of elements in the sorted set stored at key.\n",
						"name": "zrange"
					},
					{
						"kind": "template",
						"line": 422,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 422,
								"endchar": 2,
								"char": 15,
								"type": "RedisReply!T(string key, string min = \"-\", string max = \"+\", long offset = 0, long count = -1)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"default": "\"-\"",
										"type": "string",
										"name": "min"
									},
									{
										"default": "\"+\"",
										"type": "string",
										"name": "max"
									},
									{
										"deco": "l",
										"default": "0",
										"name": "offset"
									},
									{
										"deco": "l",
										"default": "-1",
										"name": "count"
									}
								],
								"name": "zrangeByLex",
								"endline": 427
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "When all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering,\n\nthis command returns all the elements in the sorted set at key with a value between min and max.\n",
						"name": "zrangeByLex"
					},
					{
						"kind": "template",
						"line": 430,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 430,
								"endchar": 2,
								"char": 15,
								"type": "RedisReply!T(string key, double start, double end, bool with_scores = false)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "d",
										"name": "start"
									},
									{
										"deco": "d",
										"name": "end"
									},
									{
										"deco": "b",
										"default": "false",
										"name": "with_scores"
									}
								],
								"name": "zrangeByScore",
								"endline": 435
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							},
							{
								"kind": "value",
								"defaultValue": "\"[]\"",
								"deco": "Aya",
								"name": "RNG"
							}
						],
						"comment": "Returns all the elements in the sorted set at key with a score between start and end inclusively\n",
						"name": "zrangeByScore"
					},
					{
						"kind": "template",
						"line": 439,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 439,
								"endchar": 2,
								"char": 15,
								"type": "RedisReply!T(string key, double start, double end, long offset, long count, bool with_scores = false)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "d",
										"name": "start"
									},
									{
										"deco": "d",
										"name": "end"
									},
									{
										"deco": "l",
										"name": "offset"
									},
									{
										"deco": "l",
										"name": "count"
									},
									{
										"deco": "b",
										"default": "false",
										"name": "with_scores"
									}
								],
								"name": "zrangeByScore",
								"endline": 446
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							},
							{
								"kind": "value",
								"defaultValue": "\"[]\"",
								"deco": "Aya",
								"name": "RNG"
							}
						],
						"comment": "Computes an internal list of elements in the sorted set at key with a score between start and end inclusively,\n\nand returns a range subselection similar to $(D results[offset .. offset+count])\n",
						"name": "zrangeByScore"
					},
					{
						"kind": "template",
						"line": 449,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 449,
								"endchar": 2,
								"char": 7,
								"type": "long(string key, T member)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "member"
									}
								],
								"name": "zrank",
								"endline": 454
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Returns the rank of member in the sorted set stored at key, with the scores ordered from low to high.\n",
						"name": "zrank"
					},
					{
						"kind": "template",
						"line": 457,
						"members": [
							{
								"kind": "function",
								"line": 457,
								"endchar": 92,
								"char": 7,
								"type": "long(string key, ARGS members)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "ARGS",
										"name": "members"
									}
								],
								"name": "zrem",
								"endline": 457
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"comment": "Removes the specified members from the sorted set stored at key.\n",
						"name": "zrem"
					},
					{
						"kind": "function",
						"line": 459,
						"deco": "FAyallZl",
						"endchar": 118,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							},
							{
								"deco": "l",
								"name": "start"
							},
							{
								"deco": "l",
								"name": "stop"
							}
						],
						"name": "zremRangeByRank",
						"comment": "Removes all elements in the sorted set stored at key with rank between start and stop.\n",
						"endline": 459
					},
					{
						"kind": "template",
						"line": 461,
						"members": [
							{
								"kind": "function",
								"line": 461,
								"endchar": 155,
								"char": 7,
								"type": "long(string key, double min, double max)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "d",
										"name": "min"
									},
									{
										"deco": "d",
										"name": "max"
									}
								],
								"name": "zremRangeByScore",
								"endline": 461
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"defaultValue": "\"[]\"",
								"deco": "Aya",
								"name": "RNG"
							}
						],
						"comment": "Removes all elements in the sorted set stored at key with a score between min and max (inclusive).\n",
						"name": "zremRangeByScore"
					},
					{
						"kind": "template",
						"line": 463,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 463,
								"endchar": 2,
								"char": 15,
								"type": "RedisReply!T(string key, long start, long end, bool with_scores = false)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "l",
										"name": "start"
									},
									{
										"deco": "l",
										"name": "end"
									},
									{
										"deco": "b",
										"default": "false",
										"name": "with_scores"
									}
								],
								"name": "zrevRange",
								"endline": 468
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Returns the specified range of elements in the sorted set stored at key.\n",
						"name": "zrevRange"
					},
					{
						"kind": "template",
						"line": 471,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 471,
								"endchar": 2,
								"char": 15,
								"type": "RedisReply!T(string key, double min, double max, bool with_scores = false)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "d",
										"name": "min"
									},
									{
										"deco": "d",
										"name": "max"
									},
									{
										"deco": "b",
										"default": "false",
										"name": "with_scores"
									}
								],
								"name": "zrevRangeByScore",
								"endline": 476
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							},
							{
								"kind": "value",
								"defaultValue": "\"[]\"",
								"deco": "Aya",
								"name": "RNG"
							}
						],
						"comment": "Returns all the elements in the sorted set at key with a score between max and min (including elements with score equal to max or min).\n",
						"name": "zrevRangeByScore"
					},
					{
						"kind": "template",
						"line": 480,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 480,
								"endchar": 2,
								"char": 15,
								"type": "RedisReply!T(string key, double min, double max, long offset, long count, bool with_scores = false)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "d",
										"name": "min"
									},
									{
										"deco": "d",
										"name": "max"
									},
									{
										"deco": "l",
										"name": "offset"
									},
									{
										"deco": "l",
										"name": "count"
									},
									{
										"deco": "b",
										"default": "false",
										"name": "with_scores"
									}
								],
								"name": "zrevRangeByScore",
								"endline": 487
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							},
							{
								"kind": "value",
								"defaultValue": "\"[]\"",
								"deco": "Aya",
								"name": "RNG"
							}
						],
						"comment": "Computes an internal list of elements in the sorted set at key with a score between max and min, and\n\nreturns a window of elements selected in a way equivalent to $(D results[offset .. offset + count])\n",
						"name": "zrevRangeByScore"
					},
					{
						"kind": "template",
						"line": 490,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 490,
								"endchar": 2,
								"char": 7,
								"type": "long(string key, T member)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "member"
									}
								],
								"name": "zrevRank",
								"endline": 495
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Returns the rank of member in the sorted set stored at key, with the scores ordered from high to low.\n",
						"name": "zrevRank"
					},
					{
						"kind": "template",
						"line": 498,
						"constraint": "isValidRedisValueType!T && isValidRedisValueType!U",
						"members": [
							{
								"kind": "function",
								"line": 498,
								"endchar": 2,
								"char": 15,
								"type": "RedisReply!T(string key, U member)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "U",
										"name": "member"
									}
								],
								"name": "zscore",
								"endline": 502
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							},
							{
								"kind": "type",
								"name": "U"
							}
						],
						"comment": "Returns the score of member in the sorted set at key.\n",
						"name": "zscore"
					},
					{
						"kind": "function",
						"line": 510,
						"deco": "FAyaAyaZl",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "channel"
							},
							{
								"deco": "Aya",
								"name": "message"
							}
						],
						"name": "publish",
						"comment": "Publishes a message to all clients subscribed at the channel\n",
						"endline": 514
					},
					{
						"kind": "template",
						"line": 517,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 517,
								"endchar": 2,
								"char": 15,
								"type": "RedisReply!T(string subcommand, scope string[] args...)",
								"parameters": [
									{
										"type": "string",
										"name": "subcommand"
									},
									{
										"storageClass": [
											"scope"
										],
										"type": "string[]",
										"name": "args"
									}
								],
								"name": "pubsub",
								"endline": 521
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							}
						],
						"comment": "Inspect the state of the Pub/Sub subsystem\n",
						"name": "pubsub"
					},
					{
						"kind": "function",
						"line": 527,
						"deco": "FZl",
						"endchar": 49,
						"char": 7,
						"name": "dbSize",
						"comment": "Return the number of keys in the selected database\n",
						"endline": 527
					},
					{
						"kind": "template",
						"line": 533,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 533,
								"endchar": 2,
								"char": 15,
								"type": "RedisReply!T(string lua_code, scope string[] keys, scope ARGS args)",
								"parameters": [
									{
										"type": "string",
										"name": "lua_code"
									},
									{
										"storageClass": [
											"scope"
										],
										"type": "string[]",
										"name": "keys"
									},
									{
										"storageClass": [
											"scope"
										],
										"type": "ARGS",
										"name": "args"
									}
								],
								"name": "eval",
								"endline": 537
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							},
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"comment": "Execute a Lua script server side\n",
						"name": "eval"
					},
					{
						"kind": "template",
						"line": 539,
						"constraint": "isValidRedisValueType!T",
						"members": [
							{
								"kind": "function",
								"line": 539,
								"endchar": 2,
								"char": 15,
								"type": "RedisReply!T(string sha, scope string[] keys, scope ARGS args)",
								"parameters": [
									{
										"type": "string",
										"name": "sha"
									},
									{
										"storageClass": [
											"scope"
										],
										"type": "string[]",
										"name": "keys"
									},
									{
										"storageClass": [
											"scope"
										],
										"type": "ARGS",
										"name": "args"
									}
								],
								"name": "evalSHA",
								"endline": 543
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "T"
							},
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"comment": "Evaluates a script cached on the server side by its SHA1 digest. Scripts are cached on the server side using the scriptLoad function.\n",
						"name": "evalSHA"
					},
					{
						"kind": "function",
						"line": 550,
						"deco": "FAyaZAya",
						"endchar": 90,
						"char": 9,
						"parameters": [
							{
								"deco": "Aya",
								"name": "lua_code"
							}
						],
						"name": "scriptLoad",
						"comment": "Load a script into the scripts cache, without executing it. Run it using evalSHA.\n",
						"endline": 550
					},
					{
						"kind": "template",
						"line": 553,
						"members": [
							{
								"kind": "function",
								"line": 553,
								"endchar": 2,
								"char": 4,
								"type": "T(string command, scope ARGS args)",
								"parameters": [
									{
										"type": "string",
										"name": "command"
									},
									{
										"storageClass": [
											"scope"
										],
										"type": "ARGS",
										"name": "args"
									}
								],
								"name": "request",
								"endline": 556
							}
						],
						"char": 4,
						"parameters": [
							{
								"kind": "type",
								"defaultDeco": "v",
								"name": "T"
							},
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"comment": "Run the specified command and arguments in the Redis database server\n",
						"name": "request"
					}
				],
				"char": 1,
				"name": "RedisDatabase",
				"comment": "\tAccesses the contents of a Redis database\n"
			},
			{
				"kind": "alias",
				"line": 595,
				"char": 1,
				"name": "RedisSubscriber"
			},
			{
				"kind": "class",
				"line": 597,
				"members": [
					{
						"kind": "function",
						"line": 620,
						"deco": "xFNdZb",
						"endchar": 2,
						"char": 17,
						"name": "isListening",
						"endline": 622
					},
					{
						"kind": "function",
						"line": 625,
						"deco": "xFNdZAAya",
						"endchar": 2,
						"char": 21,
						"name": "subscriptions",
						"comment": "Get a list of channels with active subscriptions\n",
						"endline": 627
					},
					{
						"kind": "function",
						"line": 629,
						"deco": "xFAyaZb",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "channel"
							}
						],
						"name": "hasSubscription",
						"endline": 631
					},
					{
						"kind": "constructor",
						"line": 633,
						"deco": "FC4vibe2db5redis5redis11RedisClientZC4vibe2db5redis5redis19RedisSubscriberImpl",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe2db5redis5redis11RedisClient",
								"name": "client"
							}
						],
						"name": "this",
						"originalType": "(RedisClient client)",
						"endline": 639
					},
					{
						"kind": "destructor",
						"line": 641,
						"deco": "FZv",
						"endchar": 2,
						"char": 2,
						"name": "~this",
						"endline": 644
					},
					{
						"kind": "function",
						"line": 647,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "bstop",
						"comment": "Stop listening and yield until the operation is complete.\n",
						"endline": 667
					},
					{
						"kind": "function",
						"line": 670,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "stop",
						"comment": "Stop listening asynchroneously\n",
						"endline": 689
					},
					{
						"kind": "function",
						"line": 715,
						"deco": "FMAAyaXv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "AAya",
								"storageClass": [
									"scope"
								],
								"name": "args"
							}
						],
						"name": "subscribe",
						"comment": "Completes the subscription for a listener to start receiving pubsub messages\n\non the corresponding channel(s). Returns instantly if already subscribed.\n\nIf a connection error is thrown here, it stops the listener.\n",
						"endline": 753
					},
					{
						"kind": "function",
						"line": 758,
						"deco": "FMAAyaXv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "AAya",
								"storageClass": [
									"scope"
								],
								"name": "args"
							}
						],
						"name": "unsubscribe",
						"comment": "Unsubscribes from the channel(s) specified, returns immediately if none\n\nis currently being listened.\n\nIf a connection error is thrown here, it stops the listener.\n",
						"endline": 790
					},
					{
						"kind": "function",
						"line": 795,
						"deco": "FMAAyaXv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "AAya",
								"storageClass": [
									"scope"
								],
								"name": "args"
							}
						],
						"name": "psubscribe",
						"comment": "Same as subscribe, but uses glob patterns, and does not return instantly if\n\nthe subscriptions are already registered.\n\nthrows Exception if the pattern does not yield a new subscription.\n",
						"endline": 819
					},
					{
						"kind": "function",
						"line": 824,
						"deco": "FMAAyaXv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "AAya",
								"storageClass": [
									"scope"
								],
								"name": "args"
							}
						],
						"name": "punsubscribe",
						"comment": "Same as unsubscribe, but uses glob patterns, and does not return instantly if\n\nthe subscriptions are not registered.\n\nthrows Exception if the pattern does not yield a new unsubscription.\n",
						"endline": 848
					},
					{
						"kind": "function",
						"line": 897,
						"deco": "FDFAyaAyaZvS4core4time8DurationZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "DFAyaAyaZv",
								"name": "onMessage"
							},
							{
								"deco": "S4core4time8Duration",
								"default": "dur(0L)",
								"name": "timeout"
							}
						],
						"name": "blisten",
						"originalType": "void(void delegate(string, string) onMessage, Duration timeout = 0.seconds)",
						"endline": 1092
					},
					{
						"kind": "function",
						"line": 1098,
						"deco": "FDFAyaAyaZvS4core4time8DurationZS4vibe4core4task4Task",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "DFAyaAyaZv",
								"name": "callback"
							},
							{
								"deco": "S4core4time8Duration",
								"default": "dur(0L)",
								"name": "timeout"
							}
						],
						"name": "listen",
						"comment": "Waits for messages and calls the callback with the channel and the message as arguments.\n\nThe timeout is passed over to the listener, which closes after the period of inactivity.\n\nUse 0.seconds timeout to specify a very long time (365 days)\n\nErrors will be sent to Callback Delegate on channel \"Error\".\n",
						"originalType": "Task(void delegate(string, string) callback, Duration timeout = 0.seconds)",
						"endline": 1132
					},
					{
						"kind": "destructor",
						"line": 641,
						"deco": "FNbZv",
						"char": 2,
						"name": "~this"
					},
					{
						"kind": "destructor",
						"line": 641,
						"deco": "FZv",
						"char": 2,
						"name": "~this"
					}
				],
				"char": 7,
				"name": "RedisSubscriberImpl"
			},
			{
				"kind": "template",
				"line": 1139,
				"members": [
					{
						"kind": "struct",
						"line": 1139,
						"members": [
							{
								"kind": "variable",
								"line": 1145,
								"init": "368474803",
								"deco": "k",
								"char": 8,
								"name": "m_magic"
							},
							{
								"kind": "variable",
								"line": 1146,
								"char": 19,
								"type": "RedisConnection",
								"name": "m_conn"
							},
							{
								"kind": "variable",
								"line": 1147,
								"char": 36,
								"type": "LockedConnection!RedisConnection",
								"name": "m_lockedConnection"
							},
							{
								"kind": "alias",
								"line": 1150,
								"char": 2,
								"type": "T",
								"name": "ElementType"
							},
							{
								"kind": "constructor",
								"line": 1152,
								"endchar": 2,
								"char": 2,
								"type": "(RedisConnection conn)",
								"parameters": [
									{
										"type": "RedisConnection",
										"name": "conn"
									}
								],
								"name": "this",
								"endline": 1160
							},
							{
								"kind": "destructor",
								"line": 1172,
								"endchar": 2,
								"char": 2,
								"name": "~this",
								"endline": 1179
							},
							{
								"kind": "function",
								"line": 1181,
								"endchar": 112,
								"char": 17,
								"type": "const @property bool()",
								"name": "empty",
								"endline": 1181
							},
							{
								"kind": "function",
								"line": 1189,
								"endchar": 2,
								"char": 14,
								"type": "@property T()",
								"name": "front",
								"comment": " Returns the current element of the reply.\n\n\t\tNote that byte and character arrays may be returned as slices to a\n\t\ttemporary buffer. This buffer will be invalidated on the next call to\n\t\t$(D popFront), so it needs to be duplicated for permanent storage.\n",
								"endline": 1207
							},
							{
								"kind": "function",
								"line": 1209,
								"endchar": 2,
								"char": 17,
								"type": "const @property bool()",
								"name": "frontIsNull",
								"endline": 1213
							},
							{
								"kind": "function",
								"line": 1217,
								"endchar": 2,
								"char": 7,
								"type": "void()",
								"name": "popFront",
								"comment": " Pops the current element of the reply\n",
								"endline": 1232
							},
							{
								"kind": "function",
								"line": 1236,
								"endchar": 50,
								"char": 17,
								"type": "const @property bool()",
								"name": "hasNext",
								"comment": "Legacy property for hasNext/next based iteration\n",
								"endline": 1236
							},
							{
								"kind": "template",
								"line": 1239,
								"members": [
									{
										"kind": "function",
										"line": 1239,
										"endchar": 2,
										"char": 5,
										"type": "TN()",
										"name": "next",
										"endline": 1246
									}
								],
								"char": 5,
								"parameters": [
									{
										"kind": "type",
										"type": "E[]",
										"name": "TN"
									},
									{
										"kind": "type",
										"name": "E"
									}
								],
								"comment": "Legacy property for hasNext/next based iteration\n",
								"name": "next"
							},
							{
								"kind": "function",
								"line": 1248,
								"endchar": 2,
								"char": 7,
								"type": "void()",
								"name": "drop",
								"endline": 1252
							},
							{
								"kind": "function",
								"line": 1254,
								"endchar": 2,
								"char": 15,
								"type": "void()",
								"name": "readData",
								"endline": 1261
							},
							{
								"kind": "function",
								"line": 1263,
								"endchar": 2,
								"char": 15,
								"type": "void()",
								"name": "clearData",
								"endline": 1268
							},
							{
								"kind": "function",
								"line": 1270,
								"endchar": 2,
								"char": 25,
								"type": "@property void(ref LockedConnection!RedisConnection conn)",
								"parameters": [
									{
										"storageClass": [
											"ref"
										],
										"type": "LockedConnection!RedisConnection",
										"name": "conn"
									}
								],
								"name": "lockedConnection",
								"endline": 1274
							},
							{
								"kind": "function",
								"line": 1276,
								"endchar": 2,
								"char": 15,
								"type": "void()",
								"name": "initialize",
								"endline": 1302
							},
							{
								"kind": "function",
								"line": 1304,
								"endchar": 2,
								"char": 15,
								"type": "void(string sizeLn)",
								"parameters": [
									{
										"type": "string",
										"name": "sizeLn"
									}
								],
								"name": "readBulk",
								"endline": 1321
							}
						],
						"char": 1,
						"name": "RedisReply"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"default": "ubyte[]",
						"name": "T"
					}
				],
				"comment": " Range interface to a single Redis reply.\n",
				"name": "RedisReply"
			},
			{
				"kind": "class",
				"line": 1324,
				"base": "object.Exception",
				"members": [
					{
						"kind": "constructor",
						"line": 1325,
						"deco": "FAyaAyakC9ExceptionZC4vibe2db5redis5redis22RedisProtocolException",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"name": "message"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "k",
								"default": "cast(uint)__LINE__",
								"name": "line"
							},
							{
								"deco": "C9Exception",
								"default": "null",
								"name": "next"
							}
						],
						"name": "this",
						"originalType": "(string message, string file = __FILE__, size_t line = __LINE__, Exception next = null)",
						"endline": 1328
					}
				],
				"char": 1,
				"name": "RedisProtocolException"
			},
			{
				"kind": "template",
				"line": 1331,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"name": "isValidRedisValueReturn"
			},
			{
				"kind": "template",
				"line": 1341,
				"members": [
					{
						"kind": "variable",
						"line": 1343,
						"init": "is(T : const(char)[]) || is(T : const(ubyte)[]) || is(T == long) || is(T == double) || is(T == bool)",
						"storageClass": [
							"enum"
						],
						"char": 7,
						"name": "isValidRedisValueType"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"name": "isValidRedisValueType"
			}
		],
		"name": "vibe.db.redis.redis",
		"comment": "\tRedis database client implementation.\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger, Sönke Ludwig, Michael Eisendle, Etienne Cimon\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\db\\redis\\sessionstore.d",
		"members": [
			{
				"kind": "class",
				"line": 11,
				"members": [
					{
						"kind": "constructor",
						"line": 17,
						"deco": "FAyalZC4vibe2db5redis12sessionstore17RedisSessionStore",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"name": "redis_url"
							},
							{
								"deco": "l",
								"name": "database"
							}
						],
						"name": "this",
						"originalType": "(string redis_url, long database)",
						"endline": 20
					},
					{
						"kind": "function",
						"line": 24,
						"deco": "xFNdZS4core4time8Duration",
						"endchar": 71,
						"char": 21,
						"name": "expirationTime",
						"comment": " The duration without access after which a session expires.\n",
						"endline": 24
					},
					{
						"kind": "function",
						"line": 26,
						"deco": "FNdS4core4time8DurationZv",
						"endchar": 72,
						"char": 17,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "dur"
							}
						],
						"name": "expirationTime",
						"comment": "ditto\n",
						"endline": 26
					},
					{
						"kind": "function",
						"line": 28,
						"deco": "xFNdZE4vibe4http7session18SessionStorageType",
						"endchar": 85,
						"char": 31,
						"name": "storageType",
						"endline": 28,
						"overrides": [
							"vibe.http.session.SessionStore.storageType"
						]
					},
					{
						"kind": "function",
						"line": 30,
						"deco": "FZS4vibe4http7session7Session",
						"endchar": 2,
						"char": 10,
						"name": "create",
						"endline": 37,
						"overrides": [
							"vibe.http.session.SessionStore.create"
						]
					},
					{
						"kind": "function",
						"line": 39,
						"deco": "FAyaZS4vibe4http7session7Session",
						"endchar": 2,
						"char": 10,
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							}
						],
						"name": "open",
						"endline": 44,
						"overrides": [
							"vibe.http.session.SessionStore.open"
						]
					},
					{
						"kind": "function",
						"line": 46,
						"deco": "FAyaAyaS3std7variant18__T8VariantNVki20Z8VariantNZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "S3std7variant18__T8VariantNVki20Z8VariantN",
								"name": "value"
							}
						],
						"name": "set",
						"originalType": "void(string id, string name, Variant value)",
						"endline": 49,
						"overrides": [
							"vibe.http.session.SessionStore.set"
						]
					},
					{
						"kind": "function",
						"line": 51,
						"deco": "FAyaAyaLS3std7variant18__T8VariantNVki20Z8VariantNZS3std7variant18__T8VariantNVki20Z8VariantN",
						"endchar": 2,
						"char": 10,
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "S3std7variant18__T8VariantNVki20Z8VariantN",
								"storageClass": [
									"lazy"
								],
								"name": "defaultVal"
							}
						],
						"name": "get",
						"originalType": "Variant(string id, string name, lazy Variant defaultVal)",
						"endline": 55,
						"overrides": [
							"vibe.http.session.SessionStore.get"
						]
					},
					{
						"kind": "function",
						"line": 57,
						"deco": "FAyaAyaZb",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"name": "isKeySet",
						"endline": 60,
						"overrides": [
							"vibe.http.session.SessionStore.isKeySet"
						]
					},
					{
						"kind": "function",
						"line": 62,
						"deco": "FAyaZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							}
						],
						"name": "destroy",
						"endline": 65,
						"overrides": [
							"vibe.http.session.SessionStore.destroy"
						]
					},
					{
						"kind": "function",
						"line": 67,
						"deco": "FAyaZDFDFKAyaKS3std7variant18__T8VariantNVki20Z8VariantNZiZi",
						"endchar": 2,
						"char": 64,
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							}
						],
						"name": "iterateSession",
						"originalType": "int delegate(int delegate(ref string key, ref Variant value))(string id)",
						"endline": 70,
						"overrides": [
							"vibe.http.session.SessionStore.iterateSession"
						]
					},
					{
						"kind": "function",
						"line": 72,
						"deco": "FAyaMDFAyaZiZi",
						"endchar": 2,
						"char": 6,
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "DFAyaZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"name": "iterateSession",
						"endline": 82,
						"overrides": [
							"vibe.http.session.SessionStore.iterateSession"
						]
					}
				],
				"char": 7,
				"interfaces": [
					"vibe.http.session.SessionStore"
				],
				"name": "RedisSessionStore"
			}
		],
		"name": "vibe.db.redis.sessionstore"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\db\\redis\\types.d",
		"members": [
			{
				"kind": "template",
				"line": 19,
				"members": [
					{
						"kind": "function",
						"line": 19,
						"endchar": 1,
						"char": 15,
						"type": "RedisString!T(RedisDatabase db, string key)",
						"parameters": [
							{
								"type": "RedisDatabase",
								"name": "db"
							},
							{
								"type": "string",
								"name": "key"
							}
						],
						"name": "getAsString",
						"endline": 22
					}
				],
				"char": 15,
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "T"
					}
				],
				"comment": " Returns a handle to a string type value.\nExample:\n\n---\nvoid test()\n{\n\tauto db = connectRedis(\"127.0.0.1\").getDatabase(0);\n\tauto str = db.getAsString(\"some_string\");\n\tstr = \"test\";\n}\n\n---\n",
				"name": "getAsString"
			},
			{
				"kind": "template",
				"line": 38,
				"members": [
					{
						"kind": "function",
						"line": 38,
						"endchar": 1,
						"char": 12,
						"type": "RedisSet!T(RedisDatabase db, string key)",
						"parameters": [
							{
								"type": "RedisDatabase",
								"name": "db"
							},
							{
								"type": "string",
								"name": "key"
							}
						],
						"name": "getAsSet",
						"endline": 41
					}
				],
				"char": 12,
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "T"
					}
				],
				"comment": " Returns a handle to a set type value.\nExample:\n\n---\nvoid test()\n{\n\tauto db = connectRedis(\"127.0.0.1\").getDatabase(0);\n\tauto set = db.getAsSet(\"some_set\");\n\tset.insert(\"test\");\n}\n\n---\n",
				"name": "getAsSet"
			},
			{
				"kind": "template",
				"line": 56,
				"members": [
					{
						"kind": "function",
						"line": 56,
						"endchar": 1,
						"char": 13,
						"type": "RedisZSet!T(RedisDatabase db, string key)",
						"parameters": [
							{
								"type": "RedisDatabase",
								"name": "db"
							},
							{
								"type": "string",
								"name": "key"
							}
						],
						"name": "getAsZSet",
						"endline": 59
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "T"
					}
				],
				"comment": " Returns a handle to a set type value.\nExample:\n\n---\nvoid test()\n{\n\tauto db = connectRedis(\"127.0.0.1\").getDatabase(0);\n\tauto set = db.getAsZSet(\"some_sorted_set\");\n\tset.insert(1, \"test\");\n}\n\n---\n",
				"name": "getAsZSet"
			},
			{
				"kind": "template",
				"line": 74,
				"members": [
					{
						"kind": "function",
						"line": 74,
						"endchar": 1,
						"char": 13,
						"type": "RedisHash!T(RedisDatabase db, string key)",
						"parameters": [
							{
								"type": "RedisDatabase",
								"name": "db"
							},
							{
								"type": "string",
								"name": "key"
							}
						],
						"name": "getAsHash",
						"endline": 77
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "T"
					}
				],
				"comment": " Returns a handle to a hash type value.\nExample:\n\n---\nvoid test()\n{\n\tauto db = connectRedis(\"127.0.0.1\").getDatabase(0);\n\tauto hash = db.getAsHash(\"some_hash\");\n\thash[\"test\"] = \"123\";\n}\n\n---\n",
				"name": "getAsHash"
			},
			{
				"kind": "template",
				"line": 92,
				"members": [
					{
						"kind": "function",
						"line": 92,
						"endchar": 1,
						"char": 13,
						"type": "RedisList!T(RedisDatabase db, string key)",
						"parameters": [
							{
								"type": "RedisDatabase",
								"name": "db"
							},
							{
								"type": "string",
								"name": "key"
							}
						],
						"name": "getAsList",
						"endline": 95
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "T"
					}
				],
				"comment": " Returns a handle to a list type value.\nExample:\n\n---\nvoid test()\n{\n\tauto db = connectRedis(\"127.0.0.1\").getDatabase(0);\n\tauto list = db.getAsList!long(\"some_list\");\n\tlist.insertFront(123);\n}\n\n---\n",
				"name": "getAsList"
			},
			{
				"kind": "template",
				"line": 117,
				"members": [
					{
						"kind": "function",
						"line": 117,
						"endchar": 1,
						"char": 8,
						"type": "string(T value)",
						"parameters": [
							{
								"type": "T",
								"name": "value"
							}
						],
						"name": "toRedis",
						"endline": 129
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tConverts the given value to a binary/string representation suitable for\n\tRedis storage.\n\n\tThese functions are used by the proxy types of this module to convert\n\tbetween Redis and D.\n\n\tSee_also: $(D fromRedis)\n",
				"name": "toRedis"
			},
			{
				"kind": "template",
				"line": 131,
				"members": [
					{
						"kind": "function",
						"line": 131,
						"endchar": 1,
						"char": 6,
						"type": "void(ref R dst, T value)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "dst"
							},
							{
								"type": "T",
								"name": "value"
							}
						],
						"name": "toRedis",
						"endline": 143
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "toRedis"
			},
			{
				"kind": "template",
				"line": 154,
				"members": [
					{
						"kind": "function",
						"line": 154,
						"endchar": 1,
						"char": 3,
						"type": "T(string value)",
						"parameters": [
							{
								"type": "string",
								"name": "value"
							}
						],
						"name": "fromRedis",
						"endline": 166
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tConverts a Redis value back to its original representation.\n\n\tThese functions are used by the proxy types of this module to convert\n\tbetween Redis and D.\n\n\tSee_also: $(D toRedis)\n",
				"name": "fromRedis"
			},
			{
				"kind": "enum",
				"line": 171,
				"members": [
					{
						"kind": "enum member",
						"line": 172,
						"value": "0",
						"char": 2,
						"name": "none",
						"comment": "Non-existent key\n"
					},
					{
						"kind": "enum member",
						"line": 173,
						"value": "1",
						"char": 2,
						"name": "string",
						"comment": "String/binary value\n"
					},
					{
						"kind": "enum member",
						"line": 174,
						"value": "2",
						"char": 2,
						"name": "list",
						"comment": "Linked list\n"
					},
					{
						"kind": "enum member",
						"line": 175,
						"value": "3",
						"char": 2,
						"name": "set",
						"comment": "Unsorted set\n"
					},
					{
						"kind": "enum member",
						"line": 176,
						"value": "4",
						"char": 2,
						"name": "zset",
						"comment": "Sorted set\n"
					},
					{
						"kind": "enum member",
						"line": 177,
						"value": "5",
						"char": 2,
						"name": "hash",
						"comment": "Unsorted map\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "RedisType",
				"comment": " The type of a Redis key.\n"
			},
			{
				"kind": "struct",
				"line": 183,
				"members": [
					{
						"kind": "constructor",
						"line": 189,
						"deco": "FNcS4vibe2db5redis5redis13RedisDatabaseAyaZS4vibe2db5redis5types10RedisValue",
						"endchar": 63,
						"char": 2,
						"parameters": [
							{
								"deco": "S4vibe2db5redis5redis13RedisDatabase",
								"name": "db"
							},
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"name": "this",
						"originalType": "ref (RedisDatabase db, string key)",
						"endline": 189
					},
					{
						"kind": "function",
						"line": 193,
						"deco": "NgFNdZNgS4vibe2db5redis5redis13RedisDatabase",
						"endchar": 65,
						"char": 33,
						"name": "database",
						"comment": " The database in which the key is stored.\n",
						"endline": 193
					},
					{
						"kind": "function",
						"line": 197,
						"deco": "xFNdZAya",
						"endchar": 47,
						"char": 19,
						"name": "key",
						"comment": " Name of the corresponding key.\n",
						"endline": 197
					},
					{
						"kind": "function",
						"line": 207,
						"deco": "FNdZS4core4time8Duration",
						"endchar": 2,
						"char": 21,
						"name": "ttl",
						"comment": " Remaining time-to-live.\n\n\t\tReturns:\n\t\t\tThe time until the key expires, if applicable. Returns\n\t\t\t$(D Duration.max) otherwise.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/pttl, PTTL)\n",
						"endline": 211
					},
					{
						"kind": "function",
						"line": 220,
						"deco": "FNdZE4vibe2db5redis5types9RedisType",
						"endchar": 86,
						"char": 22,
						"name": "type",
						"comment": " The data type of the referenced value.\n\n\t\tQueries the actual type of the value that is referenced by this\n\t\tkey.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/type, TYPE)\n",
						"endline": 220
					},
					{
						"kind": "function",
						"line": 226,
						"deco": "FNdZb",
						"endchar": 55,
						"char": 17,
						"name": "exists",
						"comment": " Checks if the referenced key exists.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/exists, EXISTS)\n",
						"endline": 226
					},
					{
						"kind": "function",
						"line": 234,
						"deco": "FZb",
						"endchar": 46,
						"char": 7,
						"name": "remove",
						"comment": " Removes the referenced key.\n\n\t\tReturns: $(D true) iff the key was successfully removed.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/del, DEL)\n",
						"endline": 234
					},
					{
						"kind": "function",
						"line": 245,
						"deco": "FS4core4time8DurationZb",
						"endchar": 128,
						"char": 7,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "expire_time"
							}
						],
						"name": "expire",
						"comment": " Sets the key for expiration after the given timeout.\n\n\t\tNote that Redis handles timeouts in second resolution, so that the\n\t\ttimeout must be at least one second.\n\n\t\tReturns: $(D true) iff the expiration time was successfully set.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/expire, EXPIRE)\n",
						"endline": 245
					},
					{
						"kind": "function",
						"line": 256,
						"deco": "FS3std8datetime7SysTimeZb",
						"endchar": 94,
						"char": 7,
						"parameters": [
							{
								"deco": "S3std8datetime7SysTime",
								"name": "expire_time"
							}
						],
						"name": "expireAt",
						"comment": " Sets the key for expiration at the given point in time.\n\n\t\tNote that Redis handles timeouts in second resolution, so that any\n\t\tfractional seconds of the given $(D expire_time) will be truncated.\n\n\t\tReturns: $(D true) iff the expiration time was successfully set.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/expireat, EXPIREAT)\n",
						"endline": 256
					},
					{
						"kind": "function",
						"line": 265,
						"deco": "FZb",
						"endchar": 47,
						"char": 7,
						"name": "persist",
						"comment": " Removes any existing expiration time for the key.\n\n\t\tReturns:\n\t\t\t$(D true) iff the key exists and an existing timeout was removed.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/persist, PERSIST)\n",
						"endline": 265
					},
					{
						"kind": "function",
						"line": 277,
						"deco": "FlZb",
						"endchar": 74,
						"char": 7,
						"parameters": [
							{
								"deco": "l",
								"name": "dst_database"
							}
						],
						"name": "moveTo",
						"comment": " Moves this key to a different database.\n\n\t\tExisting keys will not be overwritten.\n\n\t\tReturns:\n\t\t\t$(D true) iff the key exists and was successfully moved to the\n\t\t\tdestination database.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/move, MOVE)\n",
						"endline": 277
					},
					{
						"kind": "function",
						"line": 286,
						"deco": "FAyaZv",
						"endchar": 81,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "new_name"
							}
						],
						"name": "rename",
						"comment": " Renames the referenced key.\n\n\t\tThis method will also update this instance to refer to the renamed\n\t\tkey.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/rename, RENAME), $(D renameIfNotExist)\n",
						"endline": 286
					},
					{
						"kind": "function",
						"line": 299,
						"deco": "FAyaZb",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "new_name"
							}
						],
						"name": "renameIfNotExist",
						"comment": " Renames the referenced key if the destination key doesn't exist.\n\n\t\tThis method will also update this instance to refer to the renamed\n\t\tkey if the rename was successful.\n\n\t\tReturns:\n\t\t\t$(D true) iff the source key exists and the destination key doesn't\n\t\t\texist.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/renamenx, RENAMENX), $(D rename)\n",
						"endline": 306
					}
				],
				"char": 1,
				"name": "RedisValue",
				"comment": " Represents a generic Redis value.\n"
			},
			{
				"kind": "template",
				"line": 317,
				"members": [
					{
						"kind": "struct",
						"line": 317,
						"members": [
							{
								"kind": "variable",
								"line": 318,
								"char": 13,
								"type": "RedisValue",
								"name": "value"
							},
							{
								"kind": "constructor",
								"line": 321,
								"endchar": 68,
								"char": 2,
								"type": "(RedisDatabase db, string key)",
								"parameters": [
									{
										"type": "RedisDatabase",
										"name": "db"
									},
									{
										"type": "string",
										"name": "key"
									}
								],
								"name": "this",
								"endline": 321
							},
							{
								"kind": "function",
								"line": 327,
								"endchar": 55,
								"char": 17,
								"type": "@property long()",
								"name": "length",
								"comment": " The length in bytes of the string.\n\n\t\tSee_also: $(LINK2 http://redis.io/commands/strlen, STRLEN)\n",
								"endline": 327
							},
							{
								"kind": "function",
								"line": 329,
								"endchar": 55,
								"char": 4,
								"type": "T()",
								"name": "get",
								"endline": 329
							},
							{
								"kind": "function",
								"line": 331,
								"endchar": 76,
								"char": 4,
								"type": "T(T value)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "getSet",
								"endline": 331
							},
							{
								"kind": "function",
								"line": 332,
								"endchar": 64,
								"char": 7,
								"type": "bool(long offset)",
								"parameters": [
									{
										"deco": "l",
										"name": "offset"
									}
								],
								"name": "getBit",
								"endline": 332
							},
							{
								"kind": "function",
								"line": 333,
								"endchar": 83,
								"char": 7,
								"type": "bool(long offset, bool value)",
								"parameters": [
									{
										"deco": "l",
										"name": "offset"
									},
									{
										"deco": "b",
										"name": "value"
									}
								],
								"name": "setBit",
								"endline": 333
							},
							{
								"kind": "function",
								"line": 334,
								"endchar": 147,
								"char": 7,
								"type": "void(T value, Duration expire_time)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									},
									{
										"type": "Duration",
										"name": "expire_time"
									}
								],
								"name": "setExpire",
								"endline": 334
							},
							{
								"kind": "function",
								"line": 335,
								"endchar": 73,
								"char": 7,
								"type": "bool(T value)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "setIfNotExist",
								"endline": 335
							},
							{
								"kind": "function",
								"line": 337,
								"endchar": 94,
								"char": 9,
								"type": "string(long start, long end)",
								"parameters": [
									{
										"deco": "l",
										"name": "start"
									},
									{
										"deco": "l",
										"name": "end"
									}
								],
								"name": "getSubString",
								"endline": 337
							},
							{
								"kind": "function",
								"line": 338,
								"endchar": 93,
								"char": 7,
								"type": "long(long offset, string value)",
								"parameters": [
									{
										"deco": "l",
										"name": "offset"
									},
									{
										"type": "string",
										"name": "value"
									}
								],
								"name": "setSubString",
								"endline": 338
							},
							{
								"kind": "function",
								"line": 340,
								"endchar": 59,
								"char": 7,
								"type": "void(T value)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "opAssign",
								"endline": 340
							},
							{
								"kind": "template",
								"line": 342,
								"constraint": "OP == \"~\"",
								"members": [
									{
										"kind": "function",
										"line": 342,
										"endchar": 94,
										"char": 7,
										"type": "long(string value)",
										"parameters": [
											{
												"type": "string",
												"name": "value"
											}
										],
										"name": "opOpAssign",
										"endline": 342
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "OP"
									}
								],
								"name": "opOpAssign"
							},
							{
								"kind": "template",
								"line": 343,
								"constraint": "OP == \"++\"",
								"members": [
									{
										"kind": "function",
										"line": 343,
										"endchar": 71,
										"char": 7,
										"type": "long()",
										"name": "opUnary",
										"endline": 343
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "OP"
									}
								],
								"name": "opUnary"
							},
							{
								"kind": "template",
								"line": 344,
								"constraint": "OP == \"--\"",
								"members": [
									{
										"kind": "function",
										"line": 344,
										"endchar": 71,
										"char": 7,
										"type": "long()",
										"name": "opUnary",
										"endline": 344
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "OP"
									}
								],
								"name": "opUnary"
							},
							{
								"kind": "template",
								"line": 345,
								"constraint": "OP == \"+\"",
								"members": [
									{
										"kind": "function",
										"line": 345,
										"endchar": 2,
										"char": 7,
										"type": "long(long value)",
										"parameters": [
											{
												"deco": "l",
												"name": "value"
											}
										],
										"name": "opOpAssign",
										"endline": 349
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "OP"
									}
								],
								"name": "opOpAssign"
							},
							{
								"kind": "template",
								"line": 350,
								"constraint": "OP == \"-\"",
								"members": [
									{
										"kind": "function",
										"line": 350,
										"endchar": 2,
										"char": 7,
										"type": "long(long value)",
										"parameters": [
											{
												"deco": "l",
												"name": "value"
											}
										],
										"name": "opOpAssign",
										"endline": 354
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "OP"
									}
								],
								"name": "opOpAssign"
							},
							{
								"kind": "template",
								"line": 355,
								"constraint": "OP == \"+\"",
								"members": [
									{
										"kind": "function",
										"line": 355,
										"endchar": 92,
										"char": 7,
										"type": "long(double value)",
										"parameters": [
											{
												"deco": "d",
												"name": "value"
											}
										],
										"name": "opOpAssign",
										"endline": 355
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "OP"
									}
								],
								"name": "opOpAssign"
							},
							{
								"kind": "template",
								"line": 356,
								"constraint": "OP == \"-\"",
								"members": [
									{
										"kind": "function",
										"line": 356,
										"endchar": 93,
										"char": 7,
										"type": "long(double value)",
										"parameters": [
											{
												"deco": "d",
												"name": "value"
											}
										],
										"name": "opOpAssign",
										"endline": 356
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "OP"
									}
								],
								"name": "opOpAssign"
							}
						],
						"char": 1,
						"name": "RedisString"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "T"
					}
				],
				"comment": " Represents a Redis string value.\n\n\tIn addition to the methods specific to string values, all operations of\n\t$(D RedisValue) are available using an $(D alias this) declaration.\n",
				"name": "RedisString"
			},
			{
				"kind": "template",
				"line": 365,
				"members": [
					{
						"kind": "struct",
						"line": 365,
						"members": [
							{
								"kind": "variable",
								"line": 366,
								"char": 13,
								"type": "RedisValue",
								"name": "value"
							},
							{
								"kind": "constructor",
								"line": 369,
								"endchar": 68,
								"char": 2,
								"type": "(RedisDatabase db, string key)",
								"parameters": [
									{
										"type": "RedisDatabase",
										"name": "db"
									},
									{
										"type": "string",
										"name": "key"
									}
								],
								"name": "this",
								"endline": 369
							},
							{
								"kind": "function",
								"line": 371,
								"endchar": 89,
								"char": 9,
								"type": "size_t(scope string[] fields...)",
								"parameters": [
									{
										"storageClass": [
											"scope"
										],
										"type": "string[]",
										"name": "fields"
									}
								],
								"name": "remove",
								"endline": 371
							},
							{
								"kind": "function",
								"line": 372,
								"endchar": 65,
								"char": 7,
								"type": "bool(string field)",
								"parameters": [
									{
										"type": "string",
										"name": "field"
									}
								],
								"name": "exists",
								"endline": 372
							},
							{
								"kind": "function",
								"line": 374,
								"endchar": 88,
								"char": 7,
								"type": "void(T value, string field)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									},
									{
										"type": "string",
										"name": "field"
									}
								],
								"name": "opIndexAssign",
								"endline": 374
							},
							{
								"kind": "function",
								"line": 375,
								"endchar": 81,
								"char": 4,
								"type": "T(string field)",
								"parameters": [
									{
										"type": "string",
										"name": "field"
									}
								],
								"name": "opIndex",
								"endline": 375
							},
							{
								"kind": "function",
								"line": 377,
								"endchar": 2,
								"char": 4,
								"type": "T(string field, T def_value)",
								"parameters": [
									{
										"type": "string",
										"name": "field"
									},
									{
										"type": "T",
										"name": "def_value"
									}
								],
								"name": "get",
								"endline": 382
							},
							{
								"kind": "function",
								"line": 384,
								"endchar": 2,
								"char": 7,
								"type": "bool(string field, T value)",
								"parameters": [
									{
										"type": "string",
										"name": "field"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "setIfNotExist",
								"endline": 387
							},
							{
								"kind": "template",
								"line": 389,
								"constraint": "op == \"+\"",
								"members": [
									{
										"kind": "function",
										"line": 389,
										"endchar": 117,
										"char": 7,
										"type": "void(T value, string field)",
										"parameters": [
											{
												"type": "T",
												"name": "value"
											},
											{
												"type": "string",
												"name": "field"
											}
										],
										"name": "opIndexOpAssign",
										"endline": 389
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"name": "opIndexOpAssign"
							},
							{
								"kind": "function",
								"line": 391,
								"endchar": 2,
								"char": 6,
								"type": "int(scope int delegate(string key, T value) del)",
								"parameters": [
									{
										"storageClass": [
											"scope"
										],
										"type": "int delegate(string key, T value)",
										"name": "del"
									}
								],
								"name": "opApply",
								"endline": 401
							},
							{
								"kind": "function",
								"line": 404,
								"endchar": 2,
								"char": 6,
								"type": "int(scope int delegate(string key) del)",
								"parameters": [
									{
										"storageClass": [
											"scope"
										],
										"type": "int delegate(string key)",
										"name": "del"
									}
								],
								"name": "opApply",
								"endline": 412
							},
							{
								"kind": "function",
								"line": 414,
								"endchar": 43,
								"char": 7,
								"type": "long()",
								"name": "length",
								"endline": 414
							},
							{
								"kind": "function",
								"line": 417,
								"endchar": 2,
								"char": 7,
								"type": "void(T[] dst, scope string[] fields...)",
								"parameters": [
									{
										"type": "T[]",
										"name": "dst"
									},
									{
										"storageClass": [
											"scope"
										],
										"type": "string[]",
										"name": "fields"
									}
								],
								"name": "getMultiple",
								"endline": 424
							}
						],
						"char": 1,
						"name": "RedisHash"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "T"
					}
				],
				"comment": " Represents a Redis hash value.\n\n\tIn addition to the methods specific to hash values, all operations of\n\t$(D RedisValue) are available using an $(D alias this) declaration.\n",
				"name": "RedisHash"
			},
			{
				"kind": "template",
				"line": 441,
				"members": [
					{
						"kind": "struct",
						"line": 441,
						"members": [
							{
								"kind": "variable",
								"line": 442,
								"char": 13,
								"type": "RedisValue",
								"name": "value"
							},
							{
								"kind": "constructor",
								"line": 445,
								"endchar": 68,
								"char": 2,
								"type": "(RedisDatabase db, string key)",
								"parameters": [
									{
										"type": "RedisDatabase",
										"name": "db"
									},
									{
										"type": "string",
										"name": "key"
									}
								],
								"name": "this",
								"endline": 445
							},
							{
								"kind": "function",
								"line": 447,
								"endchar": 40,
								"char": 9,
								"type": "Dollar()",
								"name": "opDollar",
								"endline": 447
							},
							{
								"kind": "function",
								"line": 449,
								"endchar": 2,
								"char": 4,
								"type": "T(long index)",
								"parameters": [
									{
										"deco": "l",
										"name": "index"
									}
								],
								"name": "opIndex",
								"endline": 453
							},
							{
								"kind": "function",
								"line": 454,
								"endchar": 2,
								"char": 4,
								"type": "T(Dollar index)",
								"parameters": [
									{
										"type": "Dollar",
										"name": "index"
									}
								],
								"name": "opIndex",
								"endline": 458
							},
							{
								"kind": "function",
								"line": 459,
								"endchar": 2,
								"char": 7,
								"type": "void(T value, long index)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									},
									{
										"deco": "l",
										"name": "index"
									}
								],
								"name": "opIndexAssign",
								"endline": 463
							},
							{
								"kind": "function",
								"line": 464,
								"endchar": 2,
								"char": 7,
								"type": "void(T value, Dollar index)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									},
									{
										"type": "Dollar",
										"name": "index"
									}
								],
								"name": "opIndexAssign",
								"endline": 468
							},
							{
								"kind": "template",
								"line": 469,
								"constraint": "(is(S : long) || is(S == Dollar)) && (is(E : long) || is(E == Dollar))",
								"members": [
									{
										"kind": "function",
										"line": 469,
										"storageClass": [
											"auto"
										],
										"endchar": 2,
										"char": 7,
										"type": "(S start, E end)",
										"parameters": [
											{
												"type": "S",
												"name": "start"
											},
											{
												"type": "E",
												"name": "end"
											}
										],
										"name": "opSlice",
										"endline": 489
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "type",
										"name": "S"
									},
									{
										"kind": "type",
										"name": "E"
									}
								],
								"name": "opSlice"
							},
							{
								"kind": "template",
								"line": 490,
								"members": [
									{
										"kind": "function",
										"line": 490,
										"storageClass": [
											"auto"
										],
										"endchar": 42,
										"char": 7,
										"type": "()",
										"name": "opSlice",
										"endline": 490
									}
								],
								"char": 7,
								"parameters": [],
								"name": "opSlice"
							},
							{
								"kind": "function",
								"line": 492,
								"endchar": 43,
								"char": 7,
								"type": "long()",
								"name": "length",
								"endline": 492
							},
							{
								"kind": "function",
								"line": 494,
								"endchar": 104,
								"char": 7,
								"type": "long(T pivot, T value)",
								"parameters": [
									{
										"type": "T",
										"name": "pivot"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "insertBefore",
								"endline": 494
							},
							{
								"kind": "function",
								"line": 495,
								"endchar": 102,
								"char": 7,
								"type": "long(T pivot, T value)",
								"parameters": [
									{
										"type": "T",
										"name": "pivot"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "insertAfter",
								"endline": 495
							},
							{
								"kind": "function",
								"line": 497,
								"endchar": 71,
								"char": 7,
								"type": "long(T value)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "insertFront",
								"endline": 497
							},
							{
								"kind": "function",
								"line": 498,
								"endchar": 80,
								"char": 7,
								"type": "long(T value)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "insertFrontIfExists",
								"endline": 498
							},
							{
								"kind": "function",
								"line": 499,
								"endchar": 70,
								"char": 7,
								"type": "long(T value)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "insertBack",
								"endline": 499
							},
							{
								"kind": "function",
								"line": 500,
								"endchar": 79,
								"char": 7,
								"type": "long(T value)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "insertBackIfExists",
								"endline": 500
							},
							{
								"kind": "function",
								"line": 502,
								"endchar": 71,
								"char": 7,
								"type": "long(T value)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "removeAll",
								"endline": 502
							},
							{
								"kind": "function",
								"line": 503,
								"endchar": 112,
								"char": 7,
								"type": "long(T value, long count = 1)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									},
									{
										"deco": "l",
										"default": "1",
										"name": "count"
									}
								],
								"name": "removeFirst",
								"endline": 503
							},
							{
								"kind": "function",
								"line": 504,
								"endchar": 112,
								"char": 7,
								"type": "long(T value, long count = 1)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									},
									{
										"deco": "l",
										"default": "1",
										"name": "count"
									}
								],
								"name": "removeLast",
								"endline": 504
							},
							{
								"kind": "function",
								"line": 506,
								"endchar": 67,
								"char": 7,
								"type": "void(long start, long end)",
								"parameters": [
									{
										"deco": "l",
										"name": "start"
									},
									{
										"deco": "l",
										"name": "end"
									}
								],
								"name": "trim",
								"endline": 506
							},
							{
								"kind": "function",
								"line": 508,
								"endchar": 64,
								"char": 4,
								"type": "T()",
								"name": "removeFront",
								"endline": 508
							},
							{
								"kind": "function",
								"line": 509,
								"endchar": 63,
								"char": 4,
								"type": "T()",
								"name": "removeBack",
								"endline": 509
							},
							{
								"kind": "function",
								"line": 510,
								"endchar": 2,
								"char": 4,
								"type": "T(Duration max_wait = 0.seconds)",
								"parameters": [
									{
										"default": "0.seconds",
										"type": "Duration",
										"name": "max_wait"
									}
								],
								"name": "removeFrontBlock",
								"endline": 513
							},
							{
								"kind": "struct",
								"line": 515,
								"members": [
									{
										"kind": "variable",
										"line": 516,
										"init": "0",
										"deco": "l",
										"char": 8,
										"name": "offset"
									},
									{
										"kind": "function",
										"line": 517,
										"endchar": 57,
										"char": 10,
										"type": "Dollar(long off)",
										"parameters": [
											{
												"deco": "l",
												"name": "off"
											}
										],
										"name": "opAdd",
										"endline": 517
									},
									{
										"kind": "function",
										"line": 518,
										"endchar": 57,
										"char": 10,
										"type": "Dollar(long off)",
										"parameters": [
											{
												"deco": "l",
												"name": "off"
											}
										],
										"name": "opSub",
										"endline": 518
									}
								],
								"char": 2,
								"name": "Dollar"
							},
							{
								"kind": "function",
								"line": 521,
								"endchar": 2,
								"char": 6,
								"type": "int(scope int delegate(T) del)",
								"parameters": [
									{
										"storageClass": [
											"scope"
										],
										"type": "int delegate(T)",
										"name": "del"
									}
								],
								"name": "opApply",
								"endline": 527
							}
						],
						"char": 1,
						"name": "RedisList"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "T"
					}
				],
				"comment": " Represents a Redis list value.\n\n\tIn addition to the methods specific to list values, all operations of\n\t$(D RedisValue) are available using an $(D alias this) declaration.\n",
				"name": "RedisList"
			},
			{
				"kind": "template",
				"line": 539,
				"members": [
					{
						"kind": "struct",
						"line": 539,
						"members": [
							{
								"kind": "variable",
								"line": 540,
								"char": 13,
								"type": "RedisValue",
								"name": "value"
							},
							{
								"kind": "constructor",
								"line": 543,
								"endchar": 68,
								"char": 2,
								"type": "(RedisDatabase db, string key)",
								"parameters": [
									{
										"type": "RedisDatabase",
										"name": "db"
									},
									{
										"type": "string",
										"name": "key"
									}
								],
								"name": "this",
								"endline": 543
							},
							{
								"kind": "template",
								"line": 545,
								"members": [
									{
										"kind": "function",
										"line": 545,
										"endchar": 67,
										"char": 7,
										"type": "long(ARGS args)",
										"parameters": [
											{
												"type": "ARGS",
												"name": "args"
											}
										],
										"name": "insert",
										"endline": 545
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "tuple",
										"name": "ARGS"
									}
								],
								"name": "insert"
							},
							{
								"kind": "function",
								"line": 546,
								"endchar": 67,
								"char": 7,
								"type": "long(T value)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "remove",
								"endline": 546
							},
							{
								"kind": "template",
								"line": 547,
								"members": [
									{
										"kind": "function",
										"line": 547,
										"endchar": 36,
										"char": 7,
										"type": "void()",
										"name": "remove",
										"endline": 547
									}
								],
								"char": 7,
								"parameters": [],
								"name": "remove"
							},
							{
								"kind": "function",
								"line": 548,
								"endchar": 49,
								"char": 9,
								"type": "string()",
								"name": "pop",
								"endline": 548
							},
							{
								"kind": "function",
								"line": 549,
								"endchar": 44,
								"char": 7,
								"type": "long()",
								"name": "length",
								"endline": 549
							},
							{
								"kind": "function",
								"line": 551,
								"endchar": 62,
								"char": 9,
								"type": "string()",
								"name": "getRandom",
								"endline": 551
							},
							{
								"kind": "function",
								"line": 557,
								"endchar": 74,
								"char": 7,
								"type": "bool(T value)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "contains",
								"endline": 557
							},
							{
								"kind": "function",
								"line": 559,
								"endchar": 2,
								"char": 6,
								"type": "int(scope int delegate(T value) del)",
								"parameters": [
									{
										"storageClass": [
											"scope"
										],
										"type": "int delegate(T value)",
										"name": "del"
									}
								],
								"name": "opApply",
								"endline": 565
							},
							{
								"kind": "function",
								"line": 567,
								"endchar": 2,
								"char": 7,
								"type": "bool(scope RedisSet[] sets...)",
								"parameters": [
									{
										"storageClass": [
											"scope"
										],
										"type": "RedisSet[]",
										"name": "sets"
									}
								],
								"name": "intersects",
								"endline": 572
							},
							{
								"kind": "function",
								"line": 574,
								"storageClass": [
									"auto"
								],
								"endchar": 2,
								"char": 7,
								"type": "()",
								"name": "getAll",
								"endline": 578
							}
						],
						"char": 1,
						"name": "RedisSet"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "T"
					}
				],
				"comment": " Represents a Redis set value.\n\n\tIn addition to the methods specific to set values, all operations of\n\t$(D RedisValue) are available using an $(D alias this) declaration.\n",
				"name": "RedisSet"
			},
			{
				"kind": "template",
				"line": 591,
				"members": [
					{
						"kind": "struct",
						"line": 591,
						"members": [
							{
								"kind": "variable",
								"line": 592,
								"char": 13,
								"type": "RedisValue",
								"name": "value"
							},
							{
								"kind": "constructor",
								"line": 595,
								"endchar": 68,
								"char": 2,
								"type": "(RedisDatabase db, string key)",
								"parameters": [
									{
										"type": "RedisDatabase",
										"name": "db"
									},
									{
										"type": "string",
										"name": "key"
									}
								],
								"name": "this",
								"endline": 595
							},
							{
								"kind": "template",
								"line": 597,
								"members": [
									{
										"kind": "function",
										"line": 597,
										"endchar": 67,
										"char": 7,
										"type": "long(ARGS args)",
										"parameters": [
											{
												"type": "ARGS",
												"name": "args"
											}
										],
										"name": "insert",
										"endline": 597
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "tuple",
										"name": "ARGS"
									}
								],
								"name": "insert"
							},
							{
								"kind": "template",
								"line": 598,
								"members": [
									{
										"kind": "function",
										"line": 598,
										"endchar": 73,
										"char": 7,
										"type": "long(ARGS members)",
										"parameters": [
											{
												"type": "ARGS",
												"name": "members"
											}
										],
										"name": "remove",
										"endline": 598
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "tuple",
										"name": "ARGS"
									}
								],
								"name": "remove"
							},
							{
								"kind": "function",
								"line": 599,
								"endchar": 44,
								"char": 7,
								"type": "long()",
								"name": "length",
								"endline": 599
							},
							{
								"kind": "template",
								"line": 601,
								"constraint": "INT == \"[]\"",
								"members": [
									{
										"kind": "function",
										"line": 601,
										"endchar": 2,
										"char": 7,
										"type": "long(double min, double max)",
										"parameters": [
											{
												"deco": "d",
												"name": "min"
											},
											{
												"deco": "d",
												"name": "max"
											}
										],
										"name": "count",
										"endline": 605
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "value",
										"defaultValue": "\"[]\"",
										"type": "string",
										"name": "INT"
									}
								],
								"name": "count"
							},
							{
								"kind": "function",
								"line": 607,
								"endchar": 97,
								"char": 7,
								"type": "long(long start, long end)",
								"parameters": [
									{
										"deco": "l",
										"name": "start"
									},
									{
										"deco": "l",
										"name": "end"
									}
								],
								"name": "removeRangeByRank",
								"endline": 607
							},
							{
								"kind": "template",
								"line": 608,
								"constraint": "INT == \"[]\"",
								"members": [
									{
										"kind": "function",
										"line": 608,
										"endchar": 135,
										"char": 7,
										"type": "long(double min, double max)",
										"parameters": [
											{
												"deco": "d",
												"name": "min"
											},
											{
												"deco": "d",
												"name": "max"
											}
										],
										"name": "removeRangeByScore",
										"endline": 608
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "value",
										"defaultValue": "\"[]\"",
										"type": "string",
										"name": "INT"
									}
								],
								"name": "removeRangeByScore"
							},
							{
								"kind": "template",
								"line": 610,
								"constraint": "op == \"+\"",
								"members": [
									{
										"kind": "function",
										"line": 610,
										"endchar": 125,
										"char": 9,
										"type": "double(double value, string member)",
										"parameters": [
											{
												"deco": "d",
												"name": "value"
											},
											{
												"type": "string",
												"name": "member"
											}
										],
										"name": "opIndexOpAssign",
										"endline": 610
									}
								],
								"char": 9,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"name": "opIndexOpAssign"
							},
							{
								"kind": "function",
								"line": 612,
								"endchar": 66,
								"char": 7,
								"type": "long(string member)",
								"parameters": [
									{
										"type": "string",
										"name": "member"
									}
								],
								"name": "getRank",
								"endline": 612
							},
							{
								"kind": "function",
								"line": 613,
								"endchar": 76,
								"char": 7,
								"type": "long(string member)",
								"parameters": [
									{
										"type": "string",
										"name": "member"
									}
								],
								"name": "getReverseRank",
								"endline": 613
							}
						],
						"char": 1,
						"name": "RedisZSet"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "T"
					}
				],
				"comment": " Represents a Redis sorted set value.\n\n\tIn addition to the methods specific to sorted set values, all operations of\n\t$(D RedisValue) are available using an $(D alias this) declaration.\n",
				"name": "RedisZSet"
			}
		],
		"name": "vibe.db.redis.types",
		"comment": "\tConvenience wrappers types for accessing Redis keys.\n\n\tNote that the API is still subject to change!\n\n\tCopyright: © 2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\http\\auth\\basic_auth.d",
		"members": [
			{
				"kind": "function",
				"line": 21,
				"deco": "FAyaDFAyaAyaZbZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
				"endchar": 1,
				"char": 27,
				"parameters": [
					{
						"deco": "Aya",
						"name": "realm"
					},
					{
						"deco": "DFAyaAyaZb",
						"name": "pwcheck"
					}
				],
				"name": "performBasicAuth",
				"comment": "\tReturns a request handler that enforces request to be authenticated using HTTP Basic Auth.\n",
				"originalType": "HTTPServerRequestDelegate(string realm, bool delegate(string user, string name) pwcheck)",
				"endline": 49
			},
			{
				"kind": "function",
				"line": 65,
				"deco": "FC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseAyaDFAyaAyaZbZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "C4vibe4http6server17HTTPServerRequest",
						"name": "req"
					},
					{
						"deco": "C4vibe4http6server18HTTPServerResponse",
						"name": "res"
					},
					{
						"deco": "Aya",
						"name": "realm"
					},
					{
						"deco": "DFAyaAyaZb",
						"name": "pwcheck"
					}
				],
				"name": "performBasicAuth",
				"comment": "\tEnforces HTTP Basic Auth authentication on the given req/res pair.\n\n\tParams:\n\t\treq = Request object that is to be checked\n\t\tres = Response object that will be used for authentication errors\n\t\trealm = HTTP Basic Auth realm reported to the client\n\t\tpwcheck = A delegate queried for validating user/password pairs\n\n\tReturns: Returns the name of the authenticated user.\n\n\tThrows: Throws a HTTPStatusExeption in case of an authentication failure.\n",
				"endline": 84
			},
			{
				"kind": "function",
				"line": 90,
				"deco": "FC4vibe4http6common11HTTPRequestAyaAyaZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "C4vibe4http6common11HTTPRequest",
						"name": "req"
					},
					{
						"deco": "Aya",
						"name": "user"
					},
					{
						"deco": "Aya",
						"name": "password"
					}
				],
				"name": "addBasicAuth",
				"comment": "\tAugments the given HTTP request with an HTTP Basic Auth header.\n",
				"endline": 95
			}
		],
		"name": "vibe.http.auth.basic_auth",
		"comment": "\tImplements HTTP Basic Auth.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\http\\auth\\digest_auth.d",
		"members": [
			{
				"kind": "enum",
				"line": 22,
				"members": [
					{
						"kind": "enum member",
						"line": 22,
						"value": "0",
						"char": 19,
						"name": "Valid"
					},
					{
						"kind": "enum member",
						"line": 22,
						"value": "1",
						"char": 26,
						"name": "Expired"
					},
					{
						"kind": "enum member",
						"line": 22,
						"value": "2",
						"char": 35,
						"name": "Invalid"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "NonceState"
			},
			{
				"kind": "class",
				"line": 24,
				"members": [
					{
						"kind": "variable",
						"line": 26,
						"deco": "Aya",
						"char": 9,
						"name": "realm",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 27,
						"deco": "Ah",
						"char": 10,
						"name": "secret",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 28,
						"deco": "m",
						"char": 8,
						"name": "timeout",
						"offset": 24
					},
					{
						"kind": "constructor",
						"line": 30,
						"deco": "FZC4vibe4http4auth11digest_auth14DigestAuthInfo",
						"endchar": 2,
						"char": 2,
						"name": "this",
						"originalType": "()",
						"endline": 34
					},
					{
						"kind": "function",
						"line": 36,
						"deco": "FxC4vibe4http6server17HTTPServerRequestZAya",
						"endchar": 2,
						"char": 9,
						"parameters": [
							{
								"deco": "xC4vibe4http6server17HTTPServerRequest",
								"name": "req"
							}
						],
						"name": "createNonce",
						"originalType": "string(in HTTPServerRequest req)",
						"endline": 45
					},
					{
						"kind": "function",
						"line": 47,
						"deco": "FxAyaxC4vibe4http6server17HTTPServerRequestZE4vibe4http4auth11digest_auth10NonceState",
						"endchar": 2,
						"char": 13,
						"parameters": [
							{
								"deco": "xAya",
								"name": "nonce"
							},
							{
								"deco": "xC4vibe4http6server17HTTPServerRequest",
								"name": "req"
							}
						],
						"name": "checkNonce",
						"originalType": "NonceState(in string nonce, in HTTPServerRequest req)",
						"endline": 60
					}
				],
				"char": 1,
				"name": "DigestAuthInfo"
			},
			{
				"kind": "function",
				"line": 101,
				"deco": "FC4vibe4http4auth11digest_auth14DigestAuthInfoDFAyaAyaZAyaZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
				"endchar": 1,
				"char": 27,
				"parameters": [
					{
						"deco": "C4vibe4http4auth11digest_auth14DigestAuthInfo",
						"name": "info"
					},
					{
						"deco": "DFAyaAyaZAya",
						"name": "pwhash"
					}
				],
				"name": "performDigestAuth",
				"comment": "\tReturns a request handler that enforces request to be authenticated using HTTP Digest Auth.\n",
				"originalType": "HTTPServerRequestDelegate(DigestAuthInfo info, string delegate(string realm, string user) pwhash)",
				"endline": 119
			},
			{
				"kind": "function",
				"line": 134,
				"deco": "FC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseC4vibe4http4auth11digest_auth14DigestAuthInfoDFAyaAyaZAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "C4vibe4http6server17HTTPServerRequest",
						"name": "req"
					},
					{
						"deco": "C4vibe4http6server18HTTPServerResponse",
						"name": "res"
					},
					{
						"deco": "C4vibe4http4auth11digest_auth14DigestAuthInfo",
						"name": "info"
					},
					{
						"deco": "DFAyaAyaZAya",
						"name": "pwhash"
					}
				],
				"name": "performDigestAuth",
				"comment": "\tEnforces HTTP Digest Auth authentication on the given req/res pair.\n\n\tParams:\n\t\treq = Request object that is to be checked\n\t\tres = Response object that will be used for authentication errors\n\t\tinfo = Digest authentication info object\n\t\tpwhash = A delegate queried for returning the digest password\n\n\tReturns: Returns the name of the authenticated user.\n\n\tThrows: Throws a HTTPStatusExeption in case of an authentication failure.\n",
				"endline": 143
			},
			{
				"kind": "function",
				"line": 155,
				"deco": "FAyaAyaAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "realm"
					},
					{
						"deco": "Aya",
						"name": "user"
					},
					{
						"deco": "Aya",
						"name": "password"
					}
				],
				"name": "createDigestPassword",
				"comment": "\tCreates the digest password from the user name, realm and password.\n\n\tParams:\n\t\trealm = The realm\n\t\tuser = The user name\n\t\tpassword = The plain text password\n\n\tReturns: Returns the digest password\n",
				"endline": 158
			}
		],
		"name": "vibe.http.auth.digest_auth",
		"comment": "\tImplements HTTP Digest Authentication.\n\n\tThis is a minimal implementation based on RFC 2069.\n\n\tCopyright: © 2015 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Kai Nacke\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\http\\client.d",
		"members": [
			{
				"kind": "import",
				"line": 10,
				"char": 15,
				"name": "vibe.core.net"
			},
			{
				"kind": "import",
				"line": 11,
				"char": 15,
				"name": "vibe.http.common"
			},
			{
				"kind": "import",
				"line": 12,
				"char": 15,
				"name": "vibe.inet.url"
			},
			{
				"kind": "function",
				"line": 56,
				"deco": "FAyaMDFMC4vibe4http6client17HTTPClientRequestZvC4vibe4http6client18HTTPClientSettingsZC4vibe4http6client18HTTPClientResponse",
				"endchar": 1,
				"char": 20,
				"parameters": [
					{
						"deco": "Aya",
						"name": "url"
					},
					{
						"deco": "DFMC4vibe4http6client17HTTPClientRequestZv",
						"storageClass": [
							"scope"
						],
						"default": "cast(void delegate(scope HTTPClientRequest req))null",
						"name": "requester"
					},
					{
						"deco": "C4vibe4http6client18HTTPClientSettings",
						"default": "defaultSettings",
						"name": "settings"
					}
				],
				"name": "requestHTTP",
				"comment": "\n\n\n\n\tPerforms a HTTP request on the specified URL.\n\n\tThe requester parameter allows to customize the request and to specify the request body for\n\tnon-GET requests before it is sent. A response object is then returned or passed to the\n\tresponder callback synchronously.\n\n\tNote that it is highly recommended to use one of the overloads that take a responder callback,\n\tas they can avoid some memory allocations and are safe against accidentially leaving stale\n\tresponse objects (objects whose response body wasn't fully read). For the returning overloads\n\tof the function it is recommended to put a $(D scope(exit)) right after the call in which\n\tHTTPClientResponse.dropBody is called to avoid this.\nExample:\nPosts a simple JSON request. Note that the server www.example.org does not\n\texists, so there will be no meaningful result.\n---\nimport vibe.core.log;\nimport vibe.http.client;\nimport vibe.stream.operations;\n\nvoid test()\n{\n\trequestHTTP(\"http://www.example.org/\",\n\t\t(scope req) {\n\t\t\treq.method = HTTPMethod.POST;\n\t\t\t//req.writeJsonBody([\"name\": \"My Name\"]);\n\t\t},\n\t\t(scope res) {\n\t\t\tlogInfo(\"Response: %s\", res.bodyReader.readAllUTF8());\n\t\t}\n\t);\n}\n\n---\n",
				"originalType": "HTTPClientResponse(string url, scope void delegate(scope HTTPClientRequest req) requester = null, HTTPClientSettings settings = defaultSettings)",
				"endline": 59
			},
			{
				"kind": "function",
				"line": 61,
				"deco": "FS4vibe4inet3url3URLMDFMC4vibe4http6client17HTTPClientRequestZvC4vibe4http6client18HTTPClientSettingsZC4vibe4http6client18HTTPClientResponse",
				"endchar": 1,
				"char": 20,
				"parameters": [
					{
						"deco": "S4vibe4inet3url3URL",
						"name": "url"
					},
					{
						"deco": "DFMC4vibe4http6client17HTTPClientRequestZv",
						"storageClass": [
							"scope"
						],
						"default": "cast(void delegate(scope HTTPClientRequest req))null",
						"name": "requester"
					},
					{
						"deco": "C4vibe4http6client18HTTPClientSettings",
						"default": "defaultSettings",
						"name": "settings"
					}
				],
				"name": "requestHTTP",
				"comment": "ditto\n",
				"originalType": "HTTPClientResponse(URL url, scope void delegate(scope HTTPClientRequest req) requester = null, HTTPClientSettings settings = defaultSettings)",
				"endline": 95
			},
			{
				"kind": "function",
				"line": 97,
				"deco": "FAyaMDFMC4vibe4http6client17HTTPClientRequestZvMDFMC4vibe4http6client18HTTPClientResponseZvC4vibe4http6client18HTTPClientSettingsZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "url"
					},
					{
						"deco": "DFMC4vibe4http6client17HTTPClientRequestZv",
						"storageClass": [
							"scope"
						],
						"name": "requester"
					},
					{
						"deco": "DFMC4vibe4http6client18HTTPClientResponseZv",
						"storageClass": [
							"scope"
						],
						"name": "responder"
					},
					{
						"deco": "C4vibe4http6client18HTTPClientSettings",
						"default": "defaultSettings",
						"name": "settings"
					}
				],
				"name": "requestHTTP",
				"comment": "ditto\n",
				"endline": 100
			},
			{
				"kind": "function",
				"line": 102,
				"deco": "FS4vibe4inet3url3URLMDFMC4vibe4http6client17HTTPClientRequestZvMDFMC4vibe4http6client18HTTPClientResponseZvC4vibe4http6client18HTTPClientSettingsZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "S4vibe4inet3url3URL",
						"name": "url"
					},
					{
						"deco": "DFMC4vibe4http6client17HTTPClientRequestZv",
						"storageClass": [
							"scope"
						],
						"name": "requester"
					},
					{
						"deco": "DFMC4vibe4http6client18HTTPClientResponseZv",
						"storageClass": [
							"scope"
						],
						"name": "responder"
					},
					{
						"deco": "C4vibe4http6client18HTTPClientSettings",
						"default": "defaultSettings",
						"name": "settings"
					}
				],
				"name": "requestHTTP",
				"comment": "ditto\n",
				"endline": 132
			},
			{
				"kind": "function",
				"line": 164,
				"storageClass": [
					"auto"
				],
				"deco": "FAyatbC4vibe4http6client18HTTPClientSettingsZS4vibe4core14connectionpool53__T16LockedConnectionTC4vibe4http6client10HTTPClientZ16LockedConnection",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "host"
					},
					{
						"deco": "t",
						"default": "cast(ushort)0u",
						"name": "port"
					},
					{
						"deco": "b",
						"default": "false",
						"name": "ssl"
					},
					{
						"deco": "C4vibe4http6client18HTTPClientSettings",
						"default": "defaultSettings",
						"name": "settings"
					}
				],
				"name": "connectHTTP",
				"comment": "\tReturns a HTTPClient proxy object that is connected to the specified host.\n\n\tInternally, a connection pool is used to reuse already existing connections. Note that\n\tusually requestHTTP should be used for making requests instead of manually using a\n\tHTTPClient to do so.\n",
				"originalType": "(string host, ushort port = 0, bool ssl = false, HTTPClientSettings settings = defaultSettings)",
				"endline": 188
			},
			{
				"kind": "class",
				"line": 198,
				"members": [
					{
						"kind": "variable",
						"line": 199,
						"deco": "S4vibe4inet3url3URL",
						"char": 6,
						"name": "proxyURL",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 200,
						"init": "Duration(100000000L)",
						"deco": "S4core4time8Duration",
						"char": 11,
						"name": "defaultKeepAliveTimeout",
						"offset": 72
					}
				],
				"char": 1,
				"name": "HTTPClientSettings",
				"comment": "\n\n\n\n\tDefines an HTTP/HTTPS proxy request or a connection timeout for an HTTPClient.\nExample:\n\n---\nvoid test() {\n\n\tHTTPClientSettings settings = new HTTPClientSettings;\n\tsettings.proxyURL = URL.parse(\"http://proxyuser:proxypass@192.168.2.50:3128\");\n\tsettings.defaultKeepAliveTimeout = 0.seconds; // closes connection immediately after receiving the data.\n\trequestHTTP(\"http://www.example.org\",\n\t            (scope req){\n\t\treq.method = HTTPMethod.GET;\n\t},\n\t(scope res){\n\t\tlogInfo(\"Headers:\");\n\t\tforeach(key, ref value; res.headers) {\n\t\t\tlogInfo(\"%s: %s\", key, value);\n\t\t}\n\t\tlogInfo(\"Response: %s\", res.bodyReader.readAllUTF8());\n\t}, settings);\n\n}\n\n---\n"
			},
			{
				"kind": "class",
				"line": 233,
				"members": [
					{
						"kind": "variable",
						"line": 234,
						"init": "4096",
						"storageClass": [
							"enum"
						],
						"deco": "i",
						"char": 7,
						"name": "maxHeaderLineLength"
					},
					{
						"kind": "function",
						"line": 251,
						"deco": "xFNdZxC4vibe4http6client18HTTPClientSettings",
						"endchar": 2,
						"char": 38,
						"name": "settings",
						"comment": " Get the current settings for the HTTP client.\n",
						"endline": 253
					},
					{
						"kind": "function",
						"line": 258,
						"storageClass": [
							"static"
						],
						"deco": "FAyaZv",
						"endchar": 66,
						"char": 14,
						"parameters": [
							{
								"deco": "Aya",
								"name": "str"
							}
						],
						"name": "setUserAgentString",
						"comment": "\t\tSets the default user agent string for new HTTP requests.\n",
						"endline": 258
					},
					{
						"kind": "function",
						"line": 266,
						"storageClass": [
							"static"
						],
						"deco": "FPFC4vibe6stream3ssl10SSLContextZvZv",
						"endchar": 88,
						"char": 14,
						"parameters": [
							{
								"deco": "PFC4vibe6stream3ssl10SSLContextZv",
								"name": "func"
							}
						],
						"name": "setSSLSetupCallback",
						"comment": "\t\tSets a callback that will be called for every SSL context that is created.\n\n\t\tSetting such a callback is useful for adjusting the validation parameters\n\t\tof the SSL context.\n",
						"endline": 266
					},
					{
						"kind": "function",
						"line": 273,
						"deco": "FAyatbC4vibe4http6client18HTTPClientSettingsZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "server"
							},
							{
								"deco": "t",
								"default": "cast(ushort)80u",
								"name": "port"
							},
							{
								"deco": "b",
								"default": "false",
								"name": "ssl"
							},
							{
								"deco": "C4vibe4http6client18HTTPClientSettings",
								"default": "defaultSettings",
								"name": "settings"
							}
						],
						"name": "connect",
						"comment": "\t\tConnects to a specific server.\n\n\t\tThis method may only be called if any previous connection has been closed.\n",
						"originalType": "void(string server, ushort port = 80, bool ssl = false, HTTPClientSettings settings = defaultSettings)",
						"endline": 290
					},
					{
						"kind": "function",
						"line": 297,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "disconnect",
						"comment": "\t\tForcefully closes the TCP connection.\n\n\t\tBefore calling this method, be sure that no request is currently being processed.\n",
						"endline": 312
					},
					{
						"kind": "function",
						"line": 383,
						"deco": "FMDFMC4vibe4http6client17HTTPClientRequestZvMDFMC4vibe4http6client18HTTPClientResponseZvZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "DFMC4vibe4http6client17HTTPClientRequestZv",
								"storageClass": [
									"scope"
								],
								"name": "requester"
							},
							{
								"deco": "DFMC4vibe4http6client18HTTPClientResponseZv",
								"storageClass": [
									"scope"
								],
								"name": "responder"
							}
						],
						"name": "request",
						"comment": "\t\tPerforms a HTTP request.\n\n\t\trequester is called first to populate the request with headers and the desired\n\t\tHTTP method and version. After a response has been received it is then passed\n\t\tto the caller which can in turn read the reponse body. Any part of the body\n\t\tthat has not been processed will automatically be consumed and dropped.\n\n\t\tNote that the second form of this method (returning a HTTPClientResponse) is\n\t\tnot recommended to use as it may accidentially block a HTTP connection when\n\t\tonly part of the response body was read and also requires a heap allocation\n\t\tfor the response object. The callback based version on the other hand uses\n\t\ta stack allocation and guarantees that the request has been fully processed\n\t\tonce it has returned.\n",
						"endline": 423
					},
					{
						"kind": "function",
						"line": 426,
						"deco": "FMDFC4vibe4http6client17HTTPClientRequestZvZC4vibe4http6client18HTTPClientResponse",
						"endchar": 2,
						"char": 21,
						"parameters": [
							{
								"deco": "DFC4vibe4http6client17HTTPClientRequestZv",
								"storageClass": [
									"scope"
								],
								"name": "requester"
							}
						],
						"name": "request",
						"comment": "ditto\n",
						"endline": 440
					}
				],
				"char": 7,
				"name": "HTTPClient",
				"comment": "\tImplementation of a HTTP 1.0/1.1 client with keep-alive support.\n\n\tNote that it is usually recommended to use requestHTTP for making requests as that will use a\n\tpool of HTTPClient instances to keep the number of connection establishments low while not\n\tblocking requests from different tasks.\n"
			},
			{
				"kind": "class",
				"line": 537,
				"base": "vibe.http.common.HTTPRequest",
				"members": [
					{
						"kind": "function",
						"line": 553,
						"deco": "xFNdZS4vibe4core3net14NetworkAddress",
						"endchar": 73,
						"char": 27,
						"name": "localAddress",
						"endline": 553
					},
					{
						"kind": "function",
						"line": 560,
						"deco": "xFNdZl",
						"endchar": 95,
						"char": 17,
						"name": "contentLength",
						"comment": "\t\tAccesses the Content-Length header of the request.\n\n\t\tNegative values correspond to an unset Content-Length header.\n",
						"endline": 560
					},
					{
						"kind": "function",
						"line": 562,
						"deco": "FNdlZv",
						"endchar": 2,
						"char": 17,
						"parameters": [
							{
								"deco": "l",
								"name": "value"
							}
						],
						"name": "contentLength",
						"comment": "ditto\n",
						"endline": 566
					},
					{
						"kind": "function",
						"line": 571,
						"deco": "FC4vibe4core6stream18RandomAccessStreamZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4core6stream18RandomAccessStream",
								"name": "data"
							}
						],
						"name": "writeBody",
						"comment": "\t\tWrites the whole response body at once using raw bytes.\n",
						"endline": 574
					},
					{
						"kind": "function",
						"line": 576,
						"deco": "FC4vibe4core6stream11InputStreamZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "data"
							}
						],
						"name": "writeBody",
						"comment": "ditto\n",
						"endline": 581
					},
					{
						"kind": "function",
						"line": 583,
						"deco": "FC4vibe4core6stream11InputStreammZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "data"
							},
							{
								"deco": "m",
								"name": "length"
							}
						],
						"name": "writeBody",
						"comment": "ditto\n",
						"endline": 588
					},
					{
						"kind": "function",
						"line": 590,
						"deco": "FAhAyaZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Ah",
								"name": "data"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "content_type"
							}
						],
						"name": "writeBody",
						"comment": "ditto\n",
						"endline": 596
					},
					{
						"kind": "template",
						"line": 601,
						"members": [
							{
								"kind": "function",
								"line": 601,
								"endchar": 2,
								"char": 7,
								"type": "void(T data, bool allow_chunked = false)",
								"parameters": [
									{
										"type": "T",
										"name": "data"
									},
									{
										"deco": "b",
										"default": "false",
										"name": "allow_chunked"
									}
								],
								"name": "writeJsonBody",
								"endline": 620
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "\t\tWrites the response body as JSON data.\n",
						"name": "writeJsonBody"
					},
					{
						"kind": "function",
						"line": 622,
						"deco": "FC4vibe4http6common9MultiPartZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4http6common9MultiPart",
								"name": "part"
							}
						],
						"name": "writePart",
						"endline": 625
					},
					{
						"kind": "function",
						"line": 633,
						"deco": "FNdZC4vibe4core6stream12OutputStream",
						"endchar": 2,
						"char": 25,
						"name": "bodyWriter",
						"comment": "\t\tAn output stream suitable for writing the request body.\n\n\t\tThe first retrieval will cause the request header to be written, make sure\n\t\tthat all headers are set up in advance.s\n",
						"endline": 652
					}
				],
				"char": 7,
				"name": "HTTPClientRequest",
				"comment": "\tRepresents a HTTP client request (as sent to the server).\n"
			},
			{
				"kind": "class",
				"line": 706,
				"base": "vibe.http.common.HTTPResponse",
				"members": [
					{
						"kind": "function",
						"line": 722,
						"deco": "xFNdZi",
						"endchar": 2,
						"char": 16,
						"name": "maxRequests",
						"comment": "Contains the keep-alive 'max' parameter, indicates how many requests a client can\n\nmake before the server closes the connection.\n",
						"endline": 724
					},
					{
						"kind": "destructor",
						"line": 787,
						"deco": "FZv",
						"endchar": 2,
						"char": 2,
						"name": "~this",
						"endline": 790
					},
					{
						"kind": "function",
						"line": 795,
						"deco": "FNdZC4vibe4core6stream11InputStream",
						"endchar": 2,
						"char": 24,
						"name": "bodyReader",
						"comment": "\t\tAn input stream suitable for reading the response body.\n",
						"endline": 830
					},
					{
						"kind": "function",
						"line": 842,
						"deco": "FMDFMC4vibe4core6stream11InputStreamZvZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "DFMC4vibe4core6stream11InputStreamZv",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"name": "readRawBody",
						"comment": "\t\tProvides unsafe means to read raw data from the connection.\n\n\t\tNo transfer decoding and no content decoding is done on the data.\n\n\t\tNot that the provided delegate must read the whole stream,\n\t\tas the state of the response is unknown after raw bytes have been\n\t\ttaken. Failure to read the right amount of data will lead to\n\t\tprotocol corruption in later requests.\n",
						"endline": 847
					},
					{
						"kind": "function",
						"line": 852,
						"deco": "FZS4vibe4data4json4Json",
						"endchar": 2,
						"char": 7,
						"name": "readJson",
						"comment": "\t\tReads the whole response body and tries to parse it as JSON.\n",
						"endline": 855
					},
					{
						"kind": "function",
						"line": 860,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "dropBody",
						"comment": "\t\tReads and discards the response body.\n",
						"endline": 870
					},
					{
						"kind": "function",
						"line": 881,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "disconnect",
						"comment": "\t\tForcefully terminates the connection regardless of the current state.\n\n\t\tNote that this will only actually disconnect if the request has not yet\n\t\tbeen fully processed. If the whole body was already read, the\n\t\tconnection is not owned by the current request operation anymore and\n\t\tcannot be accessed. Use a \"Connection: close\" header instead in this\n\t\tcase to let the server close the connection.\n",
						"endline": 884
					},
					{
						"kind": "destructor",
						"line": 787,
						"deco": "FZv",
						"char": 2,
						"name": "~this"
					},
					{
						"kind": "destructor",
						"line": 787,
						"deco": "FZv",
						"char": 2,
						"name": "~this"
					}
				],
				"char": 7,
				"name": "HTTPClientResponse",
				"comment": "\tRepresents a HTTP client response (as received from the server).\n"
			}
		],
		"name": "vibe.http.client",
		"comment": "\tA simple HTTP/1.1 client implementation.\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\http\\common.d",
		"members": [
			{
				"kind": "import",
				"line": 10,
				"char": 15,
				"name": "vibe.http.status"
			},
			{
				"kind": "enum",
				"line": 30,
				"members": [
					{
						"kind": "enum member",
						"line": 31,
						"value": "0",
						"char": 2,
						"name": "HTTP_1_0"
					},
					{
						"kind": "enum member",
						"line": 32,
						"value": "1",
						"char": 2,
						"name": "HTTP_1_1"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "HTTPVersion"
			},
			{
				"kind": "enum",
				"line": 36,
				"members": [
					{
						"kind": "enum member",
						"line": 38,
						"value": "0",
						"char": 2,
						"name": "GET"
					},
					{
						"kind": "enum member",
						"line": 39,
						"value": "1",
						"char": 2,
						"name": "HEAD"
					},
					{
						"kind": "enum member",
						"line": 40,
						"value": "2",
						"char": 2,
						"name": "PUT"
					},
					{
						"kind": "enum member",
						"line": 41,
						"value": "3",
						"char": 2,
						"name": "POST"
					},
					{
						"kind": "enum member",
						"line": 42,
						"value": "4",
						"char": 2,
						"name": "PATCH"
					},
					{
						"kind": "enum member",
						"line": 43,
						"value": "5",
						"char": 2,
						"name": "DELETE"
					},
					{
						"kind": "enum member",
						"line": 44,
						"value": "6",
						"char": 2,
						"name": "OPTIONS"
					},
					{
						"kind": "enum member",
						"line": 45,
						"value": "7",
						"char": 2,
						"name": "TRACE"
					},
					{
						"kind": "enum member",
						"line": 46,
						"value": "8",
						"char": 2,
						"name": "CONNECT"
					},
					{
						"kind": "enum member",
						"line": 49,
						"value": "9",
						"char": 2,
						"name": "COPY"
					},
					{
						"kind": "enum member",
						"line": 50,
						"value": "10",
						"char": 2,
						"name": "LOCK"
					},
					{
						"kind": "enum member",
						"line": 51,
						"value": "11",
						"char": 2,
						"name": "MKCOL"
					},
					{
						"kind": "enum member",
						"line": 52,
						"value": "12",
						"char": 2,
						"name": "MOVE"
					},
					{
						"kind": "enum member",
						"line": 53,
						"value": "13",
						"char": 2,
						"name": "PROPFIND"
					},
					{
						"kind": "enum member",
						"line": 54,
						"value": "14",
						"char": 2,
						"name": "PROPPATCH"
					},
					{
						"kind": "enum member",
						"line": 55,
						"value": "15",
						"char": 2,
						"name": "UNLOCK"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "HTTPMethod"
			},
			{
				"kind": "function",
				"line": 62,
				"deco": "FE4vibe4http6common10HTTPMethodZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "E4vibe4http6common10HTTPMethod",
						"name": "m"
					}
				],
				"name": "httpMethodString",
				"comment": "\tReturns the string representation of the given HttpMethod.\n",
				"endline": 65
			},
			{
				"kind": "function",
				"line": 70,
				"deco": "FAyaZE4vibe4http6common10HTTPMethod",
				"endchar": 1,
				"char": 12,
				"parameters": [
					{
						"deco": "Aya",
						"name": "str"
					}
				],
				"name": "httpMethodFromString",
				"comment": "\tReturns the HttpMethod value matching the given HTTP method string.\n",
				"endline": 91
			},
			{
				"kind": "template",
				"line": 105,
				"members": [
					{
						"kind": "function",
						"line": 105,
						"endchar": 1,
						"char": 3,
						"type": "T(T condition, HTTPStatus statusCode, lazy string message = null, string file = __FILE__, typeof(105) line = __LINE__)",
						"parameters": [
							{
								"type": "T",
								"name": "condition"
							},
							{
								"type": "HTTPStatus",
								"name": "statusCode"
							},
							{
								"storageClass": [
									"lazy"
								],
								"default": "null",
								"type": "string",
								"name": "message"
							},
							{
								"default": "__FILE__",
								"type": "string",
								"name": "file"
							},
							{
								"default": "__LINE__",
								"type": "typeof(105)",
								"name": "line"
							}
						],
						"name": "enforceHTTP",
						"endline": 108
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tUtility function that throws a HTTPStatusException if the _condition is not met.\n",
				"name": "enforceHTTP"
			},
			{
				"kind": "template",
				"line": 113,
				"members": [
					{
						"kind": "function",
						"line": 113,
						"endchar": 1,
						"char": 3,
						"type": "T(T condition, lazy string message = null, string file = __FILE__, typeof(113) line = __LINE__)",
						"parameters": [
							{
								"type": "T",
								"name": "condition"
							},
							{
								"storageClass": [
									"lazy"
								],
								"default": "null",
								"type": "string",
								"name": "message"
							},
							{
								"default": "__FILE__",
								"type": "string",
								"name": "file"
							},
							{
								"default": "__LINE__",
								"type": "typeof(113)",
								"name": "line"
							}
						],
						"name": "enforceBadRequest",
						"endline": 116
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tUtility function that throws a HTTPStatusException with status code \"400 Bad Request\" if the _condition is not met.\n",
				"name": "enforceBadRequest"
			},
			{
				"kind": "class",
				"line": 122,
				"members": [
					{
						"kind": "variable",
						"line": 124,
						"protection": "protected",
						"deco": "C4vibe4core6stream6Stream",
						"char": 10,
						"name": "m_conn",
						"originalType": "Stream",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 129,
						"init": "cast(HTTPVersion)1",
						"deco": "E4vibe4http6common11HTTPVersion",
						"char": 15,
						"name": "httpVersion",
						"comment": "The HTTP protocol version used for the request\n",
						"offset": 12
					},
					{
						"kind": "variable",
						"line": 132,
						"init": "cast(HTTPMethod)0",
						"deco": "E4vibe4http6common10HTTPMethod",
						"char": 14,
						"name": "method",
						"comment": "The HTTP _method of the request\n",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 140,
						"init": "\"/\"",
						"deco": "Aya",
						"char": 10,
						"name": "requestURL",
						"comment": " The request URL\n\n\t\t\tNote that the request URL usually does not include the global\n\t\t\t'http://server' part, but only the local path and a query string.\n\t\t\tA possible exception is a proxy server, which will get full URLs.\n",
						"offset": 20
					},
					{
						"kind": "variable",
						"line": 143,
						"deco": "S4vibe5utils14dictionarylist33__T14DictionaryListTAyaVbi0Vki32Z14DictionaryList",
						"char": 17,
						"name": "headers",
						"comment": "All request _headers\n",
						"originalType": "InetHeaderMap",
						"offset": 28
					},
					{
						"kind": "constructor",
						"line": 146,
						"protection": "protected",
						"deco": "FC4vibe4core6stream6StreamZC4vibe4http6common11HTTPRequest",
						"endchar": 2,
						"char": 12,
						"parameters": [
							{
								"deco": "C4vibe4core6stream6Stream",
								"name": "conn"
							}
						],
						"name": "this",
						"originalType": "(Stream conn)",
						"endline": 149
					},
					{
						"kind": "constructor",
						"line": 151,
						"protection": "protected",
						"deco": "FZC4vibe4http6common11HTTPRequest",
						"endchar": 2,
						"char": 12,
						"name": "this",
						"originalType": "()",
						"endline": 153
					},
					{
						"kind": "function",
						"line": 155,
						"storageClass": [
							"override"
						],
						"deco": "FZAya",
						"endchar": 2,
						"char": 25,
						"name": "toString",
						"endline": 158,
						"overrides": [
							"object.Object.toString"
						]
					},
					{
						"kind": "function",
						"line": 162,
						"deco": "xFNdZAya",
						"endchar": 87,
						"char": 19,
						"name": "host",
						"comment": " Shortcut to the 'Host' header (always present for HTTP 1.1)\n",
						"endline": 162
					},
					{
						"kind": "function",
						"line": 164,
						"deco": "FNdAyaZv",
						"endchar": 55,
						"char": 17,
						"parameters": [
							{
								"deco": "Aya",
								"name": "v"
							}
						],
						"name": "host",
						"comment": "ditto\n",
						"endline": 164
					},
					{
						"kind": "function",
						"line": 173,
						"deco": "xFNdZAya",
						"endchar": 2,
						"char": 19,
						"name": "contentType",
						"comment": " Returns the mime type part of the 'Content-Type' header.\n\n\t\tThis function gets the pure mime type (e.g. \"text/plain\")\n\t\twithout any supplimentary parameters such as \"charset=...\".\n\t\tUse contentTypeParameters to get any parameter string or\n\t\theaders[\"Content-Type\"] to get the raw value.\n",
						"endline": 179
					},
					{
						"kind": "function",
						"line": 181,
						"deco": "FNdAyaZv",
						"endchar": 72,
						"char": 17,
						"parameters": [
							{
								"deco": "Aya",
								"name": "ct"
							}
						],
						"name": "contentType",
						"comment": "ditto\n",
						"endline": 181
					},
					{
						"kind": "function",
						"line": 188,
						"deco": "xFNdZAya",
						"endchar": 2,
						"char": 19,
						"name": "contentTypeParameters",
						"comment": " Returns any supplementary parameters of the 'Content-Type' header.\n\n\t\tThis is a semicolon separated ist of key/value pairs. Usually, if set,\n\t\tthis contains the character set used for text based content types.\n",
						"endline": 194
					},
					{
						"kind": "function",
						"line": 198,
						"deco": "xFNdZb",
						"endchar": 2,
						"char": 17,
						"name": "persistent",
						"comment": " Determines if the connection persists across requests.\n",
						"endline": 211
					}
				],
				"char": 1,
				"name": "HTTPRequest",
				"comment": "\tRepresents an HTTP request made to a server.\n"
			},
			{
				"kind": "class",
				"line": 218,
				"members": [
					{
						"kind": "variable",
						"line": 221,
						"init": "cast(HTTPVersion)1",
						"deco": "E4vibe4http6common11HTTPVersion",
						"char": 15,
						"name": "httpVersion",
						"comment": "The protocol version of the response - should not be changed\n",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 224,
						"init": "200",
						"deco": "i",
						"char": 7,
						"name": "statusCode",
						"comment": "The status code of the response, 200 by default\n",
						"offset": 12
					},
					{
						"kind": "variable",
						"line": 230,
						"deco": "Aya",
						"char": 10,
						"name": "statusPhrase",
						"comment": " The status phrase of the response\n\n\t\t\tIf no phrase is set, a default one corresponding to the status code will be used.\n",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 233,
						"deco": "S4vibe5utils14dictionarylist33__T14DictionaryListTAyaVbi0Vki32Z14DictionaryList",
						"char": 17,
						"name": "headers",
						"comment": "The response header fields\n",
						"originalType": "InetHeaderMap",
						"offset": 24
					},
					{
						"kind": "variable",
						"line": 236,
						"deco": "HAyaC4vibe4http6common6Cookie",
						"char": 18,
						"name": "cookies",
						"comment": "All cookies that shall be set on the client for this request\n",
						"offset": 676
					},
					{
						"kind": "function",
						"line": 239,
						"storageClass": [
							"override"
						],
						"deco": "FZAya",
						"endchar": 2,
						"char": 25,
						"name": "toString",
						"endline": 244,
						"overrides": [
							"object.Object.toString"
						]
					},
					{
						"kind": "function",
						"line": 248,
						"deco": "xFNdZAya",
						"endchar": 127,
						"char": 19,
						"name": "contentType",
						"comment": " Shortcut to the \"Content-Type\" header\n",
						"endline": 248
					},
					{
						"kind": "function",
						"line": 250,
						"deco": "FNdAyaZv",
						"endchar": 72,
						"char": 17,
						"parameters": [
							{
								"deco": "Aya",
								"name": "ct"
							}
						],
						"name": "contentType",
						"comment": "ditto\n",
						"endline": 250
					}
				],
				"char": 1,
				"name": "HTTPResponse",
				"comment": "\tRepresents the HTTP response from the server back to the client.\n"
			},
			{
				"kind": "class",
				"line": 259,
				"base": "object.Exception",
				"members": [
					{
						"kind": "constructor",
						"line": 264,
						"deco": "FiAyaAyaiC6object9ThrowableZC4vibe4http6common19HTTPStatusException",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "i",
								"name": "status"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "message"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "i",
								"default": "__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"name": "this",
						"originalType": "(int status, string message = null, string file = __FILE__, int line = __LINE__, Throwable next = null)",
						"endline": 268
					},
					{
						"kind": "function",
						"line": 271,
						"deco": "xFNdZi",
						"endchar": 50,
						"char": 16,
						"name": "status",
						"comment": "The HTTP status code\n",
						"endline": 271
					},
					{
						"kind": "variable",
						"line": 273,
						"deco": "Aya",
						"char": 9,
						"name": "debugMessage",
						"offset": 40
					}
				],
				"char": 1,
				"name": "HTTPStatusException",
				"comment": "\tRespresents a HTTP response status.\n\n\tThrowing this exception from within a request handler will produce a matching error page.\n"
			},
			{
				"kind": "class",
				"line": 277,
				"members": [
					{
						"kind": "variable",
						"line": 278,
						"deco": "Aya",
						"char": 9,
						"name": "contentType",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 280,
						"deco": "C4vibe4core6stream11InputStream",
						"char": 14,
						"name": "stream",
						"originalType": "InputStream",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 282,
						"deco": "HAyaAya",
						"char": 17,
						"name": "form",
						"offset": 20
					}
				],
				"char": 7,
				"name": "MultiPart"
			},
			{
				"kind": "function",
				"line": 285,
				"deco": "FE4vibe4http6common11HTTPVersionZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "E4vibe4http6common11HTTPVersion",
						"name": "ver"
					}
				],
				"name": "getHTTPVersionString",
				"endline": 291
			},
			{
				"kind": "function",
				"line": 294,
				"deco": "FKAyaZE4vibe4http6common11HTTPVersion",
				"endchar": 1,
				"char": 13,
				"parameters": [
					{
						"deco": "Aya",
						"storageClass": [
							"ref"
						],
						"name": "str"
					}
				],
				"name": "parseHTTPVersion",
				"endline": 305
			},
			{
				"kind": "class",
				"line": 311,
				"members": [
					{
						"kind": "constructor",
						"line": 317,
						"deco": "FC4vibe4core6stream11InputStreamZC4vibe4http6common18ChunkedInputStream",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							}
						],
						"name": "this",
						"originalType": "(InputStream stream)",
						"endline": 322
					},
					{
						"kind": "function",
						"line": 324,
						"deco": "xFNdZb",
						"endchar": 68,
						"char": 17,
						"name": "empty",
						"endline": 324,
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						]
					},
					{
						"kind": "function",
						"line": 326,
						"deco": "xFNdZm",
						"endchar": 68,
						"char": 18,
						"name": "leastSize",
						"endline": 326,
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						]
					},
					{
						"kind": "function",
						"line": 328,
						"deco": "FNdZb",
						"endchar": 105,
						"char": 17,
						"name": "dataAvailableForRead",
						"endline": 328,
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						]
					},
					{
						"kind": "function",
						"line": 330,
						"deco": "FZAxh",
						"endchar": 2,
						"char": 17,
						"name": "peek",
						"endline": 334,
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						]
					},
					{
						"kind": "function",
						"line": 336,
						"deco": "FAhZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Ah",
								"name": "dst"
							}
						],
						"name": "read",
						"endline": 355,
						"overrides": [
							"vibe.core.stream.InputStream.read"
						]
					}
				],
				"char": 7,
				"interfaces": [
					"vibe.core.stream.InputStream"
				],
				"name": "ChunkedInputStream",
				"comment": "\tTakes an input stream that contains data in HTTP chunked format and outputs the raw data.\n"
			},
			{
				"kind": "class",
				"line": 380,
				"members": [
					{
						"kind": "constructor",
						"line": 388,
						"deco": "FC4vibe4core6stream12OutputStreamC4vibe5utils6memory9AllocatorZC4vibe4http6common19ChunkedOutputStream",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream12OutputStream",
								"name": "stream"
							},
							{
								"deco": "C4vibe5utils6memory9Allocator",
								"default": "defaultAllocator()",
								"name": "alloc"
							}
						],
						"name": "this",
						"originalType": "(OutputStream stream, Allocator alloc = defaultAllocator())",
						"endline": 392
					},
					{
						"kind": "function",
						"line": 399,
						"deco": "xFNdZk",
						"endchar": 67,
						"char": 19,
						"name": "maxBufferSize",
						"comment": " Maximum buffer size used to buffer individual chunks.\n\n\t\tA size of zero means unlimited buffer size. Explicit flush is required\n\t\tin this case to empty the buffer.\n",
						"originalType": "const @property size_t()",
						"endline": 399
					},
					{
						"kind": "function",
						"line": 401,
						"deco": "FNdkZv",
						"endchar": 126,
						"char": 17,
						"parameters": [
							{
								"deco": "k",
								"name": "bytes"
							}
						],
						"name": "maxBufferSize",
						"comment": "ditto\n",
						"originalType": "@property void(size_t bytes)",
						"endline": 401
					},
					{
						"kind": "function",
						"line": 403,
						"deco": "FxAhZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes_"
							}
						],
						"name": "write",
						"originalType": "void(in ubyte[] bytes_)",
						"endline": 418,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					},
					{
						"kind": "function",
						"line": 420,
						"deco": "FC4vibe4core6stream11InputStreammZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "data"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "nbytes"
							}
						],
						"name": "write",
						"originalType": "void(InputStream data, ulong nbytes = 0)",
						"endline": 439,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					},
					{
						"kind": "function",
						"line": 441,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "flush",
						"endline": 452,
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						]
					},
					{
						"kind": "function",
						"line": 454,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "finalize",
						"endline": 462,
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						]
					}
				],
				"char": 7,
				"interfaces": [
					"vibe.core.stream.OutputStream"
				],
				"name": "ChunkedOutputStream",
				"comment": "\tOutputs data to an output stream in HTTP chunked format.\n"
			},
			{
				"kind": "class",
				"line": 471,
				"members": [
					{
						"kind": "function",
						"line": 482,
						"deco": "FNdAyaZv",
						"endchar": 56,
						"char": 17,
						"parameters": [
							{
								"deco": "Aya",
								"name": "value"
							}
						],
						"name": "value",
						"endline": 482
					},
					{
						"kind": "function",
						"line": 483,
						"deco": "xFNdZAya",
						"endchar": 51,
						"char": 19,
						"name": "value",
						"endline": 483
					},
					{
						"kind": "function",
						"line": 485,
						"deco": "FNdAyaZv",
						"endchar": 58,
						"char": 17,
						"parameters": [
							{
								"deco": "Aya",
								"name": "value"
							}
						],
						"name": "domain",
						"endline": 485
					},
					{
						"kind": "function",
						"line": 486,
						"deco": "xFNdZAya",
						"endchar": 53,
						"char": 19,
						"name": "domain",
						"endline": 486
					},
					{
						"kind": "function",
						"line": 488,
						"deco": "FNdAyaZv",
						"endchar": 54,
						"char": 17,
						"parameters": [
							{
								"deco": "Aya",
								"name": "value"
							}
						],
						"name": "path",
						"endline": 488
					},
					{
						"kind": "function",
						"line": 489,
						"deco": "xFNdZAya",
						"endchar": 49,
						"char": 19,
						"name": "path",
						"endline": 489
					},
					{
						"kind": "function",
						"line": 491,
						"deco": "FNdAyaZv",
						"endchar": 60,
						"char": 17,
						"parameters": [
							{
								"deco": "Aya",
								"name": "value"
							}
						],
						"name": "expires",
						"endline": 491
					},
					{
						"kind": "function",
						"line": 492,
						"deco": "xFNdZAya",
						"endchar": 55,
						"char": 19,
						"name": "expires",
						"endline": 492
					},
					{
						"kind": "function",
						"line": 494,
						"deco": "FNdlZv",
						"endchar": 56,
						"char": 17,
						"parameters": [
							{
								"deco": "l",
								"name": "value"
							}
						],
						"name": "maxAge",
						"endline": 494
					},
					{
						"kind": "function",
						"line": 495,
						"deco": "xFNdZl",
						"endchar": 51,
						"char": 17,
						"name": "maxAge",
						"endline": 495
					},
					{
						"kind": "function",
						"line": 497,
						"deco": "FNdbZv",
						"endchar": 56,
						"char": 17,
						"parameters": [
							{
								"deco": "b",
								"name": "value"
							}
						],
						"name": "secure",
						"endline": 497
					},
					{
						"kind": "function",
						"line": 498,
						"deco": "xFNdZb",
						"endchar": 51,
						"char": 17,
						"name": "secure",
						"endline": 498
					},
					{
						"kind": "function",
						"line": 500,
						"deco": "FNdbZv",
						"endchar": 60,
						"char": 17,
						"parameters": [
							{
								"deco": "b",
								"name": "value"
							}
						],
						"name": "httpOnly",
						"endline": 500
					},
					{
						"kind": "function",
						"line": 501,
						"deco": "xFNdZb",
						"endchar": 55,
						"char": 17,
						"name": "httpOnly",
						"endline": 501
					},
					{
						"kind": "template",
						"line": 503,
						"constraint": "isOutputRange!(R, char)",
						"members": [
							{
								"kind": "function",
								"line": 503,
								"endchar": 2,
								"char": 7,
								"type": "void(R dst, string name)",
								"parameters": [
									{
										"type": "R",
										"name": "dst"
									},
									{
										"type": "string",
										"name": "name"
									}
								],
								"name": "writeString",
								"endline": 525
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "R"
							}
						],
						"name": "writeString"
					}
				],
				"char": 7,
				"name": "Cookie"
			},
			{
				"kind": "struct",
				"line": 531,
				"members": [
					{
						"kind": "struct",
						"line": 532,
						"members": [
							{
								"kind": "variable",
								"line": 533,
								"deco": "Aya",
								"char": 10,
								"name": "name",
								"offset": 0
							},
							{
								"kind": "variable",
								"line": 534,
								"deco": "Aya",
								"char": 10,
								"name": "value",
								"offset": 8
							}
						],
						"char": 2,
						"name": "Cookie"
					},
					{
						"kind": "function",
						"line": 541,
						"deco": "xFAyaAyaZAya",
						"endchar": 2,
						"char": 9,
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "def_value"
							}
						],
						"name": "get",
						"endline": 546
					},
					{
						"kind": "function",
						"line": 548,
						"deco": "xFAyaZAAya",
						"endchar": 2,
						"char": 11,
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"name": "getAll",
						"endline": 555
					},
					{
						"kind": "function",
						"line": 557,
						"deco": "FAyaAyaZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "value"
							},
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"name": "opIndexAssign",
						"endline": 560
					},
					{
						"kind": "function",
						"line": 562,
						"deco": "xFAyaZAya",
						"endchar": 2,
						"char": 9,
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"name": "opIndex",
						"endline": 568
					},
					{
						"kind": "function",
						"line": 570,
						"deco": "FMDFKS4vibe4http6common14CookieValueMap6CookieZiZi",
						"endchar": 2,
						"char": 6,
						"parameters": [
							{
								"deco": "DFKS4vibe4http6common14CookieValueMap6CookieZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"name": "opApply",
						"endline": 576
					},
					{
						"kind": "function",
						"line": 578,
						"deco": "xFMDFKS4vibe4http6common14CookieValueMap6CookieZiZi",
						"endchar": 2,
						"char": 6,
						"parameters": [
							{
								"deco": "DFKS4vibe4http6common14CookieValueMap6CookieZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"name": "opApply",
						"endline": 584
					},
					{
						"kind": "function",
						"line": 586,
						"deco": "FMDFKAyaKAyaZiZi",
						"endchar": 2,
						"char": 6,
						"parameters": [
							{
								"deco": "DFKAyaKAyaZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"name": "opApply",
						"endline": 592
					},
					{
						"kind": "function",
						"line": 594,
						"deco": "xFMDFKAyaKAyaZiZi",
						"endchar": 2,
						"char": 6,
						"parameters": [
							{
								"deco": "DFKAyaKAyaZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"name": "opApply",
						"endline": 600
					},
					{
						"kind": "template",
						"line": 602,
						"constraint": "op == \"in\"",
						"members": [
							{
								"kind": "function",
								"line": 602,
								"endchar": 2,
								"char": 17,
								"type": "inout inout(string)*(string name)",
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"name": "opBinaryRight",
								"endline": 612
							}
						],
						"char": 17,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"name": "opBinaryRight"
					}
				],
				"char": 1,
				"name": "CookieValueMap",
				"comment": "\n"
			}
		],
		"name": "vibe.http.common",
		"comment": "\tCommon classes for HTTP clients and servers.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\http\\dist.d",
		"members": [
			{
				"kind": "function",
				"line": 26,
				"deco": "FC4vibe4http6server18HTTPServerSettingsDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvAyatZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "C4vibe4http6server18HTTPServerSettings",
						"name": "settings"
					},
					{
						"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
						"name": "handler"
					},
					{
						"deco": "Aya",
						"name": "balancer_address"
					},
					{
						"deco": "t",
						"default": "cast(ushort)11000u",
						"name": "balancer_port"
					}
				],
				"name": "listenHTTPDist",
				"comment": "\tListens for HTTP connections on the spefified load balancer using the given HTTP server settings.\n\n\tThis function is usable as direct replacement of\n",
				"originalType": "void(HTTPServerSettings settings, HTTPServerRequestDelegate handler, string balancer_address, ushort balancer_port = 11000)",
				"endline": 50
			}
		],
		"name": "vibe.http.dist",
		"comment": "\tInterface for the VibeDist load balancer\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\http\\fileserver.d",
		"members": [
			{
				"kind": "function",
				"line": 28,
				"deco": "FS4vibe4inet4path4PathC4vibe4http10fileserver22HTTPFileServerSettingsZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
				"endchar": 1,
				"char": 27,
				"parameters": [
					{
						"deco": "S4vibe4inet4path4Path",
						"name": "local_path"
					},
					{
						"deco": "C4vibe4http10fileserver22HTTPFileServerSettings",
						"default": "null",
						"name": "settings"
					}
				],
				"name": "serveStaticFiles",
				"comment": "\tReturns a request handler that serves files from the specified directory.\n\n\tSee_Also: serveStaticFile\nExample:\n\n---\nimport vibe.http.fileserver;\nimport vibe.http.router;\nimport vibe.http.server;\n\nvoid setupServer()\n{\n\tauto router = new URLRouter;\n\t// add other routes here\n\trouter.get(\"*\", serveStaticFiles(\"public/\"));\n\n\tauto settings = new HTTPServerSettings;\n\tlistenHTTP(settings, router);\n}\n\n---\nExample:\nThis example serves all files in the \"public\" sub directory\n\twith an added prefix \"static/\" so that they don't interfere\n\twith other registered routes.\n---\nimport vibe.http.fileserver;\nimport vibe.http.router;\nimport vibe.http.server;\n\nvoid setupRoutes()\n{\n \tauto router = new URLRouter;\n\t// add other routes here\n\n\tauto fsettings = new HTTPFileServerSettings;\n \t\tfsettings.serverPathPrefix = \"/static\";\n \t\trouter.get(\"static/*\", serveStaticFiles(\"public/\", fsettings));\n\n\tauto settings = new HTTPServerSettings;\n\tlistenHTTP(settings, router);\n \t}\n\n---\n",
				"originalType": "HTTPServerRequestDelegate(Path local_path, HTTPFileServerSettings settings = null)",
				"endline": 61
			},
			{
				"kind": "function",
				"line": 63,
				"deco": "FAyaC4vibe4http10fileserver22HTTPFileServerSettingsZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
				"endchar": 1,
				"char": 27,
				"parameters": [
					{
						"deco": "Aya",
						"name": "local_path"
					},
					{
						"deco": "C4vibe4http10fileserver22HTTPFileServerSettings",
						"default": "null",
						"name": "settings"
					}
				],
				"name": "serveStaticFiles",
				"comment": "ditto\n",
				"originalType": "HTTPServerRequestDelegate(string local_path, HTTPFileServerSettings settings = null)",
				"endline": 66
			},
			{
				"kind": "function",
				"line": 114,
				"deco": "FS4vibe4inet4path4PathC4vibe4http10fileserver22HTTPFileServerSettingsZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
				"endchar": 1,
				"char": 27,
				"parameters": [
					{
						"deco": "S4vibe4inet4path4Path",
						"name": "local_path"
					},
					{
						"deco": "C4vibe4http10fileserver22HTTPFileServerSettings",
						"default": "null",
						"name": "settings"
					}
				],
				"name": "serveStaticFile",
				"comment": "\tReturns a request handler that serves a specific file on disk.\n\n\tSee_Also: serveStaticFiles\n",
				"originalType": "HTTPServerRequestDelegate(Path local_path, HTTPFileServerSettings settings = null)",
				"endline": 125
			},
			{
				"kind": "function",
				"line": 127,
				"deco": "FAyaC4vibe4http10fileserver22HTTPFileServerSettingsZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
				"endchar": 1,
				"char": 27,
				"parameters": [
					{
						"deco": "Aya",
						"name": "local_path"
					},
					{
						"deco": "C4vibe4http10fileserver22HTTPFileServerSettings",
						"default": "null",
						"name": "settings"
					}
				],
				"name": "serveStaticFile",
				"comment": "ditto\n",
				"originalType": "HTTPServerRequestDelegate(string local_path, HTTPFileServerSettings settings = null)",
				"endline": 130
			},
			{
				"kind": "class",
				"line": 136,
				"members": [
					{
						"kind": "variable",
						"line": 137,
						"init": "\"/\"",
						"deco": "Aya",
						"char": 9,
						"name": "serverPathPrefix",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 138,
						"deco": "S4core4time8Duration",
						"char": 11,
						"name": "maxAge",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 139,
						"init": "cast(HTTPFileServerOption)2",
						"deco": "E4vibe4http10fileserver20HTTPFileServerOption",
						"char": 23,
						"name": "options",
						"comment": "additional options\n",
						"offset": 24
					},
					{
						"kind": "variable",
						"line": 140,
						"deco": "HAyaAya",
						"char": 17,
						"name": "encodingFileExtension",
						"offset": 28
					},
					{
						"kind": "variable",
						"line": 150,
						"init": "null",
						"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseKAyaZv",
						"char": 88,
						"name": "preWriteCallback",
						"comment": "\t\tCalled just before headers and data are sent.\n\t\tAllows headers to be customized, or other custom processing to be performed.\n\n\t\tNote: Any changes you make to the response, physicalPath, or anything\n\t\telse during this function will NOT be verified by Vibe.d for correctness.\n\t\tMake sure any alterations you make are complete and correct according to HTTP spec.\n",
						"offset": 32
					},
					{
						"kind": "constructor",
						"line": 152,
						"deco": "FZC4vibe4http10fileserver22HTTPFileServerSettings",
						"endchar": 2,
						"char": 2,
						"name": "this",
						"originalType": "()",
						"endline": 156
					},
					{
						"kind": "constructor",
						"line": 158,
						"deco": "FAyaZC4vibe4http10fileserver22HTTPFileServerSettings",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"name": "path_prefix"
							}
						],
						"name": "this",
						"originalType": "(string path_prefix)",
						"endline": 162
					},
					{
						"kind": "function",
						"line": 165,
						"storageClass": [
							"deprecated"
						],
						"deco": "xFNdZb",
						"endchar": 96,
						"char": 17,
						"name": "failIfNotFound",
						"endline": 165
					},
					{
						"kind": "function",
						"line": 168,
						"storageClass": [
							"deprecated"
						],
						"deco": "FNdbZv",
						"endchar": 2,
						"char": 17,
						"parameters": [
							{
								"deco": "b",
								"name": "val"
							}
						],
						"name": "failIfNotFound",
						"endline": 173
					}
				],
				"char": 1,
				"name": "HTTPFileServerSettings",
				"comment": "\tConfiguration options for the static file server.\n"
			},
			{
				"kind": "enum",
				"line": 180,
				"members": [
					{
						"kind": "enum member",
						"line": 181,
						"value": "0",
						"char": 2,
						"name": "none"
					},
					{
						"kind": "enum member",
						"line": 183,
						"value": "1",
						"char": 2,
						"name": "failIfNotFound",
						"comment": "respond with 404 if a file was not found\n"
					},
					{
						"kind": "enum member",
						"line": 185,
						"value": "2",
						"char": 2,
						"name": "serveIndexHTML",
						"comment": "serve index.html for directories\n"
					},
					{
						"kind": "enum member",
						"line": 187,
						"value": "2",
						"char": 2,
						"name": "defaults",
						"comment": "default options are serveIndexHTML\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "HTTPFileServerOption",
				"comment": "   Additional options for the static file server.\n"
			}
		],
		"name": "vibe.http.fileserver",
		"comment": "\tA static HTTP file server.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\http\\form.d",
		"members": [
			{
				"kind": "import",
				"line": 10,
				"char": 15,
				"name": "vibe.inet.webform"
			},
			{
				"kind": "template",
				"line": 128,
				"members": [
					{
						"kind": "function",
						"line": 128,
						"endchar": 1,
						"char": 6,
						"type": "void(URLRouter router, I instance, string url_prefix, MethodStyle style = MethodStyle.Unaltered, Flag!\"strict\" strict = Yes.strict)",
						"parameters": [
							{
								"type": "URLRouter",
								"name": "router"
							},
							{
								"type": "I",
								"name": "instance"
							},
							{
								"type": "string",
								"name": "url_prefix"
							},
							{
								"default": "MethodStyle.Unaltered",
								"type": "MethodStyle",
								"name": "style"
							},
							{
								"default": "Yes.strict",
								"type": "Flag!\"strict\"",
								"name": "strict"
							}
						],
						"name": "registerFormInterface",
						"endline": 141
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "I"
					}
				],
				"comment": "\tGenerates a form based interface to the given instance - scheduled to be\n\tdeprecated in favor of vibe.web.web.registerWebInterface.\n\n\tEach function is callable with either GET or POST using form encoded\n\tparameters.  All methods of I that start with \"get\", \"query\", \"add\", \"create\",\n\t\"post\" are made available via the URL url_prefix~method_name. A method named\n\t\"index\" will be made available via url_prefix. method_name is generated from\n\tthe original method name by the same rules as for\n\tvibe.http.rest.registerRestInterface. All these methods might take a\n\tHTTPServerRequest parameter and a HTTPServerResponse parameter, but don't have\n\tto.\n\n\tAll additional parameters will be filled with available form-data fields.\n\tEvery parameter name has to match a form field name (or is a fillable\n\tstruct). The registered handler will throw an exception if no overload is\n\tfound that is compatible with all available form data fields.\n\n\tIf a parameter name is not found in the form data and the parameter is a\n\tstruct, all accessible fields of the struct (might also be properties) will\n\tbe searched in the form, with the parameter (struct) name prefixed. An underscore is\n\tused as delimiter. So if you have a struct parameter with name 'foo' of type:\n\t---\n\tstruct FooBar {\n\t\tint bar;\n\t\tint another_foo;\n\t}\n\t---\n\tthe form data must contain the keys 'foo_bar' and 'foo_another_foo'. Their\n\tcorresponding values will be applied to the structure's fields. If not all\n\tfields of the struct are found, this is considered an error and the next\n\toverload (if any) will be tried.\n\n\tThe registered handler gives really good error messages if no appropriate\n\toverload is found, but this comes at the price of some allocations for the\n\terror messages, which are not used at all if eventually a valid overload is\n\tfound. So because of this and because the search for an appropriate\n\toverload is done at run time (according to the provided form data) you\n\tmight want to avoid overloads for performance critical sites.\n\n\tFor a thorough example of how to use this method, see the form_interface\n\texample in the examples directory.\n\n\tSee_Also: registerFormMethod, vibe.http.rest.registerRestInterface\n\n\tParams:\n\t\trouter = The router the found methods are registered with.\n\n\t\tinstance = The instance whose methods should be called via the registered URLs.\n\n\t\turl_prefix = The prefix before the method name. A method named getWelcomePage\n\t\twith a given url_prefix=\"/mywebapp/welcomePage/\" would be made available as\n\t\t\"/mywebapp/welcomePage/getWelcomePage\" if MethodStyle is Unaltered.\n\n\t\tstyle = How the url part representing the method name should be altered.\n        strict = Yes.strict if you want missing parameters in the form to be an error. No.strict if you are happy with the types' default value in this case.\n                (If you have overloads this might cause not the best matching overload to be chosen.)\n\n\tExamples:\n\n\t---\n\tclass FrontEnd {\n\t\t// GET /\n\t\tvoid index(HTTPServerResponse res)\n\t\t{\n\t\t\tres.render!(\"index.dt\");\n\t\t}\n\n\t\t/// GET /files?folder=...\n\t\tvoid getFiles(HTTPServerRequest req, HTTPServerResponse res, string folder)\n\t\t{\n\t\t\tres.render!(\"files.dt\", req, folder);\n\t\t}\n\n\t\t/// POST /login\n\t\tvoid postLogin(HTTPServerRequest req, HTTPServerResponse res, string username,\n\t\t\tstring password)\n\t\t{\n\t\t\tif( username != \"tester\" || password != \"secret\" )\n\t\t\t\tthrow new HTTPStatusException(HTTPStatus.Unauthorized);\n\t\t\tauto session = req.session;\n\t\t\tif( !session ) session = res.startSession();\n\t\t\tsession[\"username\"] = username;\n\t\t\tres.redirect(\"/\");\n\t\t}\n\t}\n\n\tshared static this()\n\t{\n\t\tauto settings = new HTTPServerSettings;\n\t\tsettings.port = 8080;\n\t\tauto router = new URLRouter;\n\t\tregisterFormInterface(router, new FrontEnd, \"/\");\n\t\tlistenHTTP(settings, router);\n\t}\n\t---\n\n",
				"name": "registerFormInterface"
			},
			{
				"kind": "template",
				"line": 177,
				"members": [
					{
						"kind": "function",
						"line": 177,
						"storageClass": [
							"deprecated"
						],
						"endchar": 1,
						"char": 6,
						"type": "void(URLRouter router, I instance, string url_prefix, MethodStyle style = MethodStyle.Unaltered, Flag!\"strict\" strict = Yes.strict)",
						"parameters": [
							{
								"type": "URLRouter",
								"name": "router"
							},
							{
								"type": "I",
								"name": "instance"
							},
							{
								"type": "string",
								"name": "url_prefix"
							},
							{
								"default": "MethodStyle.Unaltered",
								"type": "MethodStyle",
								"name": "style"
							},
							{
								"default": "Yes.strict",
								"type": "Flag!\"strict\"",
								"name": "strict"
							}
						],
						"name": "registerFormMethod",
						"endline": 188
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "method"
					},
					{
						"kind": "type",
						"name": "I"
					}
				],
				"comment": "\tRegisters just a single method.\n\n\tFor details see registerFormInterface. This method does exactly the\n\tsame, but instead of registering found methods that match a scheme it just\n\tregisters the method specified.\n\n\tSee_Also: registerFormInterface\n\n\tParams:\n\t\tmethod = The name of the method to register. It might be\n\t\toverloaded, one overload has to match any given form data, otherwise an error is triggered.\n",
				"name": "registerFormMethod"
			},
			{
				"kind": "template",
				"line": 331,
				"constraint": "isOutputRange!(R, char)",
				"members": [
					{
						"kind": "function",
						"line": 331,
						"endchar": 1,
						"char": 6,
						"type": "void(R dst, in string[string] data)",
						"parameters": [
							{
								"type": "R",
								"name": "dst"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "string[string]",
								"name": "data"
							}
						],
						"name": "writeFormData",
						"endline": 344
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "\tEncodes the given dictionary as URL encoded form data.\nExample:\n\n---\nimport std.array;\nimport vibe.core.log;\nimport vibe.http.form;\n\nvoid test()\n{\n\tauto dst = appender!string();\n\tdst.writeFormData([\"field1\": \"value1\", \"field2\": \"value2\"]);\n\tlogInfo(\"Form data: %s\", dst.data);\n}\n\n---\n",
				"name": "writeFormData"
			},
			{
				"kind": "function",
				"line": 364,
				"deco": "FC4vibe4http6client17HTTPClientRequestxHAyaAyaZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "C4vibe4http6client17HTTPClientRequest",
						"name": "req"
					},
					{
						"deco": "xHAyaAya",
						"name": "form"
					}
				],
				"name": "writeFormBody",
				"comment": "\tWrites a vibe.http.client.HTTPClientRequest body as URL encoded form data.\nExample:\n\n---\nimport vibe.core.log;\nimport vibe.http.client;\nimport vibe.http.form;\nimport vibe.stream.operations;\n\nvoid sendForm()\n{\n\trequestHTTP(\"http://example.com/form\",\n\t\t(scope req) {\n\t\t\treq.method = HTTPMethod.POST;\n\t\t\treq.writeFormBody([\"field1\": \"value1\", \"field2\": \"value2\"]);\n\t\t},\n\t\t(scope res) {\n\t\t\tlogInfo(\"Response: %s\", res.bodyReader.readAllUTF8());\n\t\t});\n}\n\n---\n",
				"originalType": "void(HTTPClientRequest req, in string[string] form)",
				"endline": 375
			},
			{
				"kind": "template",
				"line": 465,
				"constraint": "is(T == struct) || isDynamicArray!T",
				"members": [
					{
						"kind": "function",
						"line": 465,
						"endchar": 1,
						"char": 20,
						"type": "FormDataLoadResult(HTTPServerRequest req, ref T load_to, string name = \"\")",
						"parameters": [
							{
								"type": "HTTPServerRequest",
								"name": "req"
							},
							{
								"storageClass": [
									"ref"
								],
								"type": "T",
								"name": "load_to"
							},
							{
								"default": "\"\"",
								"type": "string",
								"name": "name"
							}
						],
						"name": "loadFormData",
						"endline": 476
					}
				],
				"char": 20,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Load form data into fields of a given struct or array.\n\n In comparison to registerFormInterface this method can be used in the case\n you have many optional form fields. It is not an error if not all fields of\n the struct are filled, but if it is present it must be convertible to the\n type of the corresponding struct field (properties are not supported). It\n is also not an error if the form contains more data than applied, the\n method simply returns the form length and the number of applied elements,\n so you can decide what todo.\n\n The keys in the form must be named like \"name_field\" for struct, where name\n is the one passed to this function. If you pass \"\" for name then the form\n is queried for \"field\" where field is the identifier of a field in the\n struct, as before.\n\n If you pass an array to the struct the elements get filled with elements from the form named like:\n \"name0\", \"name1\", ....\n\n If the struct/array contains structs/arrays whose identifier can not be\n found in the form, its fields will be filled recursively.\n\n Only dynamic arrays are supported. Their length will be expanded/reduced so\n the found form data matches exactly. For efficiency reason\n arr.assumeSafeAppend() gets called by the implementation if the length is\n reduced. So keep in mind that your data can be overridden.\n\n A little example:\n   ---\n   struct Address {\n\t\tstring street;\n\t\tint door;\n\t\tint zipCode;\n\t\tstring country;\n   }\n   struct Person {\n\t\tstring name;\n\t\tstring surname;\n\t\tAddress address;\n   }\n   // Assume form data: [ \"customer_name\" : \"John\", \"customer_surname\" : \"Smith\", \"customer_address_street\" : \"Broadway\", \"customer_address_door\" : \"12\", \"customer_address_zipCode\" : \"1002\"]\n   void postPerson(HTTPServerRequest req, HTTPServerResponse res) {\n\t\tPerson p;\n\t\t// We have a default value for country if not provided, so we don't care that it is not:\n\t\tp.address.country=\"Important Country\";\n\t\tp.name=\"Jane\";\n\t\tenforceBadRequest(loadFormData(req, p, \"customer\"), \"More data than needed provided!\");\n\t\t// p will now contain the provided form data, non provided data stays untouched.\n\t\tassert(p.address.country==\"Important Country\");\n\t\tassert(p.name==\"John\");\n\t\tassert(p.surname==\"Smith\");\n   }\n   ---\n The mechanism is more useful in get requests, when you have good default values for unspecified parameters.\n Params:\n\t\treq  = The HTTPServerRequest that contains the form data. (req.query or req.form will be used depending on HTTPMethod)\n\t\tload_to = The struct you wan to be filled.\n\t\tname = The name of the struct, it is used to find data in the form.\t(form is queried for name_fieldName).\n",
				"name": "loadFormData"
			},
			{
				"kind": "struct",
				"line": 484,
				"members": [
					{
						"kind": "variable",
						"line": 486,
						"deco": "i",
						"char": 6,
						"name": "formLength",
						"comment": "The number of fields in the form\n",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 488,
						"deco": "i",
						"char": 6,
						"name": "appliedCount",
						"comment": "The number of actually applied fields.\n",
						"offset": 4
					},
					{
						"kind": "function",
						"line": 491,
						"deco": "xFZb",
						"endchar": 2,
						"char": 7,
						"name": "fullApplied",
						"comment": "Were all fields applied?\n",
						"endline": 493
					}
				],
				"char": 1,
				"name": "FormDataLoadResult",
				"comment": " struct that contains result from loadFormData.\n\n It is convertible to bool and will result to true if all form data has been applied.\n"
			},
			{
				"kind": "struct",
				"line": 496,
				"members": [
					{
						"kind": "variable",
						"line": 497,
						"deco": "Aya",
						"char": 9,
						"name": "message",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 498,
						"deco": "AAya",
						"char": 11,
						"name": "missing_parameters",
						"offset": 8
					}
				],
				"char": 1,
				"name": "Error"
			}
		],
		"name": "vibe.http.form",
		"comment": "\tRoutines for automated implementation of HTML form based interfaces.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\http\\log.d",
		"members": [
			{
				"kind": "class",
				"line": 22,
				"members": [
					{
						"kind": "constructor",
						"line": 30,
						"deco": "FC4vibe4http6server18HTTPServerSettingsAyaZC4vibe4http3log10HTTPLogger",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4http6server18HTTPServerSettings",
								"name": "settings"
							},
							{
								"deco": "Aya",
								"name": "format"
							}
						],
						"name": "this",
						"originalType": "(HTTPServerSettings settings, string format)",
						"endline": 35
					},
					{
						"kind": "function",
						"line": 37,
						"deco": "FZv",
						"endchar": 16,
						"char": 7,
						"name": "close",
						"endline": 37
					},
					{
						"kind": "function",
						"line": 39,
						"storageClass": [
							"final"
						],
						"deco": "FC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
						"endchar": 2,
						"char": 13,
						"parameters": [
							{
								"deco": "C4vibe4http6server17HTTPServerRequest",
								"name": "req"
							},
							{
								"deco": "C4vibe4http6server18HTTPServerResponse",
								"name": "res"
							}
						],
						"name": "log",
						"endline": 46
					},
					{
						"kind": "function",
						"line": 48,
						"protection": "protected",
						"storageClass": [
							"abstract"
						],
						"deco": "FAxaZv",
						"char": 26,
						"parameters": [
							{
								"deco": "Axa",
								"name": "ln"
							}
						],
						"name": "writeLine"
					}
				],
				"char": 1,
				"name": "HTTPLogger"
			},
			{
				"kind": "class",
				"line": 52,
				"base": "vibe.http.log.HTTPLogger",
				"members": [
					{
						"kind": "constructor",
						"line": 53,
						"deco": "FC4vibe4http6server18HTTPServerSettingsAyaZC4vibe4http3log17HTTPConsoleLogger",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4http6server18HTTPServerSettings",
								"name": "settings"
							},
							{
								"deco": "Aya",
								"name": "format"
							}
						],
						"name": "this",
						"originalType": "(HTTPServerSettings settings, string format)",
						"endline": 56
					},
					{
						"kind": "function",
						"line": 58,
						"protection": "protected",
						"storageClass": [
							"override"
						],
						"deco": "FAxaZv",
						"endchar": 2,
						"char": 26,
						"parameters": [
							{
								"deco": "Axa",
								"name": "ln"
							}
						],
						"name": "writeLine",
						"endline": 61,
						"overrides": [
							"vibe.http.log.HTTPLogger.writeLine"
						]
					}
				],
				"char": 7,
				"name": "HTTPConsoleLogger"
			},
			{
				"kind": "class",
				"line": 65,
				"base": "vibe.http.log.HTTPLogger",
				"members": [
					{
						"kind": "constructor",
						"line": 70,
						"deco": "FC4vibe4http6server18HTTPServerSettingsAyaAyaZC4vibe4http3log14HTTPFileLogger",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4http6server18HTTPServerSettings",
								"name": "settings"
							},
							{
								"deco": "Aya",
								"name": "format"
							},
							{
								"deco": "Aya",
								"name": "filename"
							}
						],
						"name": "this",
						"originalType": "(HTTPServerSettings settings, string format, string filename)",
						"endline": 74
					},
					{
						"kind": "function",
						"line": 76,
						"storageClass": [
							"override"
						],
						"deco": "FZv",
						"endchar": 2,
						"char": 16,
						"name": "close",
						"endline": 80,
						"overrides": [
							"vibe.http.log.HTTPLogger.close"
						]
					},
					{
						"kind": "function",
						"line": 82,
						"protection": "protected",
						"storageClass": [
							"override"
						],
						"deco": "FAxaZv",
						"endchar": 2,
						"char": 26,
						"parameters": [
							{
								"deco": "Axa",
								"name": "ln"
							}
						],
						"name": "writeLine",
						"endline": 88,
						"overrides": [
							"vibe.http.log.HTTPLogger.writeLine"
						]
					}
				],
				"char": 7,
				"name": "HTTPFileLogger"
			},
			{
				"kind": "template",
				"line": 91,
				"members": [
					{
						"kind": "function",
						"line": 91,
						"endchar": 1,
						"char": 6,
						"type": "void(ref R ln, string format, HTTPServerRequest req, HTTPServerResponse res, HTTPServerSettings settings)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "ln"
							},
							{
								"type": "string",
								"name": "format"
							},
							{
								"type": "HTTPServerRequest",
								"name": "req"
							},
							{
								"type": "HTTPServerResponse",
								"name": "res"
							},
							{
								"type": "HTTPServerSettings",
								"name": "settings"
							}
						],
						"name": "formatApacheLog",
						"endline": 250
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"name": "formatApacheLog"
			}
		],
		"name": "vibe.http.log",
		"comment": "\tA HTTP 1.1/1.0 server implementation.\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\http\\proxy.d",
		"members": [
			{
				"kind": "function",
				"line": 33,
				"deco": "FC4vibe4http6server18HTTPServerSettingsC4vibe4http5proxy24HTTPReverseProxySettingsZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "C4vibe4http6server18HTTPServerSettings",
						"name": "settings"
					},
					{
						"deco": "C4vibe4http5proxy24HTTPReverseProxySettings",
						"name": "proxy_settings"
					}
				],
				"name": "listenHTTPReverseProxy",
				"comment": "\tTransparently forwards all requests to the proxy to a destination_host.\n\n\tYou can use the hostName field in the 'settings' to combine multiple internal HTTP servers\n\tinto one public web server with multiple virtual hosts.\n",
				"endline": 38
			},
			{
				"kind": "function",
				"line": 40,
				"deco": "FC4vibe4http6server18HTTPServerSettingsAyatZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "C4vibe4http6server18HTTPServerSettings",
						"name": "settings"
					},
					{
						"deco": "Aya",
						"name": "destination_host"
					},
					{
						"deco": "t",
						"name": "destination_port"
					}
				],
				"name": "listenHTTPReverseProxy",
				"comment": "ditto\n",
				"endline": 46
			},
			{
				"kind": "function",
				"line": 52,
				"deco": "FC4vibe4http5proxy24HTTPReverseProxySettingsZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
				"endchar": 1,
				"char": 27,
				"parameters": [
					{
						"deco": "C4vibe4http5proxy24HTTPReverseProxySettings",
						"name": "settings"
					}
				],
				"name": "reverseProxyRequest",
				"comment": "\tReturns a HTTP request handler that forwards any request to the specified host/port.\n",
				"originalType": "HTTPServerRequestDelegate(HTTPReverseProxySettings settings)",
				"endline": 148
			},
			{
				"kind": "function",
				"line": 150,
				"deco": "FAyatZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
				"endchar": 1,
				"char": 27,
				"parameters": [
					{
						"deco": "Aya",
						"name": "destination_host"
					},
					{
						"deco": "t",
						"name": "destination_port"
					}
				],
				"name": "reverseProxyRequest",
				"comment": "ditto\n",
				"originalType": "HTTPServerRequestDelegate(string destination_host, ushort destination_port)",
				"endline": 156
			},
			{
				"kind": "class",
				"line": 161,
				"members": [
					{
						"kind": "variable",
						"line": 163,
						"deco": "Aya",
						"char": 9,
						"name": "destinationHost",
						"comment": "The destination host to forward requests to\n",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 165,
						"deco": "t",
						"char": 9,
						"name": "destinationPort",
						"comment": "The destination port to forward requests to\n",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 167,
						"deco": "b",
						"char": 7,
						"name": "avoidCompressedRequests",
						"comment": "Avoids compressed transfers between proxy and destination hosts\n",
						"offset": 18
					}
				],
				"char": 7,
				"name": "HTTPReverseProxySettings",
				"comment": "\tProvides advanced configuration facilities for reverse proxy servers.\n"
			}
		],
		"name": "vibe.http.proxy",
		"comment": "\tHTTP (reverse) proxy implementation\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\http\\rest.d",
		"members": [
			{
				"kind": "import",
				"line": 10,
				"char": 15,
				"name": "vibe.web.rest"
			}
		],
		"name": "vibe.http.rest",
		"comment": "\tCompatibility module; use vibe.web.rest\n\n\tCopyright: © 2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\http\\router.d",
		"members": [
			{
				"kind": "import",
				"line": 10,
				"char": 15,
				"name": "vibe.http.server"
			},
			{
				"kind": "interface",
				"line": 30,
				"members": [
					{
						"kind": "function",
						"line": 31,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNdZAya",
						"char": 19,
						"name": "prefix"
					},
					{
						"kind": "function",
						"line": 34,
						"storageClass": [
							"abstract"
						],
						"deco": "FE4vibe4http6common10HTTPMethodAyaDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
						"char": 13,
						"parameters": [
							{
								"deco": "E4vibe4http6common10HTTPMethod",
								"name": "method"
							},
							{
								"deco": "Aya",
								"name": "path"
							},
							{
								"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
								"name": "cb"
							}
						],
						"name": "match",
						"comment": "Adds a new route for request that match the path and method\n",
						"originalType": "HTTPRouter(HTTPMethod method, string path, HTTPServerRequestDelegate cb)"
					},
					{
						"kind": "function",
						"line": 36,
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FE4vibe4http6common10HTTPMethodAyaC4vibe4http6server24HTTPServerRequestHandlerZC4vibe4http6router10HTTPRouter",
						"endchar": 135,
						"char": 19,
						"parameters": [
							{
								"deco": "E4vibe4http6common10HTTPMethod",
								"name": "method"
							},
							{
								"deco": "Aya",
								"name": "path"
							},
							{
								"deco": "C4vibe4http6server24HTTPServerRequestHandler",
								"name": "cb"
							}
						],
						"name": "match",
						"comment": "ditto\n",
						"endline": 36
					},
					{
						"kind": "function",
						"line": 38,
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FE4vibe4http6common10HTTPMethodAyaPFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
						"endchar": 133,
						"char": 19,
						"parameters": [
							{
								"deco": "E4vibe4http6common10HTTPMethod",
								"name": "method"
							},
							{
								"deco": "Aya",
								"name": "path"
							},
							{
								"deco": "PFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
								"name": "cb"
							}
						],
						"name": "match",
						"comment": "ditto\n",
						"originalType": "HTTPRouter(HTTPMethod method, string path, HTTPServerRequestFunction cb)",
						"endline": 38
					},
					{
						"kind": "function",
						"line": 41,
						"storageClass": [
							"abstract"
						],
						"deco": "FC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4http6server17HTTPServerRequest",
								"name": "req"
							},
							{
								"deco": "C4vibe4http6server18HTTPServerResponse",
								"name": "res"
							}
						],
						"name": "handleRequest",
						"comment": "Handles the HTTP request by dispatching it to the registered request handlers.\n",
						"overrides": [
							"vibe.http.server.HTTPServerRequestHandler.handleRequest"
						]
					},
					{
						"kind": "function",
						"line": 44,
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FAyaC4vibe4http6server24HTTPServerRequestHandlerZC4vibe4http6router10HTTPRouter",
						"endchar": 114,
						"char": 19,
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "C4vibe4http6server24HTTPServerRequestHandler",
								"name": "cb"
							}
						],
						"name": "get",
						"comment": "Adds a new route for GET requests matching the specified pattern.\n",
						"endline": 44
					},
					{
						"kind": "function",
						"line": 46,
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FAyaPFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
						"endchar": 112,
						"char": 19,
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "PFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
								"name": "cb"
							}
						],
						"name": "get",
						"comment": "ditto\n",
						"originalType": "HTTPRouter(string url_match, HTTPServerRequestFunction cb)",
						"endline": 46
					},
					{
						"kind": "function",
						"line": 48,
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FAyaDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
						"endchar": 118,
						"char": 19,
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
								"name": "cb"
							}
						],
						"name": "get",
						"comment": "ditto\n",
						"originalType": "HTTPRouter(string url_match, HTTPServerRequestDelegate cb)",
						"endline": 48
					},
					{
						"kind": "function",
						"line": 51,
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FAyaC4vibe4http6server24HTTPServerRequestHandlerZC4vibe4http6router10HTTPRouter",
						"endchar": 116,
						"char": 19,
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "C4vibe4http6server24HTTPServerRequestHandler",
								"name": "cb"
							}
						],
						"name": "post",
						"comment": "Adds a new route for POST requests matching the specified pattern.\n",
						"endline": 51
					},
					{
						"kind": "function",
						"line": 53,
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FAyaPFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
						"endchar": 114,
						"char": 19,
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "PFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
								"name": "cb"
							}
						],
						"name": "post",
						"comment": "ditto\n",
						"originalType": "HTTPRouter(string url_match, HTTPServerRequestFunction cb)",
						"endline": 53
					},
					{
						"kind": "function",
						"line": 55,
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FAyaDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
						"endchar": 120,
						"char": 19,
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
								"name": "cb"
							}
						],
						"name": "post",
						"comment": "ditto\n",
						"originalType": "HTTPRouter(string url_match, HTTPServerRequestDelegate cb)",
						"endline": 55
					},
					{
						"kind": "function",
						"line": 58,
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FAyaC4vibe4http6server24HTTPServerRequestHandlerZC4vibe4http6router10HTTPRouter",
						"endchar": 114,
						"char": 19,
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "C4vibe4http6server24HTTPServerRequestHandler",
								"name": "cb"
							}
						],
						"name": "put",
						"comment": "Adds a new route for PUT requests matching the specified pattern.\n",
						"endline": 58
					},
					{
						"kind": "function",
						"line": 60,
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FAyaPFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
						"endchar": 112,
						"char": 19,
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "PFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
								"name": "cb"
							}
						],
						"name": "put",
						"comment": "ditto\n",
						"originalType": "HTTPRouter(string url_match, HTTPServerRequestFunction cb)",
						"endline": 60
					},
					{
						"kind": "function",
						"line": 62,
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FAyaDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
						"endchar": 118,
						"char": 19,
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
								"name": "cb"
							}
						],
						"name": "put",
						"comment": "ditto\n",
						"originalType": "HTTPRouter(string url_match, HTTPServerRequestDelegate cb)",
						"endline": 62
					},
					{
						"kind": "function",
						"line": 65,
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FAyaC4vibe4http6server24HTTPServerRequestHandlerZC4vibe4http6router10HTTPRouter",
						"endchar": 122,
						"char": 19,
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "C4vibe4http6server24HTTPServerRequestHandler",
								"name": "cb"
							}
						],
						"name": "delete_",
						"comment": "Adds a new route for DELETE requests matching the specified pattern.\n",
						"endline": 65
					},
					{
						"kind": "function",
						"line": 67,
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FAyaPFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
						"endchar": 120,
						"char": 19,
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "PFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
								"name": "cb"
							}
						],
						"name": "delete_",
						"comment": "ditto\n",
						"originalType": "HTTPRouter(string url_match, HTTPServerRequestFunction cb)",
						"endline": 67
					},
					{
						"kind": "function",
						"line": 69,
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FAyaDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
						"endchar": 125,
						"char": 19,
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
								"name": "cb"
							}
						],
						"name": "delete_",
						"comment": "ditto\n",
						"originalType": "HTTPRouter(string url_match, HTTPServerRequestDelegate cb)",
						"endline": 69
					},
					{
						"kind": "function",
						"line": 72,
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FAyaC4vibe4http6server24HTTPServerRequestHandlerZC4vibe4http6router10HTTPRouter",
						"endchar": 118,
						"char": 19,
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "C4vibe4http6server24HTTPServerRequestHandler",
								"name": "cb"
							}
						],
						"name": "patch",
						"comment": "Adds a new route for PATCH requests matching the specified pattern.\n",
						"endline": 72
					},
					{
						"kind": "function",
						"line": 74,
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FAyaPFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
						"endchar": 116,
						"char": 19,
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "PFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
								"name": "cb"
							}
						],
						"name": "patch",
						"comment": "ditto\n",
						"originalType": "HTTPRouter(string url_match, HTTPServerRequestFunction cb)",
						"endline": 74
					},
					{
						"kind": "function",
						"line": 76,
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FAyaDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
						"endchar": 122,
						"char": 19,
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
								"name": "cb"
							}
						],
						"name": "patch",
						"comment": "ditto\n",
						"originalType": "HTTPRouter(string url_match, HTTPServerRequestDelegate cb)",
						"endline": 76
					},
					{
						"kind": "function",
						"line": 79,
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FAyaC4vibe4http6server24HTTPServerRequestHandlerZC4vibe4http6router10HTTPRouter",
						"endchar": 114,
						"char": 19,
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "C4vibe4http6server24HTTPServerRequestHandler",
								"name": "cb"
							}
						],
						"name": "any",
						"comment": "Adds a new route for requests matching the specified pattern, regardless of their HTTP verb.\n",
						"endline": 79
					},
					{
						"kind": "function",
						"line": 81,
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FAyaPFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
						"endchar": 112,
						"char": 19,
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "PFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
								"name": "cb"
							}
						],
						"name": "any",
						"comment": "ditto\n",
						"originalType": "HTTPRouter(string url_match, HTTPServerRequestFunction cb)",
						"endline": 81
					},
					{
						"kind": "function",
						"line": 83,
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FAyaDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router10HTTPRouter",
						"endchar": 2,
						"char": 19,
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_match"
							},
							{
								"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
								"name": "cb"
							}
						],
						"name": "any",
						"comment": "ditto\n",
						"originalType": "HTTPRouter(string url_match, HTTPServerRequestDelegate cb)",
						"endline": 92
					}
				],
				"char": 1,
				"interfaces": [
					"vibe.http.server.HTTPServerRequestHandler"
				],
				"name": "HTTPRouter",
				"comment": "\tAn interface for HTTP request routers.\n\n\tRemoval_notice:\n\n\tNote that this is planned to be removed, due to interface/behavior considerations.\n\tIn particular, the exact behavior of the router (most importantly, the route match\n\tstring format) must be considered part of the interface. However, this removes the\n\tprime argument for having an interface in the first place.\n"
			},
			{
				"kind": "class",
				"line": 108,
				"members": [
					{
						"kind": "constructor",
						"line": 115,
						"deco": "FAyaZC4vibe4http6router9URLRouter",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"default": "null",
								"name": "prefix"
							}
						],
						"name": "this",
						"originalType": "(string prefix = null)",
						"endline": 118
					},
					{
						"kind": "function",
						"line": 120,
						"deco": "xFNdZAya",
						"endchar": 53,
						"char": 19,
						"name": "prefix",
						"endline": 120,
						"overrides": [
							"vibe.http.router.HTTPRouter.prefix"
						]
					},
					{
						"kind": "function",
						"line": 123,
						"deco": "FE4vibe4http6common10HTTPMethodAyaDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZC4vibe4http6router9URLRouter",
						"endchar": 2,
						"char": 12,
						"parameters": [
							{
								"deco": "E4vibe4http6common10HTTPMethod",
								"name": "method"
							},
							{
								"deco": "Aya",
								"name": "path"
							},
							{
								"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
								"name": "cb"
							}
						],
						"name": "match",
						"comment": "Adds a new route for requests matching the specified HTTP method and pattern.\n",
						"originalType": "URLRouter(HTTPMethod method, string path, HTTPServerRequestDelegate cb)",
						"endline": 131,
						"overrides": [
							"vibe.http.router.HTTPRouter.match"
						]
					},
					{
						"kind": "alias",
						"line": 133,
						"char": 2,
						"name": "match"
					},
					{
						"kind": "function",
						"line": 142,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "rebuild",
						"comment": " Rebuilds the internal matching structures to account for newly added routes.\n\n\t\tThis should be used after a lot of routes have been added to the router, to\n\t\tforce eager computation of the match structures. The alternative is to\n\t\tlet the router lazily compute the structures when the first request happens,\n\t\twhich can delay this request.\n",
						"endline": 146
					},
					{
						"kind": "function",
						"line": 149,
						"deco": "FC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4http6server17HTTPServerRequest",
								"name": "req"
							},
							{
								"deco": "C4vibe4http6server18HTTPServerResponse",
								"name": "res"
							}
						],
						"name": "handleRequest",
						"comment": "Handles a HTTP request by dispatching it to the registered route handlers.\n",
						"endline": 194,
						"overrides": [
							"vibe.http.server.HTTPServerRequestHandler.handleRequest"
						]
					},
					{
						"kind": "function",
						"line": 197,
						"deco": "FZAxS4vibe4http6router5Route",
						"endchar": 2,
						"char": 17,
						"name": "getAllRoutes",
						"comment": "Returns all registered routes as const AA\n",
						"endline": 205
					}
				],
				"char": 7,
				"interfaces": [
					"vibe.http.router.HTTPRouter"
				],
				"name": "URLRouter",
				"comment": "\tRoutes HTTP requests based on the request method and URL.\n\n\tRoutes are matched using a special URL match string that supports two forms of placeholders.\n\tThe following example shows how these are used.\n\n\tRegistered routes are matched in the same sequence as initially specified.\n\tMatching ends as soon as a route handler writes a response using res.writeBody()\n\tor similar means. If no route matches or if no route handler writes a response,\n\tthe router will simply not handle the request and the HTTP server will generate\n\ta 404 error.\nExample:\n\n---\nimport vibe.http.fileserver;\n\nvoid addGroup(HTTPServerRequest req, HTTPServerResponse res)\n{\n\t// Route variables are accessible via the params map\n\tlogInfo(\"Getting group %s for user %s.\", req.params[\"groupname\"], req.params[\"username\"]);\n}\n\nvoid deleteUser(HTTPServerRequest req, HTTPServerResponse res)\n{\n\t// ...\n}\n\nvoid auth(HTTPServerRequest req, HTTPServerResponse res)\n{\n\t// TODO: check req.session to see if a user is logged in and\n\t//       write an error page or throw an exception instead.\n}\n\nvoid setup()\n{\n\tauto router = new URLRouter;\n\t// Matches all GET requests for /users/*/groups/* and places\n\t// the place holders in req.params as 'username' and 'groupname'.\n\trouter.get(\"/users/:username/groups/:groupname\", &addGroup);\n\n\t// Natches all requests. This can be useful for authorization and\n\t// similar tasks. The auth method will only write a response if the\n\t// user is _not_ authorized. Otherwise, the router will fall through\n\t// and continue with the following routes.\n\trouter.any(\"*\", &auth);\n\n\t// Matches a POST request\n\trouter.post(\"/users/:username/delete\", &deleteUser);\n\n\t// Matches all GET requests in /static/ such as /static/img.png or\n\t// /static/styles/sty.css\n\trouter.get(\"/static/*\", serveStaticFiles(\"public/\"));\n\n\t// Setup a HTTP server...\n\tauto settings = new HTTPServerSettings;\n\t// ...\n\n\t// The router can be directly passed to the listenHTTP function as\n\t// the main request handler.\n\tlistenHTTP(settings, router);\n}\n\n---\nExample:\nUsing nested routers to map components to different sub paths. A component\n\tcould for example be an embedded blog engine.\n---\n// some embedded component:\n\nvoid showComponentHome(HTTPServerRequest req, HTTPServerResponse res)\n{\n\t// ...\n}\n\nvoid showComponentUser(HTTPServerRequest req, HTTPServerResponse res)\n{\n\t// ...\n}\n\nvoid registerComponent(URLRouter router)\n{\n\trouter.get(\"/\", &showComponentHome);\n\trouter.get(\"/users/:user\", &showComponentUser);\n}\n\n// main application:\n\nvoid showHome(HTTPServerRequest req, HTTPServerResponse res)\n{\n\t// ...\n}\n\nvoid setup()\n{\n\tauto c1router = new URLRouter(\"/component1\");\n\tregisterComponent(c1router);\n\n\tauto mainrouter = new URLRouter;\n\tmainrouter.get(\"/\", &showHome);\n\t// forward all unprocessed requests to the component router\n\tmainrouter.any(\"*\", c1router);\n\n\t// now the following routes will be matched:\n\t// / -> showHome\n\t// /component1/ -> showComponentHome\n\t// /component1/users/:user -> showComponentUser\n\n\t// Start the HTTP server\n\tauto settings = new HTTPServerSettings;\n\t// ...\n\tlistenHTTP(settings, mainrouter);\n}\n\n---\n"
			}
		],
		"name": "vibe.http.router",
		"comment": "\tPattern based URL router.\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\http\\server.d",
		"members": [
			{
				"kind": "import",
				"line": 10,
				"char": 15,
				"name": "vibe.core.net"
			},
			{
				"kind": "import",
				"line": 11,
				"char": 15,
				"name": "vibe.http.common"
			},
			{
				"kind": "import",
				"line": 12,
				"char": 15,
				"name": "vibe.http.session"
			},
			{
				"kind": "function",
				"line": 71,
				"deco": "FC4vibe4http6server18HTTPServerSettingsDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "C4vibe4http6server18HTTPServerSettings",
						"name": "settings"
					},
					{
						"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
						"name": "request_handler"
					}
				],
				"name": "listenHTTP",
				"comment": "\n\n\n\n\tStarts a HTTP server listening on the specified port.\n\n\trequest_handler will be called for each HTTP request that is made. The\n\tres parameter of the callback then has to be filled with the response\n\tdata.\n\n\trequest_handler can be either HTTPServerRequestDelegate/HTTPServerRequestFunction\n\tor a class/struct with a member function 'handleRequest' that has the same\n\tsignature.\n\n\tNote that if the application has been started with the --disthost command line\n\tswitch, listenHTTP() will automatically listen on the specified VibeDist host\n\tinstead of locally. This allows for a seamless switch from single-host to\n\tmulti-host scenarios without changing the code. If you need to listen locally,\n\tuse listenHTTPPlain() instead.\n\n\tParams:\n\t\tsettings = Customizes the HTTP servers functionality.\n\t\trequest_handler = This callback is invoked for each incoming request and is responsible\n\t\t\tfor generating the response.\n",
				"originalType": "void(HTTPServerSettings settings, HTTPServerRequestDelegate request_handler)",
				"endline": 93
			},
			{
				"kind": "function",
				"line": 95,
				"deco": "FC4vibe4http6server18HTTPServerSettingsPFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZvZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "C4vibe4http6server18HTTPServerSettings",
						"name": "settings"
					},
					{
						"deco": "PFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
						"name": "request_handler"
					}
				],
				"name": "listenHTTP",
				"comment": "ditto\n",
				"originalType": "void(HTTPServerSettings settings, HTTPServerRequestFunction request_handler)",
				"endline": 98
			},
			{
				"kind": "function",
				"line": 100,
				"deco": "FC4vibe4http6server18HTTPServerSettingsC4vibe4http6server24HTTPServerRequestHandlerZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "C4vibe4http6server18HTTPServerSettings",
						"name": "settings"
					},
					{
						"deco": "C4vibe4http6server24HTTPServerRequestHandler",
						"name": "request_handler"
					}
				],
				"name": "listenHTTP",
				"comment": "ditto\n",
				"endline": 103
			},
			{
				"kind": "template",
				"line": 195,
				"members": [
					{
						"kind": "function",
						"line": 195,
						"endchar": 1,
						"char": 37,
						"type": "@property HTTPServerRequestDelegate()",
						"name": "staticTemplate",
						"endline": 201
					}
				],
				"char": 37,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "template_file"
					}
				],
				"comment": "\tProvides a HTTP request handler that responds with a static Diet template.\n",
				"name": "staticTemplate"
			},
			{
				"kind": "function",
				"line": 213,
				"deco": "FAyaE4vibe4http6status10HTTPStatusZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
				"endchar": 1,
				"char": 27,
				"parameters": [
					{
						"deco": "Aya",
						"name": "url"
					},
					{
						"deco": "E4vibe4http6status10HTTPStatus",
						"default": "cast(HTTPStatus)302",
						"name": "status"
					}
				],
				"name": "staticRedirect",
				"comment": "\tProvides a HTTP request handler that responds with a static redirection to the specified URL.\n\n\tParams:\n\t\turl = The URL to redirect to\n\t\tstatus = Redirection status to use $(LPAREN)by default this is $(D HTTPStatus.found)$(RPAREN).\n\n\tReturns:\n\t\tReturns a $(D HTTPServerRequestDelegate) that performs the redirect\nExample:\n\n---\nimport vibe.http.router;\n\nvoid test()\n{\n\tauto router = new URLRouter;\n\trouter.get(\"/old_url\", staticRedirect(\"http://example.org/new_url\", HTTPStatus.movedPermanently));\n\n\tlistenHTTP(new HTTPServerSettings, router);\n}\n\n---\n",
				"originalType": "HTTPServerRequestDelegate(string url, HTTPStatus status = HTTPStatus.found)",
				"endline": 218
			},
			{
				"kind": "function",
				"line": 220,
				"deco": "FS4vibe4inet3url3URLE4vibe4http6status10HTTPStatusZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
				"endchar": 1,
				"char": 27,
				"parameters": [
					{
						"deco": "S4vibe4inet3url3URL",
						"name": "url"
					},
					{
						"deco": "E4vibe4http6status10HTTPStatus",
						"default": "cast(HTTPStatus)302",
						"name": "status"
					}
				],
				"name": "staticRedirect",
				"comment": "ditto\n",
				"originalType": "HTTPServerRequestDelegate(URL url, HTTPStatus status = HTTPStatus.found)",
				"endline": 225
			},
			{
				"kind": "function",
				"line": 244,
				"deco": "FAyatZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "host"
					},
					{
						"deco": "t",
						"name": "port"
					}
				],
				"name": "setVibeDistHost",
				"comment": "\tSets a VibeDist host to register with.\n",
				"endline": 248
			},
			{
				"kind": "template",
				"line": 266,
				"members": [
					{
						"kind": "function",
						"line": 266,
						"endchar": 1,
						"char": 16,
						"type": "@property void(HTTPServerResponse res)",
						"parameters": [
							{
								"type": "HTTPServerResponse",
								"name": "res"
							}
						],
						"name": "render",
						"endline": 271
					}
				],
				"char": 16,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "template_file"
					},
					{
						"kind": "tuple",
						"name": "ALIASES"
					}
				],
				"comment": "\tRenders the given template and makes all ALIASES available to the template.\n\n\tThis currently suffers from multiple DMD bugs - use renderCompat() instead for the time being.\n\n\tYou can call this function as a member of HTTPServerResponse using D's uniform function\n\tcall syntax.\n\n\tExamples:\n\t\t---\n\t\tstring title = \"Hello, World!\";\n\t\tint pageNumber = 1;\n\t\tres.render!(\"mytemplate.jd\", title, pageNumber);\n\t\t---\n",
				"name": "render"
			},
			{
				"kind": "function",
				"line": 277,
				"deco": "FS4vibe4inet3url3URLE4vibe4http6common10HTTPMethodC4vibe4core6stream11InputStreamZC4vibe4http6server17HTTPServerRequest",
				"endchar": 1,
				"char": 19,
				"parameters": [
					{
						"deco": "S4vibe4inet3url3URL",
						"name": "url"
					},
					{
						"deco": "E4vibe4http6common10HTTPMethod",
						"default": "cast(HTTPMethod)0",
						"name": "method"
					},
					{
						"deco": "C4vibe4core6stream11InputStream",
						"default": "null",
						"name": "data"
					}
				],
				"name": "createTestHTTPServerRequest",
				"comment": "\tCreates a HTTPServerRequest suitable for writing unit tests.\n",
				"originalType": "HTTPServerRequest(URL url, HTTPMethod method = HTTPMethod.GET, InputStream data = null)",
				"endline": 281
			},
			{
				"kind": "function",
				"line": 283,
				"deco": "FS4vibe4inet3url3URLE4vibe4http6common10HTTPMethodS4vibe5utils14dictionarylist33__T14DictionaryListTAyaVbi0Vki32Z14DictionaryListC4vibe4core6stream11InputStreamZC4vibe4http6server17HTTPServerRequest",
				"endchar": 1,
				"char": 19,
				"parameters": [
					{
						"deco": "S4vibe4inet3url3URL",
						"name": "url"
					},
					{
						"deco": "E4vibe4http6common10HTTPMethod",
						"name": "method"
					},
					{
						"deco": "S4vibe5utils14dictionarylist33__T14DictionaryListTAyaVbi0Vki32Z14DictionaryList",
						"name": "headers"
					},
					{
						"deco": "C4vibe4core6stream11InputStream",
						"default": "null",
						"name": "data"
					}
				],
				"name": "createTestHTTPServerRequest",
				"comment": "ditto\n",
				"originalType": "HTTPServerRequest(URL url, HTTPMethod method, InetHeaderMap headers, InputStream data = null)",
				"endline": 297
			},
			{
				"kind": "function",
				"line": 302,
				"deco": "FC4vibe4core6stream12OutputStreamC4vibe4http7session12SessionStoreZC4vibe4http6server18HTTPServerResponse",
				"endchar": 1,
				"char": 20,
				"parameters": [
					{
						"deco": "C4vibe4core6stream12OutputStream",
						"default": "null",
						"name": "data_sink"
					},
					{
						"deco": "C4vibe4http7session12SessionStore",
						"default": "null",
						"name": "session_store"
					}
				],
				"name": "createTestHTTPServerResponse",
				"comment": "\tCreates a HTTPServerResponse suitable for writing unit tests.\n",
				"endline": 315
			},
			{
				"kind": "alias",
				"line": 323,
				"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
				"char": 1,
				"name": "HTTPServerRequestDelegate",
				"comment": "\n\n\n\nDelegate based request handler\n"
			},
			{
				"kind": "alias",
				"line": 325,
				"deco": "PFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
				"char": 1,
				"name": "HTTPServerRequestFunction",
				"comment": "Static function based request handler\n"
			},
			{
				"kind": "interface",
				"line": 327,
				"members": [
					{
						"kind": "function",
						"line": 329,
						"storageClass": [
							"abstract"
						],
						"deco": "FC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4http6server17HTTPServerRequest",
								"name": "req"
							},
							{
								"deco": "C4vibe4http6server18HTTPServerResponse",
								"name": "res"
							}
						],
						"name": "handleRequest",
						"comment": "Handles incoming HTTP requests\n"
					}
				],
				"char": 1,
				"name": "HTTPServerRequestHandler",
				"comment": "Interface for class based request handlers\n"
			},
			{
				"kind": "class",
				"line": 334,
				"members": [
					{
						"kind": "variable",
						"line": 336,
						"deco": "i",
						"char": 6,
						"name": "code",
						"comment": "The HTTP status code\n",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 338,
						"deco": "Aya",
						"char": 9,
						"name": "message",
						"comment": "The error message\n",
						"offset": 12
					},
					{
						"kind": "variable",
						"line": 340,
						"deco": "Aya",
						"char": 9,
						"name": "debugMessage",
						"comment": "Extended error message with debug information such as a stack trace\n",
						"offset": 20
					},
					{
						"kind": "variable",
						"line": 342,
						"deco": "C6object9Throwable",
						"char": 12,
						"name": "exception",
						"comment": "The error exception, if any\n",
						"originalType": "Throwable",
						"offset": 28
					}
				],
				"char": 7,
				"name": "HTTPServerErrorInfo",
				"comment": "Aggregates all information about an HTTP error status.\n"
			},
			{
				"kind": "alias",
				"line": 346,
				"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseC4vibe4http6server19HTTPServerErrorInfoZv",
				"char": 1,
				"name": "HTTPServerErrorPageHandler",
				"comment": "Delegate type used for user defined error page generator callbacks.\n"
			},
			{
				"kind": "enum",
				"line": 358,
				"members": [
					{
						"kind": "enum member",
						"line": 359,
						"value": "0",
						"char": 2,
						"name": "none"
					},
					{
						"kind": "enum member",
						"line": 361,
						"value": "1",
						"char": 2,
						"name": "parseURL",
						"comment": "Fills the .path, .queryString fields in the request\n"
					},
					{
						"kind": "enum member",
						"line": 363,
						"value": "3",
						"char": 2,
						"name": "parseQueryString",
						"comment": "Fills the .query field in the request\n"
					},
					{
						"kind": "enum member",
						"line": 365,
						"value": "4",
						"char": 2,
						"name": "parseFormBody",
						"comment": "Fills the .form field in the request\n"
					},
					{
						"kind": "enum member",
						"line": 367,
						"value": "8",
						"char": 2,
						"name": "parseJsonBody",
						"comment": "Fills the .json field in the request\n"
					},
					{
						"kind": "enum member",
						"line": 369,
						"value": "16",
						"char": 2,
						"name": "parseMultiPartBody",
						"comment": "Enables use of the .nextPart() method in the request\n"
					},
					{
						"kind": "enum member",
						"line": 371,
						"value": "32",
						"char": 2,
						"name": "parseCookies",
						"comment": "Fills the .cookies field in the request\n"
					},
					{
						"kind": "enum member",
						"line": 373,
						"value": "64",
						"char": 2,
						"name": "distribute",
						"comment": "Distributes request processing among worker threads\n"
					},
					{
						"kind": "enum member",
						"line": 382,
						"value": "128",
						"char": 2,
						"name": "errorStackTraces",
						"comment": " Enables stack traces (HTTPServerErrorInfo.debugMessage).\n\n\t\tNote that generating the stack traces are generally a costly\n\t\toperation that should usually be avoided in production\n\t\tenvironments. It can also reveal internal information about\n\t\tthe application, such as function addresses, which can\n\t\thelp an attacker to abuse possible security holes.\n"
					},
					{
						"kind": "enum member",
						"line": 388,
						"value": "191",
						"char": 2,
						"name": "defaults",
						"comment": " The default set of options.\n\n\t\tIncludes all options, except for distribute.\n"
					},
					{
						"kind": "enum member",
						"line": 398,
						"value": "0",
						"char": 2,
						"name": "None",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 400,
						"value": "1",
						"char": 2,
						"name": "ParseURL",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 402,
						"value": "3",
						"char": 2,
						"name": "ParseQueryString",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 404,
						"value": "4",
						"char": 2,
						"name": "ParseFormBody",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 406,
						"value": "8",
						"char": 2,
						"name": "ParseJsonBody",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 408,
						"value": "16",
						"char": 2,
						"name": "ParseMultiPartBody",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 410,
						"value": "32",
						"char": 2,
						"name": "ParseCookies",
						"comment": "deprecated\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "HTTPServerOption",
				"comment": "\tSpecifies optional features of the HTTP server.\n\n\tDisabling unneeded features can speed up the server or reduce its memory usage.\n\n\tNote that the options parseFormBody, parseJsonBody and parseMultiPartBody\n\twill also drain the HTTPServerRequest.bodyReader stream whenever a request\n\tbody with form or JSON data is encountered.\n"
			},
			{
				"kind": "class",
				"line": 419,
				"members": [
					{
						"kind": "variable",
						"line": 425,
						"init": "cast(ushort)80u",
						"deco": "t",
						"char": 9,
						"name": "port",
						"comment": " The port on which the HTTP server is listening.\n\n\t\tThe default value is 80. If you are running a SSL enabled server you may want to set this\n\t\tto 443 instead.\n",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 431,
						"init": "[\"::\", \"0.0.0.0\"]",
						"deco": "AAya",
						"char": 11,
						"name": "bindAddresses",
						"comment": " The interfaces on which the HTTP server is listening.\n\n\t\tBy default, the server will listen on all IPv4 and IPv6 interfaces.\n",
						"offset": 12
					},
					{
						"kind": "variable",
						"line": 438,
						"deco": "Aya",
						"char": 9,
						"name": "hostName",
						"comment": " Determines the server host name.\n\n\t\tIf multiple servers are listening on the same port, the host name will determine which one\n\t\tgets a request.\n",
						"offset": 20
					},
					{
						"kind": "variable",
						"line": 446,
						"init": "cast(HTTPServerOption)191",
						"deco": "E4vibe4http6server16HTTPServerOption",
						"char": 19,
						"name": "options",
						"comment": " Configures optional features of the HTTP server\n\n\t\tDisabling unneeded features can improve performance or reduce the server\n\t\tload in case of invalid or unwanted requests (DoS). By default,\n\t\tHTTPServerOption.defaults is used.\n",
						"offset": 28
					},
					{
						"kind": "variable",
						"line": 452,
						"deco": "S4core4time8Duration",
						"char": 11,
						"name": "maxRequestTime",
						"comment": " Time of a request after which the connection is closed with an error; not supported yet\n\n\t\tThe default limit of 0 means that the request time is not limited.\n",
						"offset": 32
					},
					{
						"kind": "variable",
						"line": 458,
						"deco": "S4core4time8Duration",
						"char": 11,
						"name": "keepAliveTimeout",
						"comment": " Maximum time between two request on a keep-alive connection\n\n\t\tThe default value is 10 seconds.\n",
						"offset": 40
					},
					{
						"kind": "variable",
						"line": 462,
						"init": "2097152LU",
						"deco": "m",
						"char": 8,
						"name": "maxRequestSize",
						"comment": "Maximum number of transferred bytes per request after which the connection is closed with\n\nan error; not supported yet\n",
						"offset": 48
					},
					{
						"kind": "variable",
						"line": 467,
						"init": "8192LU",
						"deco": "m",
						"char": 8,
						"name": "maxRequestHeaderSize",
						"comment": "Maximum number of transferred bytes for the request header. This includes the request line\n\nthe url and all headers.\n",
						"offset": 56
					},
					{
						"kind": "variable",
						"line": 470,
						"init": "null",
						"deco": "DFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseC4vibe4http6server19HTTPServerErrorInfoZv",
						"char": 29,
						"name": "errorPageHandler",
						"comment": "Sets a custom handler for displaying error pages for HTTP errors\n",
						"originalType": "HTTPServerErrorPageHandler",
						"offset": 64
					},
					{
						"kind": "variable",
						"line": 473,
						"deco": "C4vibe6stream3ssl10SSLContext",
						"char": 13,
						"name": "sslContext",
						"comment": "If set, a HTTPS server will be started instead of plain HTTP.\n",
						"originalType": "SSLContext",
						"offset": 72
					},
					{
						"kind": "variable",
						"line": 476,
						"deco": "C4vibe4http7session12SessionStore",
						"char": 15,
						"name": "sessionStore",
						"comment": "Session management is enabled if a session store instance is provided\n",
						"originalType": "SessionStore",
						"offset": 76
					},
					{
						"kind": "variable",
						"line": 477,
						"init": "\"vibe.session_id\"",
						"deco": "Aya",
						"char": 9,
						"name": "sessionIdCookie",
						"offset": 80
					},
					{
						"kind": "variable",
						"line": 481,
						"init": "\"vibe.d/0.7.23\"",
						"deco": "Aya",
						"char": 9,
						"name": "serverString",
						"offset": 88
					},
					{
						"kind": "variable",
						"line": 491,
						"init": "\"%h - %u %t \\\"%r\\\" %s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\"",
						"deco": "Aya",
						"char": 9,
						"name": "accessLogFormat",
						"comment": " Specifies the format used for the access log.\n\n\t\tThe log format is given using the Apache server syntax. By default NCSA combined is used.\n\n\t\t---\n\t\t\"%h - %u %t \\\"%r\\\" %s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\"\n\t\t---\n",
						"offset": 96
					},
					{
						"kind": "variable",
						"line": 494,
						"init": "\"\"",
						"deco": "Aya",
						"char": 9,
						"name": "accessLogFile",
						"comment": "Spefifies the name of a file to which access log messages are appended.\n",
						"offset": 104
					},
					{
						"kind": "variable",
						"line": 497,
						"init": "false",
						"deco": "b",
						"char": 7,
						"name": "accessLogToConsole",
						"comment": "If set, access log entries will be output to the console.\n",
						"offset": 112
					},
					{
						"kind": "function",
						"line": 500,
						"deco": "FNdZC4vibe4http6server18HTTPServerSettings",
						"endchar": 2,
						"char": 31,
						"name": "dup",
						"comment": "Returns a duplicate of the settings object.\n",
						"endline": 509
					},
					{
						"kind": "variable",
						"line": 512,
						"init": "false",
						"deco": "b",
						"char": 7,
						"name": "disableDistHost",
						"comment": "Disable support for VibeDist and instead start listening immediately.\n",
						"offset": 113
					},
					{
						"kind": "variable",
						"line": 523,
						"init": "false",
						"deco": "b",
						"char": 7,
						"name": "useCompressionIfPossible",
						"comment": " Responds to \"Accept-Encoding\" by using compression if possible.\n\n\t\tCompression can also be manually enabled by setting the\n\t\t\"Content-Encoding\" header of the HTTP response appropriately before\n\t\tsending the response body.\n\n\t\tThis setting is disabled by default. Also note that there are still some\n\t\tknown issues with the GZIP compression code.\n",
						"offset": 114
					},
					{
						"kind": "variable",
						"line": 530,
						"deco": "S4core4time8Duration",
						"char": 11,
						"name": "webSocketPingInterval",
						"comment": " Interval between WebSocket ping frames.\n\n\t\tThe default value is 60 seconds; set to Duration.zero to disable pings.\n",
						"offset": 120
					},
					{
						"kind": "constructor",
						"line": 532,
						"deco": "FZC4vibe4http6server18HTTPServerSettings",
						"endchar": 2,
						"char": 2,
						"name": "this",
						"originalType": "()",
						"endline": 538
					}
				],
				"char": 7,
				"name": "HTTPServerSettings",
				"comment": "\tContains all settings for configuring a basic HTTP server.\n\n\tThe defaults are sufficient for most normal uses.\n"
			},
			{
				"kind": "enum",
				"line": 549,
				"members": [
					{
						"kind": "enum member",
						"line": 551,
						"value": "0",
						"char": 2,
						"name": "none",
						"comment": "No options.\n"
					},
					{
						"kind": "enum member",
						"line": 557,
						"value": "1",
						"char": 2,
						"name": "httpOnly",
						"comment": " Instructs the browser to disallow accessing the session ID from JavaScript.\n\n\t\tSee_Also: Cookie.httpOnly\n"
					},
					{
						"kind": "enum member",
						"line": 567,
						"value": "2",
						"char": 2,
						"name": "secure",
						"comment": " Instructs the browser to disallow sending the session ID over\n\t\tunencrypted connections.\n\n\t\tBy default, the type of the connection on which the session is started\n\t\twill be used to determine if secure or noSecure is used.\n\n\t\tSee_Also: noSecure, Cookie.secure\n"
					},
					{
						"kind": "enum member",
						"line": 577,
						"value": "4",
						"char": 2,
						"name": "noSecure",
						"comment": " Instructs the browser to allow sending the session ID over unencrypted\n\t\tconnections.\n\n\t\tBy default, the type of the connection on which the session is started\n\t\twill be used to determine if secure or noSecure is used.\n\n\t\tSee_Also: secure, Cookie.secure\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "SessionOption",
				"comment": "\tOptions altering how sessions are created.\n\n\tMultiple values can be or'ed together.\n\n\tSee_Also: HTTPServerResponse.startSession\n"
			},
			{
				"kind": "class",
				"line": 584,
				"base": "vibe.http.common.HTTPRequest",
				"members": [
					{
						"kind": "variable",
						"line": 594,
						"deco": "Aya",
						"char": 10,
						"name": "peer",
						"comment": "The IP address of the client\n",
						"offset": 740
					},
					{
						"kind": "variable",
						"line": 596,
						"deco": "S4vibe4core3net14NetworkAddress",
						"char": 18,
						"name": "clientAddress",
						"comment": "ditto\n",
						"offset": 748
					},
					{
						"kind": "variable",
						"line": 599,
						"deco": "b",
						"char": 8,
						"name": "ssl",
						"comment": "Determines if the request was issued over an SSL encrypted channel.\n",
						"offset": 776
					},
					{
						"kind": "variable",
						"line": 606,
						"deco": "S4vibe6stream3ssl25SSLCertificateInformation",
						"char": 29,
						"name": "clientCertificate",
						"comment": " Information about the SSL certificate provided by the client.\n\n\t\t\tRemarks: This field is only set if ssl is true, and the peer\n\t\t\tpresented a client certificate.\n",
						"offset": 780
					},
					{
						"kind": "variable",
						"line": 612,
						"deco": "Aya",
						"char": 10,
						"name": "path",
						"comment": " The _path part of the URL.\n\n\t\t\tRemarks: This field is only set if HTTPServerOption.parseURL is set.\n",
						"offset": 1432
					},
					{
						"kind": "variable",
						"line": 618,
						"deco": "Aya",
						"char": 10,
						"name": "username",
						"comment": " The user name part of the URL, if present.\n\n\t\t\tRemarks: This field is only set if HTTPServerOption.parseURL is set.\n",
						"offset": 1440
					},
					{
						"kind": "variable",
						"line": 624,
						"deco": "Aya",
						"char": 10,
						"name": "password",
						"comment": " The _password part of the URL, if present.\n\n\t\t\tRemarks: This field is only set if HTTPServerOption.parseURL is set.\n",
						"offset": 1448
					},
					{
						"kind": "variable",
						"line": 630,
						"deco": "Aya",
						"char": 10,
						"name": "queryString",
						"comment": " The _query string part of the URL.\n\n\t\t\tRemarks: This field is only set if HTTPServerOption.parseURL is set.\n",
						"offset": 1456
					},
					{
						"kind": "variable",
						"line": 641,
						"deco": "S4vibe4http6common14CookieValueMap",
						"char": 18,
						"name": "cookies",
						"comment": " Contains the list of _cookies that are stored on the client.\n\n\t\t\tNote that the a single cookie name may occur multiple times if multiple\n\t\t\tcookies have that name but different paths or domains that all match\n\t\t\tthe request URI. By default, the first cookie will be returned, which is\n\t\t\tthe or one of the cookies with the closest path match.\n\n\t\t\tRemarks: This field is only set if HTTPServerOption.parseCookies is set.\n",
						"offset": 1464
					},
					{
						"kind": "variable",
						"line": 649,
						"deco": "S4vibe5utils14dictionarylist33__T14DictionaryListTAyaVbi1Vki16Z14DictionaryList",
						"char": 14,
						"name": "query",
						"comment": " Contains all _form fields supplied using the _query string.\n\n\t\t\tThe fields are stored in the same order as they are received.\n\n\t\t\tRemarks: This field is only set if HTTPServerOption.parseQueryString is set.\n",
						"originalType": "FormFields",
						"offset": 1472
					},
					{
						"kind": "variable",
						"line": 657,
						"deco": "HAyaAya",
						"char": 18,
						"name": "params",
						"comment": " A map of general parameters for the request.\n\n\t\t\tThis map is supposed to be used by middleware functionality to store\n\t\t\tinformation for later stages. For example vibe.http.router.URLRouter uses this map\n\t\t\tto store the value of any named placeholders.\n",
						"offset": 1804
					},
					{
						"kind": "variable",
						"line": 668,
						"deco": "C4vibe4core6stream11InputStream",
						"char": 15,
						"name": "bodyReader",
						"comment": " Supplies the request body as a stream.\n\n\t\t\tNote that when certain server options are set (such as\n\t\t\tHTTPServerOption.parseJsonBody) and a matching request was sent,\n\t\t\tthe returned stream will be empty. If needed, remove those\n\t\t\toptions and do your own processing of the body when launching\n\t\t\tthe server. HTTPServerOption has a list of all options that affect\n\t\t\tthe request body.\n",
						"originalType": "InputStream",
						"offset": 1808
					},
					{
						"kind": "variable",
						"line": 677,
						"deco": "S4vibe4data4json4Json",
						"char": 8,
						"name": "json",
						"comment": " Contains the parsed Json for a JSON request.\n\n\t\t\tRemarks:\n\t\t\t\tThis field is only set if HTTPServerOption.parseJsonBody is set.\n\n\t\t\t\tA JSON request must have the Content-Type \"application/json\".\n",
						"offset": 1812
					},
					{
						"kind": "variable",
						"line": 689,
						"deco": "S4vibe5utils14dictionarylist33__T14DictionaryListTAyaVbi1Vki16Z14DictionaryList",
						"char": 14,
						"name": "form",
						"comment": " Contains the parsed parameters of a HTML POST _form request.\n\n\t\t\tThe fields are stored in the same order as they are received.\n\n\t\t\tRemarks:\n\t\t\t\tThis field is only set if HTTPServerOption.parseFormBody is set.\n\n\t\t\t\tA form request must either have the Content-Type\n\t\t\t\t\"application/x-www-form-urlencoded\" or \"multipart/form-data\".\n",
						"originalType": "FormFields",
						"offset": 1824
					},
					{
						"kind": "variable",
						"line": 697,
						"deco": "S4vibe5utils14dictionarylist57__T14DictionaryListTS4vibe4inet7webform8FilePartVbi1Vki1Z14DictionaryList",
						"char": 22,
						"name": "files",
						"comment": " Contains information about any uploaded file for a HTML _form request.\n\n\t\t\tRemarks:\n\t\t\t\tThis field is only set if HTTPServerOption.parseFormBody is set\n\t\t\t\tand if the Content-Type is \"multipart/form-data\".\n",
						"originalType": "FilePartFormFields",
						"offset": 2156
					},
					{
						"kind": "variable",
						"line": 707,
						"deco": "S4vibe4http7session7Session",
						"char": 11,
						"name": "session",
						"comment": " The current Session object.\n\n\t\t\tThis field is set if HTTPServerResponse.startSession() has been called\n\t\t\ton a previous response and if the client has sent back the matching\n\t\t\tcookie.\n\n\t\t\tRemarks: Requires the HTTPServerOption.parseCookies option.\n",
						"offset": 2852
					},
					{
						"kind": "constructor",
						"line": 719,
						"deco": "FS3std8datetime7SysTimetZC4vibe4http6server17HTTPServerRequest",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "S3std8datetime7SysTime",
								"name": "time"
							},
							{
								"deco": "t",
								"name": "port"
							}
						],
						"name": "this",
						"originalType": "(SysTime time, ushort port)",
						"endline": 725
					},
					{
						"kind": "function",
						"line": 729,
						"deco": "NgFNdZNgS3std8datetime7SysTime",
						"endchar": 71,
						"char": 27,
						"name": "timeCreated",
						"comment": " Time when this request started processing.\n",
						"endline": 729
					},
					{
						"kind": "function",
						"line": 741,
						"deco": "xFNdZS4vibe4inet3url3URL",
						"endchar": 2,
						"char": 16,
						"name": "fullURL",
						"comment": " The full URL that corresponds to this request.\n\n\t\tThe host URL includes the protocol, host and optionally the user\n\t\tand password that was used for this request. This field is useful to\n\t\tconstruct self referencing URLs.\n\n\t\tNote that the port is currently not set, so that this only works if\n\t\tthe standard port is used.\n",
						"endline": 767
					},
					{
						"kind": "function",
						"line": 777,
						"deco": "xFNdZAya",
						"endchar": 2,
						"char": 19,
						"name": "rootDir",
						"comment": " The relative path the the root folder.\n\n\t\tUsing this function instead of absolute URLs for embedded links can be\n\t\tuseful to avoid dead link when the site is piped through a\n\t\treverse-proxy.\n\n\t\tThe returned string always ends with a slash.\n",
						"endline": 781
					}
				],
				"char": 7,
				"name": "HTTPServerRequest",
				"comment": "\tRepresents a HTTP request as received by the server side.\n"
			},
			{
				"kind": "class",
				"line": 788,
				"base": "vibe.http.common.HTTPResponse",
				"members": [
					{
						"kind": "constructor",
						"line": 806,
						"deco": "FC4vibe4core6stream6StreamC4vibe4core6stream16ConnectionStreamC4vibe4http6server18HTTPServerSettingsC4vibe5utils6memory9AllocatorZC4vibe4http6server18HTTPServerResponse",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream6Stream",
								"name": "conn"
							},
							{
								"deco": "C4vibe4core6stream16ConnectionStream",
								"name": "raw_connection"
							},
							{
								"deco": "C4vibe4http6server18HTTPServerSettings",
								"name": "settings"
							},
							{
								"deco": "C4vibe5utils6memory9Allocator",
								"name": "req_alloc"
							}
						],
						"name": "this",
						"originalType": "(Stream conn, ConnectionStream raw_connection, HTTPServerSettings settings, Allocator req_alloc)",
						"endline": 813
					},
					{
						"kind": "function",
						"line": 815,
						"deco": "FNdZS3std8datetime7SysTime",
						"endchar": 62,
						"char": 20,
						"name": "timeFinalized",
						"endline": 815
					},
					{
						"kind": "function",
						"line": 819,
						"deco": "xFNdZb",
						"endchar": 65,
						"char": 17,
						"name": "headerWritten",
						"comment": " Determines if the HTTP header has already been written.\n",
						"endline": 819
					},
					{
						"kind": "function",
						"line": 823,
						"deco": "xFZb",
						"endchar": 57,
						"char": 7,
						"name": "isHeadResponse",
						"comment": " Determines if the response does not need a body.\n",
						"endline": 823
					},
					{
						"kind": "function",
						"line": 827,
						"deco": "xFZb",
						"endchar": 35,
						"char": 7,
						"name": "ssl",
						"comment": " Determines if the response is sent over an encrypted connection.\n",
						"endline": 827
					},
					{
						"kind": "function",
						"line": 830,
						"deco": "FxAhAyaZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xAh",
								"name": "data"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "content_type"
							}
						],
						"name": "writeBody",
						"comment": "Writes the entire response body at once.\n",
						"originalType": "void(in ubyte[] data, string content_type = null)",
						"endline": 835
					},
					{
						"kind": "function",
						"line": 837,
						"deco": "FAyaAyaZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "data"
							},
							{
								"deco": "Aya",
								"default": "\"text/plain; charset=UTF-8\"",
								"name": "content_type"
							}
						],
						"name": "writeBody",
						"comment": "ditto\n",
						"endline": 840
					},
					{
						"kind": "function",
						"line": 842,
						"deco": "FxAhiAyaZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xAh",
								"name": "data"
							},
							{
								"deco": "i",
								"name": "status"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "content_type"
							}
						],
						"name": "writeBody",
						"comment": "ditto\n",
						"originalType": "void(in ubyte[] data, int status, string content_type = null)",
						"endline": 846
					},
					{
						"kind": "function",
						"line": 848,
						"deco": "FAyaiAyaZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "data"
							},
							{
								"deco": "i",
								"name": "status"
							},
							{
								"deco": "Aya",
								"default": "\"text/plain; charset=UTF-8\"",
								"name": "content_type"
							}
						],
						"name": "writeBody",
						"comment": "ditto\n",
						"endline": 852
					},
					{
						"kind": "function",
						"line": 864,
						"deco": "FC4vibe4core6stream18RandomAccessStreamZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4core6stream18RandomAccessStream",
								"name": "stream"
							}
						],
						"name": "writeRawBody",
						"comment": " Writes the whole response body at once, without doing any further encoding.\n\n\t\tThe caller has to make sure that the appropriate headers are set correctly\n\t\t(i.e. Content-Type and Content-Encoding).\n\n\t\tNote that the version taking a RandomAccessStream may perform additional\n\t\toptimizations such as sending a file directly from the disk to the\n\t\tnetwork card using a DMA transfer.\n\n",
						"endline": 873
					},
					{
						"kind": "function",
						"line": 875,
						"deco": "FC4vibe4core6stream11InputStreamkZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							},
							{
								"deco": "k",
								"default": "0u",
								"name": "num_bytes"
							}
						],
						"name": "writeRawBody",
						"comment": "ditto\n",
						"originalType": "void(InputStream stream, size_t num_bytes = 0)",
						"endline": 885
					},
					{
						"kind": "function",
						"line": 887,
						"deco": "FC4vibe4core6stream18RandomAccessStreamiZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4core6stream18RandomAccessStream",
								"name": "stream"
							},
							{
								"deco": "i",
								"name": "status"
							}
						],
						"name": "writeRawBody",
						"comment": "ditto\n",
						"endline": 891
					},
					{
						"kind": "function",
						"line": 893,
						"deco": "FC4vibe4core6stream11InputStreamikZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							},
							{
								"deco": "i",
								"name": "status"
							},
							{
								"deco": "k",
								"default": "0u",
								"name": "num_bytes"
							}
						],
						"name": "writeRawBody",
						"comment": "ditto\n",
						"originalType": "void(InputStream stream, int status, size_t num_bytes = 0)",
						"endline": 897
					},
					{
						"kind": "template",
						"line": 900,
						"members": [
							{
								"kind": "function",
								"line": 900,
								"endchar": 2,
								"char": 7,
								"type": "void(T data, int status = HTTPStatus.OK, string content_type = \"application/json; charset=UTF-8\", bool allow_chunked = false)",
								"parameters": [
									{
										"type": "T",
										"name": "data"
									},
									{
										"deco": "i",
										"default": "HTTPStatus.OK",
										"name": "status"
									},
									{
										"default": "\"application/json; charset=UTF-8\"",
										"type": "string",
										"name": "content_type"
									},
									{
										"deco": "b",
										"default": "false",
										"name": "allow_chunked"
									}
								],
								"name": "writeJsonBody",
								"endline": 923
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Writes a JSON message with the specified status\n",
						"name": "writeJsonBody"
					},
					{
						"kind": "function",
						"line": 932,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "writeVoidBody",
						"comment": " Writes the response with no body.\n\n This method should be used in situations where no body is\n requested, such as a HEAD request. For an empty body, just use writeBody,\n as this method causes problems with some keep-alive connections.\n",
						"endline": 940
					},
					{
						"kind": "function",
						"line": 947,
						"deco": "FNdZC4vibe4core6stream12OutputStream",
						"endchar": 2,
						"char": 25,
						"name": "bodyWriter",
						"comment": " A stream for writing the body of the HTTP response.\n\n\t\tNote that after 'bodyWriter' has been accessed for the first time, it\n\t\tis not allowed to change any header or the status code of the response.\n",
						"endline": 994
					},
					{
						"kind": "function",
						"line": 1002,
						"deco": "FAyaiZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "url"
							},
							{
								"deco": "i",
								"default": "302",
								"name": "status"
							}
						],
						"name": "redirect",
						"comment": " Sends a redirect request to the client.\n\n\t\tParams:\n\t\t\turl = The URL to redirect to\n\t\t\tstatus = The HTTP redirect status (3xx) to send - by default this is $D(D HTTPStatus.found)\nExample:\n\n---\nimport vibe.http.router;\n\nvoid request_handler(HTTPServerRequest req, HTTPServerResponse res)\n{\n\tres.redirect(\"http://example.org/some_other_url\");\n}\n\nvoid test()\n{\n\tauto router = new URLRouter;\n\trouter.get(\"/old_url\", &request_handler);\n\n\tlistenHTTP(new HTTPServerSettings, router);\n}\n\n\n---\n",
						"originalType": "void(string url, int status = HTTPStatus.Found)",
						"endline": 1008
					},
					{
						"kind": "function",
						"line": 1010,
						"deco": "FS4vibe4inet3url3URLiZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "S4vibe4inet3url3URL",
								"name": "url"
							},
							{
								"deco": "i",
								"default": "302",
								"name": "status"
							}
						],
						"name": "redirect",
						"comment": "ditto\n",
						"originalType": "void(URL url, int status = HTTPStatus.Found)",
						"endline": 1013
					},
					{
						"kind": "function",
						"line": 1036,
						"deco": "FAyaZC4vibe4core6stream16ConnectionStream",
						"endchar": 2,
						"char": 19,
						"parameters": [
							{
								"deco": "Aya",
								"name": "protocol"
							}
						],
						"name": "switchProtocol",
						"comment": " Special method sending a SWITCHING_PROTOCOLS response to the client.\n",
						"endline": 1042
					},
					{
						"kind": "function",
						"line": 1051,
						"deco": "FAyaAyaAyaZC4vibe4http6common6Cookie",
						"endchar": 2,
						"char": 9,
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "Aya",
								"name": "value"
							},
							{
								"deco": "Aya",
								"default": "\"/\"",
								"name": "path"
							}
						],
						"name": "setCookie",
						"comment": " Sets the specified cookie value.\n\n\t\tParams:\n\t\t\tname = Name of the cookie\n\t\t\tvalue = New cookie value - pass null to clear the cookie\n\t\t\tpath = Path (as seen by the client) of the directory tree in which the cookie is visible\n",
						"endline": 1062
					},
					{
						"kind": "function",
						"line": 1071,
						"deco": "FAyaE4vibe4http6server13SessionOptionZS4vibe4http7session7Session",
						"endchar": 2,
						"char": 10,
						"parameters": [
							{
								"deco": "Aya",
								"default": "\"/\"",
								"name": "path"
							},
							{
								"deco": "E4vibe4http6server13SessionOption",
								"default": "cast(SessionOption)1",
								"name": "options"
							}
						],
						"name": "startSession",
						"comment": "\t\tInitiates a new session.\n\n\t\tThe session is stored in the SessionStore that was specified when\n\t\tcreating the server. Depending on this, the session can be persistent\n\t\tor temporary and specific to this server instance.\n",
						"originalType": "Session(string path = \"/\", SessionOption options = SessionOption.httpOnly)",
						"endline": 1088
					},
					{
						"kind": "function",
						"line": 1093,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "terminateSession",
						"comment": "\t\tTerminates the current session (if any).\n",
						"endline": 1100
					},
					{
						"kind": "function",
						"line": 1102,
						"deco": "FNdZm",
						"endchar": 73,
						"char": 18,
						"name": "bytesWritten",
						"endline": 1102
					},
					{
						"kind": "template",
						"line": 1129,
						"members": [
							{
								"kind": "function",
								"line": 1129,
								"endchar": 2,
								"char": 7,
								"type": "void(...)",
								"name": "renderCompat",
								"endline": 1134
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "template_file"
							},
							{
								"kind": "tuple",
								"name": "TYPES_AND_NAMES"
							}
						],
						"comment": "\t\tCompatibility version of render() that takes a list of explicit names and types instead\n\t\tof variable aliases.\n\n\t\tThis version of render() works around a compiler bug in DMD (Issue 2962). You should use\n\t\tthis method instead of render() as long as this bug is not fixed.\n\n\t\tThe first template argument is the name of the template file. All following arguments\n\t\tmust be pairs of a type and a string, each specifying one parameter. Parameter values\n\t\tcan be passed either as a value of the same type as specified by the template\n\t\targuments, or as a Variant which has the same type stored.\n\n\t\tNote that the variables are copied and not referenced inside of the template - any\n\t\tmodification you do on them from within the template will get lost.\n\n\t\tExamples:\n\t\t\t---\n\t\t\tstring title = \"Hello, World!\";\n\t\t\tint pageNumber = 1;\n\t\t\tres.renderCompat!(\"mytemplate.jd\",\n\t\t\t\tstring, \"title\",\n\t\t\t\tint, \"pageNumber\")\n\t\t\t\t(title, pageNumber);\n\t\t\t---\n",
						"name": "renderCompat"
					},
					{
						"kind": "function",
						"line": 1144,
						"deco": "FS4core4time8DurationZb",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"default": "max()",
								"name": "timeout"
							}
						],
						"name": "waitForConnectionClose",
						"comment": "\t\tWaits until either the connection closes or until the given timeout is\n\t\treached.\n\n\t\tReturns:\n\t\t\t$(D true) if the connection was closed and $(D false) when the\n\t\t\ttimeout was reached.\n",
						"originalType": "bool(Duration timeout = Duration.max)",
						"endline": 1149
					},
					{
						"kind": "destructor",
						"line": 788,
						"deco": "FZv",
						"char": 7,
						"name": "~this"
					}
				],
				"char": 7,
				"name": "HTTPServerResponse",
				"comment": "\tRepresents a HTTP response as sent from the server side.\n"
			}
		],
		"name": "vibe.http.server",
		"comment": "\tA HTTP 1.1/1.0 server implementation.\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger, Ilya Shipunov\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\http\\session.d",
		"members": [
			{
				"kind": "alias",
				"line": 28,
				"char": 1,
				"name": "Base64URLNoPadding"
			},
			{
				"kind": "struct",
				"line": 36,
				"members": [
					{
						"kind": "function",
						"line": 57,
						"deco": "xFZb",
						"endchar": 49,
						"char": 7,
						"name": "opCast",
						"comment": " Checks if the session is active.\n\n\t\tThis operator enables a $(D Session) value to be used in conditionals\n\t\tto check if they are actially valid/active.\nExample:\n\n---\nimport vibe.http.server;\n\nvoid login(HTTPServerRequest req, HTTPServerResponse res)\n{\n\t// TODO: validate username+password\n\n\t// ensure that there is an active session\n\tif (!req.session) req.session = res.startSession();\n\n\t// update session variables\n\treq.session.set(\"loginUser\", req.form[\"user\"]);\n}\n}\n\n/// Returns the unique session id of this session.\n@property string id() const { return m_id; \n\n---\n",
						"endline": 57
					},
					{
						"kind": "function",
						"line": 76,
						"deco": "xFNdZAya",
						"endchar": 45,
						"char": 19,
						"name": "id",
						"comment": "Returns the unique session id of this session.\n",
						"endline": 76
					},
					{
						"kind": "function",
						"line": 79,
						"deco": "FAyaZb",
						"endchar": 66,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"name": "isKeySet",
						"comment": "Queries the session for the existence of a particular key.\n",
						"endline": 79
					},
					{
						"kind": "template",
						"line": 83,
						"members": [
							{
								"kind": "function",
								"line": 83,
								"endchar": 2,
								"char": 11,
								"type": "const(T)(string key, lazy T def_value = T.init)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"storageClass": [
											"lazy"
										],
										"default": "T.init",
										"type": "T",
										"name": "def_value"
									}
								],
								"name": "get",
								"endline": 87
							}
						],
						"char": 11,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": " Gets a typed field from the session.\n",
						"name": "get"
					},
					{
						"kind": "template",
						"line": 91,
						"members": [
							{
								"kind": "function",
								"line": 91,
								"endchar": 2,
								"char": 7,
								"type": "void(string key, T value)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "set",
								"endline": 95
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": " Sets a typed field to the session.\n",
						"name": "set"
					},
					{
						"kind": "function",
						"line": 115,
						"storageClass": [
							"deprecated"
						],
						"deco": "FDFKAyaKS3std7variant18__T8VariantNVki20Z8VariantNZiZi",
						"endchar": 2,
						"char": 6,
						"parameters": [
							{
								"deco": "DFKAyaKS3std7variant18__T8VariantNVki20Z8VariantNZi",
								"name": "del"
							}
						],
						"name": "opApply",
						"comment": "\t\tEnables foreach-iteration over all key/value pairs of the session.\n\n\t\tNote that this overload is deprecated and works only for\n\t\tMemorySessionStore.\n\n\t\tExamples:\n\t\t---\n\t\t// sends all session entries to the requesting browser\n\t\tvoid handleRequest(HTTPServerRequest req, HTTPServerResponse res)\n\t\t{\n\t\t\tres.contentType = \"text/plain\";\n\t\t\tforeach(key, value; req.session)\n\t\t\t\tres.bodyWriter.write(key ~ \": \" ~ value ~ \"\\n\");\n\t\t}\n\t\t---\n",
						"originalType": "int(int delegate(ref string key, ref Variant value) del)",
						"endline": 121
					},
					{
						"kind": "function",
						"line": 138,
						"deco": "FMDFAyaZiZi",
						"endchar": 2,
						"char": 6,
						"parameters": [
							{
								"deco": "DFAyaZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"name": "opApply",
						"comment": "\t\tEnables foreach-iteration over all keys of the session.\n\n\t\tExamples:\n\t\t---\n\t\t// sends all session entries to the requesting browser\n\t\t// assumes that all entries are strings\n\t\tvoid handleRequest(HTTPServerRequest req, HTTPServerResponse res)\n\t\t{\n\t\t\tres.contentType = \"text/plain\";\n\t\t\tforeach(key; req.session)\n\t\t\t\tres.bodyWriter.write(key ~ \": \" ~ req.session.get!string(key) ~ \"\\n\");\n\t\t}\n\t\t---\n",
						"endline": 141
					},
					{
						"kind": "function",
						"line": 160,
						"storageClass": [
							"deprecated"
						],
						"deco": "FAyaZAya",
						"endchar": 97,
						"char": 9,
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"name": "opIndex",
						"comment": "\t\tGets/sets a key/value pair stored within the session.\n\n\t\tReturns null if the specified key is not set.\n\n\t\tExamples:\n\t\t---\n\t\tvoid handleRequest(HTTPServerRequest req, HTTPServerResponse res)\n\t\t{\n\t\t\tres.contentType = \"text/plain\";\n\t\t\tres.bodyWriter.write(\"Username: \" ~ req.session[\"userName\"]);\n\t\t\tres.bodyWriter.write(\"Request count: \" ~ req.session[\"requestCount\"]);\n\t\t\treq.session[\"requestCount\"] = to!string(req.session[\"requestCount\"].to!int + 1);\n\t\t}\n\t\t---\n",
						"endline": 160
					},
					{
						"kind": "function",
						"line": 163,
						"storageClass": [
							"deprecated"
						],
						"deco": "FAyaAyaZv",
						"endchar": 91,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "value"
							},
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"name": "opIndexAssign",
						"comment": "ditto\n",
						"endline": 163
					}
				],
				"char": 7,
				"name": "Session",
				"comment": "\tRepresents a single HTTP session.\n\n\tIndexing the session object with string keys allows to store arbitrary key/value pairs.\n"
			},
			{
				"kind": "interface",
				"line": 199,
				"members": [
					{
						"kind": "function",
						"line": 201,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNdZE4vibe4http7session18SessionStorageType",
						"char": 31,
						"name": "storageType",
						"comment": "Returns the internal type used for storing session keys.\n"
					},
					{
						"kind": "function",
						"line": 204,
						"storageClass": [
							"abstract"
						],
						"deco": "FZS4vibe4http7session7Session",
						"char": 10,
						"name": "create",
						"comment": "Creates a new session.\n"
					},
					{
						"kind": "function",
						"line": 207,
						"storageClass": [
							"abstract"
						],
						"deco": "FAyaZS4vibe4http7session7Session",
						"char": 10,
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							}
						],
						"name": "open",
						"comment": "Opens an existing session.\n"
					},
					{
						"kind": "function",
						"line": 210,
						"storageClass": [
							"abstract"
						],
						"deco": "FAyaAyaS3std7variant18__T8VariantNVki20Z8VariantNZv",
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "S3std7variant18__T8VariantNVki20Z8VariantN",
								"name": "value"
							}
						],
						"name": "set",
						"comment": "Sets a name/value pair for a given session.\n",
						"originalType": "void(string id, string name, Variant value)"
					},
					{
						"kind": "function",
						"line": 213,
						"storageClass": [
							"abstract"
						],
						"deco": "FAyaAyaLS3std7variant18__T8VariantNVki20Z8VariantNZS3std7variant18__T8VariantNVki20Z8VariantN",
						"char": 10,
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "S3std7variant18__T8VariantNVki20Z8VariantN",
								"storageClass": [
									"lazy"
								],
								"name": "defaultVal"
							}
						],
						"name": "get",
						"comment": "Returns the value for a given session key.\n",
						"originalType": "Variant(string id, string name, lazy Variant defaultVal)"
					},
					{
						"kind": "function",
						"line": 216,
						"storageClass": [
							"abstract"
						],
						"deco": "FAyaAyaZb",
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"name": "isKeySet",
						"comment": "Determines if a certain session key is set.\n"
					},
					{
						"kind": "function",
						"line": 219,
						"storageClass": [
							"abstract"
						],
						"deco": "FAyaZv",
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							}
						],
						"name": "destroy",
						"comment": "Terminates the given sessiom.\n"
					},
					{
						"kind": "function",
						"line": 222,
						"storageClass": [
							"abstract"
						],
						"deco": "FAyaZDFDFKAyaKS3std7variant18__T8VariantNVki20Z8VariantNZiZi",
						"char": 64,
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							}
						],
						"name": "iterateSession",
						"comment": "Iterates all key/value pairs stored in the given session (deprecated, implement as assert(false)).\n",
						"originalType": "int delegate(int delegate(ref string key, ref Variant value))(string id)"
					},
					{
						"kind": "function",
						"line": 225,
						"storageClass": [
							"abstract"
						],
						"deco": "FAyaMDFAyaZiZi",
						"char": 6,
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "DFAyaZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"name": "iterateSession",
						"comment": "Iterates all keys stored in the given session.\n"
					},
					{
						"kind": "function",
						"line": 228,
						"protection": "protected",
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FAyaZS4vibe4http7session7Session",
						"endchar": 2,
						"char": 26,
						"parameters": [
							{
								"deco": "Aya",
								"default": "null",
								"name": "id"
							}
						],
						"name": "createSessionInstance",
						"comment": "Creates a new Session object which sources its contents from this store.\n",
						"endline": 236
					}
				],
				"char": 1,
				"name": "SessionStore",
				"comment": "\tInterface for a basic session store.\n\n\tA sesseion store is responsible for storing the id and the associated key/value pairs of a\n\tsession.\n"
			},
			{
				"kind": "enum",
				"line": 239,
				"members": [
					{
						"kind": "enum member",
						"line": 240,
						"value": "0",
						"char": 2,
						"name": "native"
					},
					{
						"kind": "enum member",
						"line": 241,
						"value": "1",
						"char": 2,
						"name": "json"
					},
					{
						"kind": "enum member",
						"line": 242,
						"value": "2",
						"char": 2,
						"name": "bson"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "SessionStorageType"
			},
			{
				"kind": "class",
				"line": 253,
				"members": [
					{
						"kind": "function",
						"line": 258,
						"deco": "xFNdZE4vibe4http7session18SessionStorageType",
						"endchar": 2,
						"char": 31,
						"name": "storageType",
						"endline": 261,
						"overrides": [
							"vibe.http.session.SessionStore.storageType"
						]
					},
					{
						"kind": "function",
						"line": 263,
						"deco": "FZS4vibe4http7session7Session",
						"endchar": 2,
						"char": 10,
						"name": "create",
						"endline": 268,
						"overrides": [
							"vibe.http.session.SessionStore.create"
						]
					},
					{
						"kind": "function",
						"line": 270,
						"deco": "FAyaZS4vibe4http7session7Session",
						"endchar": 2,
						"char": 10,
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							}
						],
						"name": "open",
						"endline": 274,
						"overrides": [
							"vibe.http.session.SessionStore.open"
						]
					},
					{
						"kind": "function",
						"line": 276,
						"deco": "FAyaAyaS3std7variant18__T8VariantNVki20Z8VariantNZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "S3std7variant18__T8VariantNVki20Z8VariantN",
								"name": "value"
							}
						],
						"name": "set",
						"originalType": "void(string id, string name, Variant value)",
						"endline": 280,
						"overrides": [
							"vibe.http.session.SessionStore.set"
						]
					},
					{
						"kind": "function",
						"line": 282,
						"deco": "FAyaAyaLS3std7variant18__T8VariantNVki20Z8VariantNZS3std7variant18__T8VariantNVki20Z8VariantN",
						"endchar": 2,
						"char": 10,
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "S3std7variant18__T8VariantNVki20Z8VariantN",
								"storageClass": [
									"lazy"
								],
								"name": "defaultVal"
							}
						],
						"name": "get",
						"originalType": "Variant(string id, string name, lazy Variant defaultVal)",
						"endline": 291,
						"overrides": [
							"vibe.http.session.SessionStore.get"
						]
					},
					{
						"kind": "function",
						"line": 293,
						"deco": "FAyaAyaZb",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "Aya",
								"name": "key"
							}
						],
						"name": "isKeySet",
						"endline": 296,
						"overrides": [
							"vibe.http.session.SessionStore.isKeySet"
						]
					},
					{
						"kind": "function",
						"line": 298,
						"deco": "FAyaZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							}
						],
						"name": "destroy",
						"endline": 301,
						"overrides": [
							"vibe.http.session.SessionStore.destroy"
						]
					},
					{
						"kind": "function",
						"line": 303,
						"deco": "FAyaZDFDFKAyaKS3std7variant18__T8VariantNVki20Z8VariantNZiZi",
						"endchar": 2,
						"char": 64,
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							}
						],
						"name": "iterateSession",
						"originalType": "int delegate(int delegate(ref string key, ref Variant value))(string id)",
						"endline": 314,
						"overrides": [
							"vibe.http.session.SessionStore.iterateSession"
						]
					},
					{
						"kind": "function",
						"line": 316,
						"deco": "FAyaMDFAyaZiZi",
						"endchar": 2,
						"char": 6,
						"parameters": [
							{
								"deco": "Aya",
								"name": "id"
							},
							{
								"deco": "DFAyaZi",
								"storageClass": [
									"scope"
								],
								"name": "del"
							}
						],
						"name": "iterateSession",
						"endline": 323,
						"overrides": [
							"vibe.http.session.SessionStore.iterateSession"
						]
					}
				],
				"char": 7,
				"interfaces": [
					"vibe.http.session.SessionStore"
				],
				"name": "MemorySessionStore",
				"comment": "\tSession store for storing a session in local memory.\n\n\tIf the server is running as a single instance (no thread or process clustering), this kind of\n\tsession store provies the fastest and simplest way to store sessions. In any other case,\n\ta persistent session store based on a database is necessary.\n"
			}
		],
		"name": "vibe.http.session",
		"comment": "\tCookie based session support.\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger, Sönke Ludwig, Ilya Shipunov\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\http\\status.d",
		"members": [
			{
				"kind": "enum",
				"line": 13,
				"members": [
					{
						"kind": "enum member",
						"line": 14,
						"value": "100",
						"char": 2,
						"name": "continue_"
					},
					{
						"kind": "enum member",
						"line": 15,
						"value": "101",
						"char": 2,
						"name": "switchingProtocols"
					},
					{
						"kind": "enum member",
						"line": 16,
						"value": "200",
						"char": 2,
						"name": "ok"
					},
					{
						"kind": "enum member",
						"line": 17,
						"value": "201",
						"char": 2,
						"name": "created"
					},
					{
						"kind": "enum member",
						"line": 18,
						"value": "202",
						"char": 2,
						"name": "accepted"
					},
					{
						"kind": "enum member",
						"line": 19,
						"value": "203",
						"char": 2,
						"name": "nonAuthoritativeInformation"
					},
					{
						"kind": "enum member",
						"line": 20,
						"value": "204",
						"char": 2,
						"name": "noContent"
					},
					{
						"kind": "enum member",
						"line": 21,
						"value": "205",
						"char": 2,
						"name": "resetContent"
					},
					{
						"kind": "enum member",
						"line": 22,
						"value": "206",
						"char": 2,
						"name": "partialContent"
					},
					{
						"kind": "enum member",
						"line": 23,
						"value": "300",
						"char": 2,
						"name": "multipleChoices"
					},
					{
						"kind": "enum member",
						"line": 24,
						"value": "301",
						"char": 2,
						"name": "movedPermanently"
					},
					{
						"kind": "enum member",
						"line": 25,
						"value": "302",
						"char": 2,
						"name": "found"
					},
					{
						"kind": "enum member",
						"line": 26,
						"value": "303",
						"char": 2,
						"name": "seeOther"
					},
					{
						"kind": "enum member",
						"line": 27,
						"value": "304",
						"char": 2,
						"name": "notModified"
					},
					{
						"kind": "enum member",
						"line": 28,
						"value": "305",
						"char": 2,
						"name": "useProxy"
					},
					{
						"kind": "enum member",
						"line": 29,
						"value": "307",
						"char": 2,
						"name": "temporaryRedirect"
					},
					{
						"kind": "enum member",
						"line": 30,
						"value": "400",
						"char": 2,
						"name": "badRequest"
					},
					{
						"kind": "enum member",
						"line": 31,
						"value": "401",
						"char": 2,
						"name": "unauthorized"
					},
					{
						"kind": "enum member",
						"line": 32,
						"value": "402",
						"char": 2,
						"name": "paymentRequired"
					},
					{
						"kind": "enum member",
						"line": 33,
						"value": "403",
						"char": 2,
						"name": "forbidden"
					},
					{
						"kind": "enum member",
						"line": 34,
						"value": "404",
						"char": 2,
						"name": "notFound"
					},
					{
						"kind": "enum member",
						"line": 35,
						"value": "405",
						"char": 2,
						"name": "methodNotAllowed"
					},
					{
						"kind": "enum member",
						"line": 36,
						"value": "406",
						"char": 2,
						"name": "notAcceptable"
					},
					{
						"kind": "enum member",
						"line": 37,
						"value": "407",
						"char": 2,
						"name": "proxyAuthenticationRequired"
					},
					{
						"kind": "enum member",
						"line": 38,
						"value": "408",
						"char": 2,
						"name": "requestTimeout"
					},
					{
						"kind": "enum member",
						"line": 39,
						"value": "409",
						"char": 2,
						"name": "conflict"
					},
					{
						"kind": "enum member",
						"line": 40,
						"value": "410",
						"char": 2,
						"name": "gone"
					},
					{
						"kind": "enum member",
						"line": 41,
						"value": "411",
						"char": 2,
						"name": "lengthRequired"
					},
					{
						"kind": "enum member",
						"line": 42,
						"value": "412",
						"char": 2,
						"name": "preconditionFailed"
					},
					{
						"kind": "enum member",
						"line": 43,
						"value": "413",
						"char": 2,
						"name": "requestEntityTooLarge"
					},
					{
						"kind": "enum member",
						"line": 44,
						"value": "414",
						"char": 2,
						"name": "requestURITooLarge"
					},
					{
						"kind": "enum member",
						"line": 45,
						"value": "415",
						"char": 2,
						"name": "unsupportedMediaType"
					},
					{
						"kind": "enum member",
						"line": 46,
						"value": "416",
						"char": 2,
						"name": "requestedrangenotsatisfiable"
					},
					{
						"kind": "enum member",
						"line": 47,
						"value": "417",
						"char": 2,
						"name": "expectationFailed"
					},
					{
						"kind": "enum member",
						"line": 48,
						"value": "500",
						"char": 2,
						"name": "internalServerError"
					},
					{
						"kind": "enum member",
						"line": 49,
						"value": "501",
						"char": 2,
						"name": "notImplemented"
					},
					{
						"kind": "enum member",
						"line": 50,
						"value": "502",
						"char": 2,
						"name": "badGateway"
					},
					{
						"kind": "enum member",
						"line": 51,
						"value": "503",
						"char": 2,
						"name": "serviceUnavailable"
					},
					{
						"kind": "enum member",
						"line": 52,
						"value": "504",
						"char": 2,
						"name": "gatewayTimeout"
					},
					{
						"kind": "enum member",
						"line": 53,
						"value": "505",
						"char": 2,
						"name": "httpVersionNotSupported"
					},
					{
						"kind": "enum member",
						"line": 55,
						"value": "207",
						"char": 2,
						"name": "multiStatus"
					},
					{
						"kind": "enum member",
						"line": 56,
						"value": "422",
						"char": 2,
						"name": "unprocessableEntity"
					},
					{
						"kind": "enum member",
						"line": 57,
						"value": "423",
						"char": 2,
						"name": "locked"
					},
					{
						"kind": "enum member",
						"line": 58,
						"value": "424",
						"char": 2,
						"name": "failedDependency"
					},
					{
						"kind": "enum member",
						"line": 59,
						"value": "507",
						"char": 2,
						"name": "insufficientStorage"
					},
					{
						"kind": "enum member",
						"line": 61,
						"value": "100",
						"char": 2,
						"name": "Continue",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 62,
						"value": "101",
						"char": 2,
						"name": "SwitchingProtocols",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 63,
						"value": "200",
						"char": 2,
						"name": "OK",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 64,
						"value": "201",
						"char": 2,
						"name": "Created",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 65,
						"value": "202",
						"char": 2,
						"name": "Accepted",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 66,
						"value": "203",
						"char": 2,
						"name": "NonAuthoritativeInformation",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 67,
						"value": "204",
						"char": 2,
						"name": "NoContent",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 68,
						"value": "205",
						"char": 2,
						"name": "ResetContent",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 69,
						"value": "206",
						"char": 2,
						"name": "PartialContent",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 70,
						"value": "300",
						"char": 2,
						"name": "MultipleChoices",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 71,
						"value": "301",
						"char": 2,
						"name": "MovedPermanently",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 72,
						"value": "302",
						"char": 2,
						"name": "Found",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 73,
						"value": "303",
						"char": 2,
						"name": "SeeOther",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 74,
						"value": "304",
						"char": 2,
						"name": "NotModified",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 75,
						"value": "305",
						"char": 2,
						"name": "UseProxy",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 76,
						"value": "307",
						"char": 2,
						"name": "TemporaryRedirect",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 77,
						"value": "400",
						"char": 2,
						"name": "BadRequest",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 78,
						"value": "401",
						"char": 2,
						"name": "Unauthorized",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 79,
						"value": "402",
						"char": 2,
						"name": "PaymentRequired",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 80,
						"value": "403",
						"char": 2,
						"name": "Forbidden",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 81,
						"value": "404",
						"char": 2,
						"name": "NotFound",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 82,
						"value": "405",
						"char": 2,
						"name": "MethodNotAllowed",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 83,
						"value": "406",
						"char": 2,
						"name": "NotAcceptable",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 84,
						"value": "407",
						"char": 2,
						"name": "ProxyAuthenticationRequired",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 85,
						"value": "408",
						"char": 2,
						"name": "RequestTimeout",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 86,
						"value": "409",
						"char": 2,
						"name": "Conflict",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 87,
						"value": "410",
						"char": 2,
						"name": "Gone",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 88,
						"value": "411",
						"char": 2,
						"name": "LengthRequired",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 89,
						"value": "412",
						"char": 2,
						"name": "PreconditionFailed",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 90,
						"value": "413",
						"char": 2,
						"name": "RequestEntityTooLarge",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 91,
						"value": "414",
						"char": 2,
						"name": "RequestURITooLarge",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 92,
						"value": "415",
						"char": 2,
						"name": "UnsupportedMediaType",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 93,
						"value": "416",
						"char": 2,
						"name": "Requestedrangenotsatisfiable",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 94,
						"value": "417",
						"char": 2,
						"name": "ExpectationFailed",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 95,
						"value": "500",
						"char": 2,
						"name": "InternalServerError",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 96,
						"value": "501",
						"char": 2,
						"name": "NotImplemented",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 97,
						"value": "502",
						"char": 2,
						"name": "BadGateway",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 98,
						"value": "503",
						"char": 2,
						"name": "ServiceUnavailable",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 99,
						"value": "504",
						"char": 2,
						"name": "GatewayTimeout",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 100,
						"value": "505",
						"char": 2,
						"name": "HTTPVersionNotSupported",
						"comment": "deprecated\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "HTTPStatus",
				"comment": "\tDefinitions of all standard HTTP status codes.\n"
			},
			{
				"kind": "function",
				"line": 107,
				"deco": "FiZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "i",
						"name": "code"
					}
				],
				"name": "httpStatusText",
				"comment": "\tReturns a standard text description of the specified HTTP status code.\n",
				"endline": 166
			},
			{
				"kind": "function",
				"line": 171,
				"deco": "FiZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "i",
						"name": "status"
					}
				],
				"name": "justifiesConnectionClose",
				"comment": "\tDetermines if the given status code justifies closing the connection (e.g. evil big request bodies)\n",
				"endline": 179
			},
			{
				"kind": "function",
				"line": 184,
				"deco": "FE4vibe4http6status10HTTPStatusZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "E4vibe4http6status10HTTPStatus",
						"name": "status"
					}
				],
				"name": "isSuccessCode",
				"comment": "    Determines if status code is generally successful (>= 200 && < 300)\n",
				"endline": 186
			}
		],
		"name": "vibe.http.status",
		"comment": "\tList of all standard HTTP status codes.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\http\\websockets.d",
		"members": [
			{
				"kind": "alias",
				"line": 31,
				"deco": "DFMC4vibe4http10websockets9WebSocketZv",
				"char": 1,
				"name": "WebSocketHandshakeDelegate"
			},
			{
				"kind": "class",
				"line": 51,
				"base": "object.Exception",
				"members": [
					{
						"kind": "constructor",
						"line": 54,
						"deco": "FAyaAyakC6object9ThrowableZC4vibe4http10websockets18WebSocketException",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "k",
								"default": "cast(uint)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"name": "this",
						"comment": "\n",
						"originalType": "(string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"endline": 57
					},
					{
						"kind": "constructor",
						"line": 60,
						"deco": "FAyaC6object9ThrowableAyakZC4vibe4http10websockets18WebSocketException",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "C6object9Throwable",
								"name": "next"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "k",
								"default": "cast(uint)__LINE__",
								"name": "line"
							}
						],
						"name": "this",
						"comment": "\n",
						"originalType": "(string msg, Throwable next, string file = __FILE__, size_t line = __LINE__)",
						"endline": 63
					}
				],
				"char": 1,
				"name": "WebSocketException",
				"comment": "Exception thrown by $(D vibe.http.websockets).\n"
			},
			{
				"kind": "function",
				"line": 69,
				"deco": "FMDFMC4vibe4http10websockets9WebSocketZvC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "DFMC4vibe4http10websockets9WebSocketZv",
						"storageClass": [
							"scope"
						],
						"name": "on_handshake"
					},
					{
						"deco": "C4vibe4http6server17HTTPServerRequest",
						"name": "req"
					},
					{
						"deco": "C4vibe4http6server18HTTPServerResponse",
						"name": "res"
					}
				],
				"name": "handleWebSocket",
				"comment": "    Establishes a web socket conection and passes it to the $(D on_handshake) delegate.\n",
				"originalType": "void(scope WebSocketHandshakeDelegate on_handshake, HTTPServerRequest req, HTTPServerResponse res)",
				"endline": 111
			},
			{
				"kind": "function",
				"line": 116,
				"deco": "FDFMC4vibe4http10websockets9WebSocketZvZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
				"endchar": 1,
				"char": 27,
				"parameters": [
					{
						"deco": "DFMC4vibe4http10websockets9WebSocketZv",
						"name": "on_handshake"
					}
				],
				"name": "handleWebSockets",
				"comment": "\tReturns a HTTP request handler that establishes web socket conections.\n",
				"originalType": "HTTPServerRequestDelegate(WebSocketHandshakeDelegate on_handshake)",
				"endline": 123
			},
			{
				"kind": "function",
				"line": 125,
				"deco": "FPFMC4vibe4http10websockets9WebSocketZvZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
				"endchar": 1,
				"char": 27,
				"parameters": [
					{
						"deco": "PFMC4vibe4http10websockets9WebSocketZv",
						"name": "on_handshake"
					}
				],
				"name": "handleWebSockets",
				"comment": "ditto\n",
				"originalType": "HTTPServerRequestDelegate(void function(scope WebSocket) on_handshake)",
				"endline": 128
			},
			{
				"kind": "function",
				"line": 131,
				"storageClass": [
					"deprecated"
				],
				"deco": "FDFC4vibe4http10websockets9WebSocketZvZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
				"endchar": 1,
				"char": 27,
				"parameters": [
					{
						"deco": "DFC4vibe4http10websockets9WebSocketZv",
						"name": "on_handshake"
					}
				],
				"name": "handleWebSockets",
				"comment": "ditto\n",
				"originalType": "HTTPServerRequestDelegate(void delegate(WebSocket) on_handshake)",
				"endline": 180
			},
			{
				"kind": "function",
				"line": 183,
				"storageClass": [
					"deprecated"
				],
				"deco": "FPFC4vibe4http10websockets9WebSocketZvZDFC4vibe4http6server17HTTPServerRequestC4vibe4http6server18HTTPServerResponseZv",
				"endchar": 1,
				"char": 27,
				"parameters": [
					{
						"deco": "PFC4vibe4http10websockets9WebSocketZv",
						"name": "on_handshake"
					}
				],
				"name": "handleWebSockets",
				"comment": "ditto\n",
				"originalType": "HTTPServerRequestDelegate(void function(WebSocket) on_handshake)",
				"endline": 186
			},
			{
				"kind": "class",
				"line": 192,
				"members": [
					{
						"kind": "constructor",
						"line": 207,
						"deco": "FC4vibe4core6stream16ConnectionStreamxC4vibe4http6server17HTTPServerRequestZC4vibe4http10websockets9WebSocket",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream16ConnectionStream",
								"name": "conn"
							},
							{
								"deco": "xC4vibe4http6server17HTTPServerRequest",
								"name": "request"
							}
						],
						"name": "this",
						"originalType": "(ConnectionStream conn, in HTTPServerRequest request)",
						"endline": 220
					},
					{
						"kind": "function",
						"line": 231,
						"deco": "FNdZb",
						"endchar": 77,
						"char": 17,
						"name": "connected",
						"comment": "\t\tDetermines if the WebSocket connection is still alive and ready for sending.\n\n\t\tNote that for determining the ready state for $(EM reading), you need\n\t\tto use $(D waitForData) instead, because both methods can return\n\t\tdifferent values while a disconnect is in proress.\n\n\t\tSee_also: $(D waitForData)\n",
						"endline": 231
					},
					{
						"kind": "function",
						"line": 236,
						"deco": "xFNdZxC4vibe4http6server17HTTPServerRequest",
						"endchar": 73,
						"char": 37,
						"name": "request",
						"comment": "\t\tThe HTTP request that established the web socket connection.\n",
						"endline": 236
					},
					{
						"kind": "function",
						"line": 241,
						"deco": "FNdZb",
						"endchar": 104,
						"char": 17,
						"name": "dataAvailableForRead",
						"comment": "\t\tChecks if data is readily available for read.\n",
						"endline": 241
					},
					{
						"kind": "function",
						"line": 247,
						"deco": "FZb",
						"endchar": 2,
						"char": 7,
						"name": "waitForData",
						"comment": " Waits until either a message arrives or until the connection is closed.\n\n\t\tThis function can be used in a read loop to cleanly determine when to stop reading.\n",
						"endline": 256
					},
					{
						"kind": "function",
						"line": 259,
						"deco": "FS4core4time8DurationZb",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							}
						],
						"name": "waitForData",
						"comment": "ditto\n",
						"endline": 274
					},
					{
						"kind": "function",
						"line": 282,
						"deco": "FAyaZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "data"
							}
						],
						"name": "send",
						"comment": "\t\tSends a text message.\n\n\t\tOn the JavaScript side, the text will be available as message.data (type string).\n\t\tThrows: WebSocketException if the connection is closed.\n",
						"endline": 285
					},
					{
						"kind": "function",
						"line": 293,
						"deco": "FAhZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Ah",
								"name": "data"
							}
						],
						"name": "send",
						"comment": "\t\tSends a binary message.\n\n\t\tOn the JavaScript side, the text will be available as message.data (type Blob).\n\t\tThrows: WebSocketException if the connection is closed.\n",
						"endline": 296
					},
					{
						"kind": "function",
						"line": 302,
						"deco": "FMDFMC4vibe4http10websockets24OutgoingWebSocketMessageZvE4vibe4http10websockets11FrameOpcodeZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "DFMC4vibe4http10websockets24OutgoingWebSocketMessageZv",
								"storageClass": [
									"scope"
								],
								"name": "sender"
							},
							{
								"deco": "E4vibe4http10websockets11FrameOpcode",
								"default": "cast(FrameOpcode)1",
								"name": "frameOpcode"
							}
						],
						"name": "send",
						"comment": "\t\tSends a message using an output stream.\n\t\tThrows: WebSocketException if the connection is closed.\n",
						"originalType": "void(scope void delegate(scope OutgoingWebSocketMessage) sender, FrameOpcode frameOpcode = FrameOpcode.text)",
						"endline": 310
					},
					{
						"kind": "function",
						"line": 315,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "close",
						"comment": "\t\tActively closes the connection.\n",
						"endline": 328
					},
					{
						"kind": "function",
						"line": 338,
						"deco": "FbZAh",
						"endchar": 2,
						"char": 10,
						"parameters": [
							{
								"deco": "b",
								"default": "true",
								"name": "strict"
							}
						],
						"name": "receiveBinary",
						"comment": "\t\tReceives a new message and returns its contents as a newly allocated data array.\n\n\t\tParams:\n\t\t\tstrict = If set, ensures the exact frame type (text/binary) is received and throws an execption otherwise.\n\t\tThrows: WebSocketException if the connection is closed or\n\t\t\tif $(D strict == true) and the frame received is not the right type\n",
						"endline": 347
					},
					{
						"kind": "function",
						"line": 349,
						"deco": "FbZAya",
						"endchar": 2,
						"char": 9,
						"parameters": [
							{
								"deco": "b",
								"default": "true",
								"name": "strict"
							}
						],
						"name": "receiveText",
						"comment": "ditto\n",
						"endline": 358
					},
					{
						"kind": "function",
						"line": 364,
						"deco": "FMDFMC4vibe4http10websockets24IncomingWebSocketMessageZvZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "DFMC4vibe4http10websockets24IncomingWebSocketMessageZv",
								"storageClass": [
									"scope"
								],
								"name": "receiver"
							}
						],
						"name": "receive",
						"comment": "\t\tReceives a new message using an InputStream.\n\t\tThrows: WebSocketException if the connection is closed.\n",
						"endline": 375
					},
					{
						"kind": "destructor",
						"line": 192,
						"deco": "FZv",
						"char": 7,
						"name": "~this"
					}
				],
				"char": 7,
				"name": "WebSocket",
				"comment": "\tRepresents a single _WebSocket connection.\n"
			},
			{
				"kind": "class",
				"line": 443,
				"members": [
					{
						"kind": "constructor",
						"line": 451,
						"deco": "FC4vibe4core6stream6StreamE4vibe4http10websockets11FrameOpcodeZC4vibe4http10websockets24OutgoingWebSocketMessage",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream6Stream",
								"name": "conn"
							},
							{
								"deco": "E4vibe4http10websockets11FrameOpcode",
								"name": "frameOpcode"
							}
						],
						"name": "this",
						"originalType": "(Stream conn, FrameOpcode frameOpcode)",
						"endline": 456
					},
					{
						"kind": "function",
						"line": 458,
						"deco": "FxAhZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							}
						],
						"name": "write",
						"originalType": "void(in ubyte[] bytes)",
						"endline": 462,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					},
					{
						"kind": "function",
						"line": 464,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "flush",
						"endline": 474,
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						]
					},
					{
						"kind": "function",
						"line": 476,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "finalize",
						"endline": 488,
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						]
					},
					{
						"kind": "function",
						"line": 490,
						"deco": "FC4vibe4core6stream11InputStreammZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "nbytes"
							}
						],
						"name": "write",
						"originalType": "void(InputStream stream, ulong nbytes = 0)",
						"endline": 493,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					}
				],
				"char": 7,
				"interfaces": [
					"vibe.core.stream.OutputStream"
				],
				"name": "OutgoingWebSocketMessage",
				"comment": "\tRepresents a single outgoing _WebSocket message as an OutputStream.\n"
			},
			{
				"kind": "class",
				"line": 501,
				"members": [
					{
						"kind": "constructor",
						"line": 507,
						"deco": "FC4vibe4core6stream6StreamZC4vibe4http10websockets24IncomingWebSocketMessage",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream6Stream",
								"name": "conn"
							}
						],
						"name": "this",
						"originalType": "(Stream conn)",
						"endline": 512
					},
					{
						"kind": "function",
						"line": 514,
						"deco": "xFNdZb",
						"endchar": 76,
						"char": 17,
						"name": "empty",
						"endline": 514,
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						]
					},
					{
						"kind": "function",
						"line": 516,
						"deco": "xFNdZm",
						"endchar": 76,
						"char": 18,
						"name": "leastSize",
						"endline": 516,
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						]
					},
					{
						"kind": "function",
						"line": 518,
						"deco": "FNdZb",
						"endchar": 55,
						"char": 17,
						"name": "dataAvailableForRead",
						"endline": 518,
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						]
					},
					{
						"kind": "function",
						"line": 521,
						"deco": "xFNdZE4vibe4http10websockets11FrameOpcode",
						"endchar": 76,
						"char": 24,
						"name": "frameOpcode",
						"comment": "The frame type for this nessage;\n",
						"endline": 521
					},
					{
						"kind": "function",
						"line": 523,
						"deco": "FZAxh",
						"endchar": 57,
						"char": 17,
						"name": "peek",
						"endline": 523,
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						]
					},
					{
						"kind": "function",
						"line": 525,
						"deco": "FAhZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Ah",
								"name": "dst"
							}
						],
						"name": "read",
						"endline": 539,
						"overrides": [
							"vibe.core.stream.InputStream.read"
						]
					}
				],
				"char": 7,
				"interfaces": [
					"vibe.core.stream.InputStream"
				],
				"name": "IncomingWebSocketMessage",
				"comment": "\tRepresents a single incoming _WebSocket message as an InputStream.\n"
			},
			{
				"kind": "enum",
				"line": 571,
				"members": [
					{
						"kind": "enum member",
						"line": 572,
						"value": "0",
						"char": 2,
						"name": "continuation"
					},
					{
						"kind": "enum member",
						"line": 573,
						"value": "1",
						"char": 2,
						"name": "text"
					},
					{
						"kind": "enum member",
						"line": 574,
						"value": "2",
						"char": 2,
						"name": "binary"
					},
					{
						"kind": "enum member",
						"line": 575,
						"value": "8",
						"char": 2,
						"name": "close"
					},
					{
						"kind": "enum member",
						"line": 576,
						"value": "9",
						"char": 2,
						"name": "ping"
					},
					{
						"kind": "enum member",
						"line": 577,
						"value": "10",
						"char": 2,
						"name": "pong"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "FrameOpcode"
			},
			{
				"kind": "struct",
				"line": 581,
				"members": [
					{
						"kind": "variable",
						"line": 582,
						"deco": "b",
						"char": 7,
						"name": "fin",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 583,
						"deco": "E4vibe4http10websockets11FrameOpcode",
						"char": 14,
						"name": "opcode",
						"offset": 4
					},
					{
						"kind": "variable",
						"line": 584,
						"deco": "Ah",
						"char": 10,
						"name": "payload",
						"offset": 8
					},
					{
						"kind": "function",
						"line": 587,
						"deco": "FC4vibe4core6stream12OutputStreamZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4core6stream12OutputStream",
								"name": "stream"
							}
						],
						"name": "writeFrame",
						"endline": 609
					},
					{
						"kind": "function",
						"line": 611,
						"storageClass": [
							"static"
						],
						"deco": "FC4vibe4core6stream11InputStreamZS4vibe4http10websockets5Frame",
						"endchar": 2,
						"char": 15,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							}
						],
						"name": "readFrame",
						"endline": 648
					}
				],
				"char": 1,
				"name": "Frame"
			}
		],
		"name": "vibe.http.websockets",
		"comment": "\tImplements WebSocket support and fallbacks for older browsers.\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger\nExample:\n\n---\nvoid handleConn(scope WebSocket sock)\n{\n\t// simple echo server\n\twhile (sock.connected) {\n\t\tauto msg = sock.receiveText();\n\t\tsock.send(msg);\n\t}\n}\n\nvoid startServer()\n{\n\timport vibe.http.router;\n\tauto router = new URLRouter;\n\trouter.get(\"/ws\", handleWebSockets(&handleConn));\n\n\t// Start HTTP server using listenHTTP()...\n}\n\n---\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\inet\\message.d",
		"members": [
			{
				"kind": "function",
				"line": 35,
				"deco": "FC4vibe4core6stream11InputStreamKS4vibe5utils14dictionarylist33__T14DictionaryListTAyaVbi0Vki32Z14DictionaryListkC4vibe5utils6memory9AllocatorbZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "C4vibe4core6stream11InputStream",
						"name": "input"
					},
					{
						"deco": "S4vibe5utils14dictionarylist33__T14DictionaryListTAyaVbi0Vki32Z14DictionaryList",
						"storageClass": [
							"ref"
						],
						"name": "dst"
					},
					{
						"deco": "k",
						"default": "1000u",
						"name": "max_line_length"
					},
					{
						"deco": "C4vibe5utils6memory9Allocator",
						"default": "defaultAllocator()",
						"name": "alloc"
					},
					{
						"deco": "b",
						"default": "true",
						"name": "rfc822_compatible"
					}
				],
				"name": "parseRFC5322Header",
				"comment": "\tParses an internet header according to RFC5322 (with RFC822 compatibility).\n\n\tParams:\n\t\tinput = Input stream from which the header is parsed\n\t\tdst = Destination map to write into\n\t\tmax_line_length = The maximum allowed length of a single line\n\t\talloc = Custom allocator to use for allocating strings\n\t\trfc822_compatible = Flag indicating that duplicate fields should be merged using a comma\n",
				"originalType": "void(InputStream input, ref InetHeaderMap dst, size_t max_line_length = 1000, Allocator alloc = defaultAllocator(), bool rfc822_compatible = true)",
				"endline": 64
			},
			{
				"kind": "template",
				"line": 72,
				"members": [
					{
						"kind": "function",
						"line": 72,
						"endchar": 1,
						"char": 6,
						"type": "void(ref R dst, SysTime time)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "dst"
							},
							{
								"type": "SysTime",
								"name": "time"
							}
						],
						"name": "writeRFC822DateString",
						"endline": 82
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "\tWrites an RFC-822/5322 date string to the given output range.\n",
				"name": "writeRFC822DateString"
			},
			{
				"kind": "template",
				"line": 87,
				"members": [
					{
						"kind": "function",
						"line": 87,
						"endchar": 1,
						"char": 6,
						"type": "void(ref R dst, SysTime time)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "dst"
							},
							{
								"type": "SysTime",
								"name": "time"
							}
						],
						"name": "writeRFC822TimeString",
						"endline": 104
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "\tWrites an RFC-822 time string to the given output range.\n",
				"name": "writeRFC822TimeString"
			},
			{
				"kind": "template",
				"line": 109,
				"members": [
					{
						"kind": "function",
						"line": 109,
						"endchar": 1,
						"char": 6,
						"type": "void(ref R dst, SysTime time)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "dst"
							},
							{
								"type": "SysTime",
								"name": "time"
							}
						],
						"name": "writeRFC822DateTimeString",
						"endline": 114
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "\tWrites an RFC-822 date+time string to the given output range.\n",
				"name": "writeRFC822DateTimeString"
			},
			{
				"kind": "function",
				"line": 119,
				"deco": "FS3std8datetime7SysTimeZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "S3std8datetime7SysTime",
						"name": "time"
					}
				],
				"name": "toRFC822TimeString",
				"comment": "\tReturns the RFC-822 time string representation of the given time.\n",
				"endline": 124
			},
			{
				"kind": "function",
				"line": 129,
				"deco": "FS3std8datetime7SysTimeZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "S3std8datetime7SysTime",
						"name": "time"
					}
				],
				"name": "toRFC822DateString",
				"comment": "\tReturns the RFC-822/5322 date string representation of the given time.\n",
				"endline": 134
			},
			{
				"kind": "function",
				"line": 139,
				"deco": "FS3std8datetime7SysTimeZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "S3std8datetime7SysTime",
						"name": "time"
					}
				],
				"name": "toRFC822DateTimeString",
				"comment": "\tReturns the RFC-822 date+time string representation of the given time.\n",
				"endline": 144
			},
			{
				"kind": "alias",
				"line": 149,
				"char": 2,
				"name": "parseRFC822DateTimeString",
				"comment": "Parses a date+time string according to RFC-822/5322.\n"
			},
			{
				"kind": "template",
				"line": 217,
				"members": [
					{
						"kind": "function",
						"line": 217,
						"endchar": 1,
						"char": 8,
						"type": "string(string encoded)",
						"parameters": [
							{
								"type": "string",
								"name": "encoded"
							}
						],
						"name": "decodeEncodedWords",
						"endline": 223
					}
				],
				"char": 8,
				"parameters": [],
				"comment": "\tDecodes a string in encoded-word form.\n\n\tSee_Also: $(LINK http://tools.ietf.org/html/rfc2047#section-2)\n",
				"name": "decodeEncodedWords"
			},
			{
				"kind": "template",
				"line": 225,
				"members": [
					{
						"kind": "function",
						"line": 225,
						"endchar": 1,
						"char": 6,
						"type": "void(ref R dst, string encoded)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "dst"
							},
							{
								"type": "string",
								"name": "encoded"
							}
						],
						"name": "decodeEncodedWords",
						"endline": 265
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "ditto\n",
				"name": "decodeEncodedWords"
			},
			{
				"kind": "function",
				"line": 271,
				"deco": "FAyaJAyaJAyaZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "header"
					},
					{
						"deco": "Aya",
						"storageClass": [
							"out"
						],
						"name": "name"
					},
					{
						"deco": "Aya",
						"storageClass": [
							"out"
						],
						"name": "address"
					}
				],
				"name": "decodeEmailAddressHeader",
				"comment": "\tDecodes a From/To header value as it appears in emails.\n",
				"endline": 295
			},
			{
				"kind": "function",
				"line": 304,
				"deco": "FxAhAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "xAh",
						"name": "message_body"
					},
					{
						"deco": "Aya",
						"name": "content_transfer_encoding"
					}
				],
				"name": "decodeMessage",
				"comment": "\tDecodes a message body according to the specified content transfer\n\tencoding (\"Content-Transfer-Encoding\" header).\n\n\tThe result is returned as a UTF-8 string.\n",
				"originalType": "string(in ubyte[] message_body, string content_transfer_encoding)",
				"endline": 333
			},
			{
				"kind": "alias",
				"line": 347,
				"char": 1,
				"name": "InetHeaderMap",
				"comment": "\tBehaves similar to string[string] but case does not matter for the key, the insertion order is not\n\tchanged and multiple values per key are supported.\n\n\tThis kind of map is used for MIME headers (e.g. for HTTP), where the case of the key strings\n\tdoes not matter. Note that the map can contain fields with the same key multiple times if\n\taddField is used for insertion. Insertion order is preserved.\n\n\tNote that despite case not being relevant for matching keyse, iterating over the map will yield\n\tthe original case of the key that was put in.\n"
			},
			{
				"kind": "struct",
				"line": 354,
				"members": [
					{
						"kind": "function",
						"line": 355,
						"storageClass": [
							"static"
						],
						"deco": "FxAabZAh",
						"endchar": 2,
						"char": 17,
						"parameters": [
							{
								"deco": "xAa",
								"name": "input"
							},
							{
								"deco": "b",
								"default": "false",
								"name": "in_header"
							}
						],
						"name": "decode",
						"originalType": "ubyte[](in char[] input, bool in_header = false)",
						"endline": 368
					}
				],
				"char": 1,
				"name": "QuotedPrintable",
				"comment": "\tPerforms quoted-printable decoding.\n"
			}
		],
		"name": "vibe.inet.message",
		"comment": "\tInternet message handling according to RFC822/RFC5322\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\inet\\mimetypes.d",
		"members": [
			{
				"kind": "function",
				"line": 19,
				"deco": "FAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "filename"
					}
				],
				"name": "getMimeTypeForFile",
				"comment": "\tReturns the standard mime type for the extension of the specified file name.\n\n\tAny unknown file extension will map to \"application/octet-stream\".\n",
				"endline": 732
			},
			{
				"kind": "function",
				"line": 740,
				"deco": "FAyaZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "mimetype"
					}
				],
				"name": "isCompressedFormat",
				"comment": "\tReturns true for a selected but incomplete list of mime-types that are describing a compressed\n\tformat.\n\n\tThis function is useful for avoiding redundant compression.\n",
				"endline": 750
			}
		],
		"name": "vibe.inet.mimetypes",
		"comment": "\tMaps file name extensions to standard mime types.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\inet\\path.d",
		"members": [
			{
				"kind": "struct",
				"line": 24,
				"members": [
					{
						"kind": "constructor",
						"line": 32,
						"deco": "FNcAyaZS4vibe4inet4path4Path",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"name": "pathstr"
							}
						],
						"name": "this",
						"comment": "Constructs a Path object by parsing a path string.\n",
						"originalType": "ref (string pathstr)",
						"endline": 37
					},
					{
						"kind": "constructor",
						"line": 40,
						"deco": "FNcAyS4vibe4inet4path9PathEntrybZS4vibe4inet4path4Path",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "AyS4vibe4inet4path9PathEntry",
								"name": "nodes"
							},
							{
								"deco": "b",
								"name": "absolute"
							}
						],
						"name": "this",
						"comment": "Constructs a path object from a list of PathEntry objects.\n",
						"originalType": "ref (immutable(PathEntry)[] nodes, bool absolute)",
						"endline": 44
					},
					{
						"kind": "constructor",
						"line": 47,
						"deco": "FNcS4vibe4inet4path9PathEntryZS4vibe4inet4path4Path",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "S4vibe4inet4path9PathEntry",
								"name": "entry"
							}
						],
						"name": "this",
						"comment": "Constructs a relative path with one path entry.\n",
						"originalType": "ref (PathEntry entry)",
						"endline": 50
					},
					{
						"kind": "function",
						"line": 53,
						"deco": "xFNdZb",
						"endchar": 55,
						"char": 17,
						"name": "absolute",
						"comment": "Determines if the path is absolute.\n",
						"endline": 53
					},
					{
						"kind": "function",
						"line": 56,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "normalize",
						"comment": "Resolves all '.' and '..' path entries as far as possible.\n",
						"endline": 73
					},
					{
						"kind": "function",
						"line": 76,
						"deco": "xFZAya",
						"endchar": 2,
						"char": 9,
						"name": "toString",
						"comment": "Converts the Path back to a string representation using slashes.\n",
						"endline": 94
					},
					{
						"kind": "function",
						"line": 97,
						"deco": "xFNbZAya",
						"endchar": 2,
						"char": 9,
						"name": "toNativeString",
						"comment": "Converts the Path object to a native path string (backslash as path separator on Windows).\n",
						"endline": 117
					},
					{
						"kind": "function",
						"line": 120,
						"deco": "xFxS4vibe4inet4path4PathZb",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xS4vibe4inet4path4Path",
								"name": "rhs"
							}
						],
						"name": "startsWith",
						"comment": "Tests if `rhs` is an anchestor or the same as this path.\n",
						"originalType": "const bool(const Path rhs)",
						"endline": 126
					},
					{
						"kind": "function",
						"line": 129,
						"deco": "xFxS4vibe4inet4path4PathZS4vibe4inet4path4Path",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xS4vibe4inet4path4Path",
								"name": "parentPath"
							}
						],
						"name": "relativeTo",
						"comment": "Computes the relative path from `parentPath` to this path.\n",
						"originalType": "const Path(const Path parentPath)",
						"endline": 150
					},
					{
						"kind": "function",
						"line": 153,
						"deco": "xFNcNdZyS4vibe4inet4path9PathEntry",
						"endchar": 102,
						"char": 37,
						"name": "head",
						"comment": "The last entry of the path\n",
						"endline": 153
					},
					{
						"kind": "function",
						"line": 156,
						"deco": "xFNdZS4vibe4inet4path4Path",
						"endchar": 66,
						"char": 17,
						"name": "parentPath",
						"comment": "The parent path\n",
						"endline": 156
					},
					{
						"kind": "function",
						"line": 159,
						"deco": "xFNdZAyS4vibe4inet4path9PathEntry",
						"endchar": 67,
						"char": 35,
						"name": "nodes",
						"comment": "The ist of path entries of which this path is composed\n",
						"endline": 159
					},
					{
						"kind": "function",
						"line": 162,
						"deco": "xFNdZk",
						"endchar": 59,
						"char": 19,
						"name": "length",
						"comment": "The number of path entries of which this path is composed\n",
						"originalType": "const @property size_t()",
						"endline": 162
					},
					{
						"kind": "function",
						"line": 165,
						"deco": "xFNdZb",
						"endchar": 61,
						"char": 17,
						"name": "empty",
						"comment": "True if the path contains no entries\n",
						"endline": 165
					},
					{
						"kind": "function",
						"line": 168,
						"deco": "xFNdZb",
						"endchar": 65,
						"char": 17,
						"name": "endsWithSlash",
						"comment": "Determines if the path ends with a slash (i.e. is a directory)\n",
						"endline": 168
					},
					{
						"kind": "function",
						"line": 170,
						"deco": "FNdbZv",
						"endchar": 62,
						"char": 17,
						"parameters": [
							{
								"deco": "b",
								"name": "v"
							}
						],
						"name": "endsWithSlash",
						"comment": "ditto\n",
						"endline": 170
					},
					{
						"kind": "function",
						"line": 173,
						"deco": "xFNdZb",
						"endchar": 107,
						"char": 17,
						"name": "external",
						"comment": "Determines if this path goes outside of its base path (i.e. begins with '..').\n",
						"endline": 173
					},
					{
						"kind": "function",
						"line": 175,
						"deco": "xFNckZyS4vibe4inet4path9PathEntry",
						"endchar": 76,
						"char": 27,
						"parameters": [
							{
								"deco": "k",
								"name": "idx"
							}
						],
						"name": "opIndex",
						"originalType": "const ref immutable(PathEntry)(size_t idx)",
						"endline": 175
					},
					{
						"kind": "function",
						"line": 176,
						"deco": "xFkkZS4vibe4inet4path4Path",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "k",
								"name": "start"
							},
							{
								"deco": "k",
								"name": "end"
							}
						],
						"name": "opSlice",
						"originalType": "const Path(size_t start, size_t end)",
						"endline": 180
					},
					{
						"kind": "template",
						"line": 181,
						"constraint": "dim == 0",
						"members": [
							{
								"kind": "function",
								"line": 181,
								"endchar": 73,
								"char": 9,
								"type": "const size_t()",
								"name": "opDollar",
								"endline": 181
							}
						],
						"char": 9,
						"parameters": [
							{
								"kind": "value",
								"deco": "i",
								"name": "dim"
							}
						],
						"name": "opDollar"
					},
					{
						"kind": "template",
						"line": 184,
						"constraint": "OP == \"~\"",
						"members": [
							{
								"kind": "function",
								"line": 184,
								"endchar": 2,
								"char": 7,
								"type": "const Path(const Path rhs)",
								"parameters": [
									{
										"storageClass": [
											"const"
										],
										"type": "Path",
										"name": "rhs"
									}
								],
								"name": "opBinary",
								"endline": 208
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "OP"
							}
						],
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 210,
						"constraint": "OP == \"~\"",
						"members": [
							{
								"kind": "function",
								"line": 210,
								"endchar": 95,
								"char": 7,
								"type": "const Path(string rhs)",
								"parameters": [
									{
										"type": "string",
										"name": "rhs"
									}
								],
								"name": "opBinary",
								"endline": 210
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "OP"
							}
						],
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 211,
						"constraint": "OP == \"~\"",
						"members": [
							{
								"kind": "function",
								"line": 211,
								"endchar": 98,
								"char": 7,
								"type": "const Path(PathEntry rhs)",
								"parameters": [
									{
										"type": "PathEntry",
										"name": "rhs"
									}
								],
								"name": "opBinary",
								"endline": 211
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "OP"
							}
						],
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 212,
						"constraint": "OP == \"~\"",
						"members": [
							{
								"kind": "function",
								"line": 212,
								"endchar": 86,
								"char": 7,
								"type": "void(string rhs)",
								"parameters": [
									{
										"type": "string",
										"name": "rhs"
									}
								],
								"name": "opOpAssign",
								"endline": 212
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "OP"
							}
						],
						"name": "opOpAssign"
					},
					{
						"kind": "template",
						"line": 213,
						"constraint": "OP == \"~\"",
						"members": [
							{
								"kind": "function",
								"line": 213,
								"endchar": 89,
								"char": 7,
								"type": "void(PathEntry rhs)",
								"parameters": [
									{
										"type": "PathEntry",
										"name": "rhs"
									}
								],
								"name": "opOpAssign",
								"endline": 213
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "OP"
							}
						],
						"name": "opOpAssign"
					},
					{
						"kind": "template",
						"line": 214,
						"constraint": "OP == \"~\"",
						"members": [
							{
								"kind": "function",
								"line": 214,
								"endchar": 109,
								"char": 7,
								"type": "void(immutable(PathEntry)[] rhs)",
								"parameters": [
									{
										"type": "immutable(PathEntry)[]",
										"name": "rhs"
									}
								],
								"name": "opOpAssign",
								"endline": 214
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "OP"
							}
						],
						"name": "opOpAssign"
					},
					{
						"kind": "template",
						"line": 215,
						"constraint": "OP == \"~\"",
						"members": [
							{
								"kind": "function",
								"line": 215,
								"endchar": 2,
								"char": 7,
								"type": "void(Path rhs)",
								"parameters": [
									{
										"type": "Path",
										"name": "rhs"
									}
								],
								"name": "opOpAssign",
								"endline": 222
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "OP"
							}
						],
						"name": "opOpAssign"
					},
					{
						"kind": "function",
						"line": 225,
						"deco": "xFKxS4vibe4inet4path4PathZb",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xS4vibe4inet4path4Path",
								"storageClass": [
									"ref"
								],
								"name": "rhs"
							}
						],
						"name": "opEquals",
						"comment": "Tests two paths for equality using '=='.\n",
						"originalType": "const bool(ref const Path rhs)",
						"endline": 233
					},
					{
						"kind": "function",
						"line": 235,
						"deco": "xFxS4vibe4inet4path4PathZb",
						"endchar": 66,
						"char": 7,
						"parameters": [
							{
								"deco": "xS4vibe4inet4path4Path",
								"name": "other"
							}
						],
						"name": "opEquals",
						"comment": "ditto\n",
						"originalType": "const bool(const Path other)",
						"endline": 235
					},
					{
						"kind": "function",
						"line": 237,
						"deco": "xFKxS4vibe4inet4path4PathZi",
						"endchar": 2,
						"char": 6,
						"parameters": [
							{
								"deco": "xS4vibe4inet4path4Path",
								"storageClass": [
									"ref"
								],
								"name": "rhs"
							}
						],
						"name": "opCmp",
						"originalType": "const int(ref const Path rhs)",
						"endline": 245
					},
					{
						"kind": "function",
						"line": 247,
						"deco": "xFNbNeZk",
						"endchar": 2,
						"char": 9,
						"name": "toHash",
						"originalType": "const nothrow @trusted hash_t()",
						"endline": 256
					}
				],
				"char": 1,
				"name": "Path",
				"comment": "\tRepresents an absolute or relative file system path.\n\n\tThis struct allows to do safe operations on paths, such as concatenation and sub paths. Checks\n\tare done to disallow invalid operations such as concatenating two absolute paths. It also\n\tvalidates path strings and allows for easy checking of malicious relative paths.\n"
			},
			{
				"kind": "struct",
				"line": 358,
				"members": [
					{
						"kind": "constructor",
						"line": 363,
						"deco": "FNcAyaZS4vibe4inet4path9PathEntry",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"name": "str"
							}
						],
						"name": "this",
						"originalType": "ref (string str)",
						"endline": 367
					},
					{
						"kind": "function",
						"line": 369,
						"deco": "xFNbZAya",
						"endchar": 51,
						"char": 9,
						"name": "toString",
						"endline": 369
					},
					{
						"kind": "template",
						"line": 371,
						"constraint": "OP == \"~\"",
						"members": [
							{
								"kind": "function",
								"line": 371,
								"endchar": 114,
								"char": 7,
								"type": "const Path(PathEntry rhs)",
								"parameters": [
									{
										"type": "PathEntry",
										"name": "rhs"
									}
								],
								"name": "opBinary",
								"endline": 371
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "OP"
							}
						],
						"name": "opBinary"
					},
					{
						"kind": "function",
						"line": 373,
						"deco": "xFKxS4vibe4inet4path9PathEntryZb",
						"endchar": 78,
						"char": 7,
						"parameters": [
							{
								"deco": "xS4vibe4inet4path9PathEntry",
								"storageClass": [
									"ref"
								],
								"name": "rhs"
							}
						],
						"name": "opEquals",
						"originalType": "const bool(ref const PathEntry rhs)",
						"endline": 373
					},
					{
						"kind": "function",
						"line": 374,
						"deco": "xFS4vibe4inet4path9PathEntryZb",
						"endchar": 68,
						"char": 7,
						"parameters": [
							{
								"deco": "S4vibe4inet4path9PathEntry",
								"name": "rhs"
							}
						],
						"name": "opEquals",
						"endline": 374
					},
					{
						"kind": "function",
						"line": 375,
						"deco": "xFAyaZb",
						"endchar": 58,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "rhs"
							}
						],
						"name": "opEquals",
						"endline": 375
					},
					{
						"kind": "function",
						"line": 376,
						"deco": "xFKxS4vibe4inet4path9PathEntryZi",
						"endchar": 76,
						"char": 6,
						"parameters": [
							{
								"deco": "xS4vibe4inet4path9PathEntry",
								"storageClass": [
									"ref"
								],
								"name": "rhs"
							}
						],
						"name": "opCmp",
						"originalType": "const int(ref const PathEntry rhs)",
						"endline": 376
					},
					{
						"kind": "function",
						"line": 377,
						"deco": "xFAyaZi",
						"endchar": 56,
						"char": 6,
						"parameters": [
							{
								"deco": "Aya",
								"name": "rhs"
							}
						],
						"name": "opCmp",
						"endline": 377
					}
				],
				"char": 1,
				"name": "PathEntry"
			},
			{
				"kind": "function",
				"line": 388,
				"deco": "FAyaAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "basepath"
					},
					{
						"deco": "Aya",
						"name": "subpath"
					}
				],
				"name": "joinPath",
				"comment": "Joins two path strings. subpath must be relative.\n",
				"endline": 393
			},
			{
				"kind": "function",
				"line": 396,
				"deco": "FAyaZAS4vibe4inet4path9PathEntry",
				"endchar": 1,
				"char": 13,
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					}
				],
				"name": "splitPath",
				"comment": "Splits up a path string into its elements/folders\n",
				"endline": 436
			}
		],
		"name": "vibe.inet.path",
		"comment": "\tContains routines for high level path handling.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\inet\\url.d",
		"members": [
			{
				"kind": "import",
				"line": 10,
				"char": 15,
				"name": "vibe.inet.path"
			},
			{
				"kind": "struct",
				"line": 24,
				"members": [
					{
						"kind": "constructor",
						"line": 37,
						"deco": "FNcAyaAyatS4vibe4inet4path4PathZS4vibe4inet3url3URL",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"name": "schema"
							},
							{
								"deco": "Aya",
								"name": "host"
							},
							{
								"deco": "t",
								"name": "port"
							},
							{
								"deco": "S4vibe4inet4path4Path",
								"name": "path"
							}
						],
						"name": "this",
						"comment": "Constructs a new URL object from its components.\n",
						"originalType": "ref (string schema, string host, ushort port, Path path)",
						"endline": 43
					},
					{
						"kind": "constructor",
						"line": 45,
						"deco": "FNcAyaS4vibe4inet4path4PathZS4vibe4inet3url3URL",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"name": "schema"
							},
							{
								"deco": "S4vibe4inet4path4Path",
								"name": "path"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "ref (string schema, Path path)",
						"endline": 48
					},
					{
						"kind": "constructor",
						"line": 54,
						"deco": "FNcAyaZS4vibe4inet3url3URL",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_string"
							}
						],
						"name": "this",
						"comment": " Constructs a URL from its string representation.\n\n\t\tTODO: additional validation required (e.g. valid host and user names and port)\n",
						"originalType": "ref (string url_string)",
						"endline": 107
					},
					{
						"kind": "function",
						"line": 109,
						"storageClass": [
							"static"
						],
						"deco": "FAyaZS4vibe4inet3url3URL",
						"endchar": 2,
						"char": 13,
						"parameters": [
							{
								"deco": "Aya",
								"name": "url_string"
							}
						],
						"name": "parse",
						"comment": "ditto\n",
						"endline": 112
					},
					{
						"kind": "function",
						"line": 115,
						"deco": "xFNdZAya",
						"endchar": 53,
						"char": 19,
						"name": "schema",
						"comment": "The schema/protocol part of the URL\n",
						"endline": 115
					},
					{
						"kind": "function",
						"line": 117,
						"deco": "FNdAyaZv",
						"endchar": 50,
						"char": 17,
						"parameters": [
							{
								"deco": "Aya",
								"name": "v"
							}
						],
						"name": "schema",
						"comment": "ditto\n",
						"endline": 117
					},
					{
						"kind": "function",
						"line": 120,
						"deco": "xFNdZAya",
						"endchar": 61,
						"char": 19,
						"name": "pathString",
						"comment": "The path part of the URL in the original string form\n",
						"endline": 120
					},
					{
						"kind": "function",
						"line": 123,
						"deco": "xFNdZS4vibe4inet4path4Path",
						"endchar": 70,
						"char": 17,
						"name": "path",
						"comment": "The path part of the URL\n",
						"endline": 123
					},
					{
						"kind": "function",
						"line": 125,
						"deco": "FNdS4vibe4inet4path4PathZv",
						"endchar": 2,
						"char": 17,
						"parameters": [
							{
								"deco": "S4vibe4inet4path4Path",
								"name": "p"
							}
						],
						"name": "path",
						"comment": "ditto\n",
						"endline": 129
					},
					{
						"kind": "function",
						"line": 132,
						"deco": "xFNdZAya",
						"endchar": 49,
						"char": 19,
						"name": "host",
						"comment": "The host part of the URL (depends on the schema)\n",
						"endline": 132
					},
					{
						"kind": "function",
						"line": 134,
						"deco": "FNdAyaZv",
						"endchar": 46,
						"char": 17,
						"parameters": [
							{
								"deco": "Aya",
								"name": "v"
							}
						],
						"name": "host",
						"comment": "ditto\n",
						"endline": 134
					},
					{
						"kind": "function",
						"line": 137,
						"deco": "xFNdZt",
						"endchar": 49,
						"char": 19,
						"name": "port",
						"comment": "The port part of the URL (optional)\n",
						"endline": 137
					},
					{
						"kind": "function",
						"line": 139,
						"deco": "FNdtZv",
						"endchar": 41,
						"char": 12,
						"parameters": [
							{
								"deco": "t",
								"name": "v"
							}
						],
						"name": "port",
						"comment": "ditto\n",
						"originalType": "@property (ushort v)",
						"endline": 139
					},
					{
						"kind": "function",
						"line": 142,
						"deco": "xFNdZAya",
						"endchar": 57,
						"char": 19,
						"name": "username",
						"comment": "The user name part of the URL (optional)\n",
						"endline": 142
					},
					{
						"kind": "function",
						"line": 144,
						"deco": "FNdAyaZv",
						"endchar": 54,
						"char": 17,
						"parameters": [
							{
								"deco": "Aya",
								"name": "v"
							}
						],
						"name": "username",
						"comment": "ditto\n",
						"endline": 144
					},
					{
						"kind": "function",
						"line": 147,
						"deco": "xFNdZAya",
						"endchar": 57,
						"char": 19,
						"name": "password",
						"comment": "The password part of the URL (optional)\n",
						"endline": 147
					},
					{
						"kind": "function",
						"line": 149,
						"deco": "FNdAyaZv",
						"endchar": 54,
						"char": 17,
						"parameters": [
							{
								"deco": "Aya",
								"name": "v"
							}
						],
						"name": "password",
						"comment": "ditto\n",
						"endline": 149
					},
					{
						"kind": "function",
						"line": 152,
						"deco": "xFNdZAya",
						"endchar": 63,
						"char": 19,
						"name": "queryString",
						"comment": "The query string part of the URL (optional)\n",
						"endline": 152
					},
					{
						"kind": "function",
						"line": 154,
						"deco": "FNdAyaZv",
						"endchar": 60,
						"char": 17,
						"parameters": [
							{
								"deco": "Aya",
								"name": "v"
							}
						],
						"name": "queryString",
						"comment": "ditto\n",
						"endline": 154
					},
					{
						"kind": "function",
						"line": 157,
						"deco": "xFNdZAya",
						"endchar": 53,
						"char": 19,
						"name": "anchor",
						"comment": "The anchor part of the URL (optional)\n",
						"endline": 157
					},
					{
						"kind": "function",
						"line": 160,
						"deco": "xFNdZAya",
						"endchar": 2,
						"char": 19,
						"name": "localURI",
						"comment": "The path part plus query string and anchor\n",
						"endline": 174
					},
					{
						"kind": "function",
						"line": 176,
						"deco": "FNdAyaZv",
						"endchar": 2,
						"char": 17,
						"parameters": [
							{
								"deco": "Aya",
								"name": "str"
							}
						],
						"name": "localURI",
						"comment": "ditto\n",
						"endline": 191
					},
					{
						"kind": "function",
						"line": 194,
						"deco": "xFNdZS4vibe4inet3url3URL",
						"endchar": 2,
						"char": 16,
						"name": "parentURL",
						"comment": "The URL to the parent path with query string and anchor stripped.\n",
						"endline": 203
					},
					{
						"kind": "function",
						"line": 206,
						"deco": "xFZAya",
						"endchar": 2,
						"char": 9,
						"name": "toString",
						"comment": "Converts this URL object to its string representation.\n",
						"endline": 233
					},
					{
						"kind": "function",
						"line": 235,
						"deco": "xFxS4vibe4inet3url3URLZb",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xS4vibe4inet3url3URL",
								"name": "rhs"
							}
						],
						"name": "startsWith",
						"originalType": "const bool(const URL rhs)",
						"endline": 240
					},
					{
						"kind": "template",
						"line": 242,
						"constraint": "OP == \"~\"",
						"members": [
							{
								"kind": "function",
								"line": 242,
								"endchar": 115,
								"char": 6,
								"type": "const URL(Path rhs)",
								"parameters": [
									{
										"type": "Path",
										"name": "rhs"
									}
								],
								"name": "opBinary",
								"endline": 242
							}
						],
						"char": 6,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "OP"
							}
						],
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 243,
						"constraint": "OP == \"~\"",
						"members": [
							{
								"kind": "function",
								"line": 243,
								"endchar": 120,
								"char": 6,
								"type": "const URL(PathEntry rhs)",
								"parameters": [
									{
										"type": "PathEntry",
										"name": "rhs"
									}
								],
								"name": "opBinary",
								"endline": 243
							}
						],
						"char": 6,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "OP"
							}
						],
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 244,
						"constraint": "OP == \"~\"",
						"members": [
							{
								"kind": "function",
								"line": 244,
								"endchar": 86,
								"char": 7,
								"type": "void(Path rhs)",
								"parameters": [
									{
										"type": "Path",
										"name": "rhs"
									}
								],
								"name": "opOpAssign",
								"endline": 244
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "OP"
							}
						],
						"name": "opOpAssign"
					},
					{
						"kind": "template",
						"line": 245,
						"constraint": "OP == \"~\"",
						"members": [
							{
								"kind": "function",
								"line": 245,
								"endchar": 91,
								"char": 7,
								"type": "void(PathEntry rhs)",
								"parameters": [
									{
										"type": "PathEntry",
										"name": "rhs"
									}
								],
								"name": "opOpAssign",
								"endline": 245
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "OP"
							}
						],
						"name": "opOpAssign"
					},
					{
						"kind": "function",
						"line": 248,
						"deco": "xFKxS4vibe4inet3url3URLZb",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xS4vibe4inet3url3URL",
								"storageClass": [
									"ref"
								],
								"name": "rhs"
							}
						],
						"name": "opEquals",
						"comment": "Tests two URLs for equality using '=='.\n",
						"originalType": "const bool(ref const URL rhs)",
						"endline": 253
					},
					{
						"kind": "function",
						"line": 255,
						"deco": "xFxS4vibe4inet3url3URLZb",
						"endchar": 65,
						"char": 7,
						"parameters": [
							{
								"deco": "xS4vibe4inet3url3URL",
								"name": "other"
							}
						],
						"name": "opEquals",
						"comment": "ditto\n",
						"originalType": "const bool(const URL other)",
						"endline": 255
					},
					{
						"kind": "function",
						"line": 257,
						"deco": "xFKxS4vibe4inet3url3URLZi",
						"endchar": 2,
						"char": 6,
						"parameters": [
							{
								"deco": "xS4vibe4inet3url3URL",
								"storageClass": [
									"ref"
								],
								"name": "rhs"
							}
						],
						"name": "opCmp",
						"originalType": "const int(ref const URL rhs)",
						"endline": 262
					}
				],
				"char": 1,
				"name": "URL",
				"comment": "\tRepresents a URL decomposed into its components.\n"
			}
		],
		"name": "vibe.inet.url",
		"comment": "\tURL parsing routines.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\inet\\urltransfer.d",
		"members": [
			{
				"kind": "function",
				"line": 26,
				"deco": "FS4vibe4inet3url3URLMDFMC4vibe4core6stream11InputStreamZvC4vibe4http6client10HTTPClientZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "S4vibe4inet3url3URL",
						"name": "url"
					},
					{
						"deco": "DFMC4vibe4core6stream11InputStreamZv",
						"storageClass": [
							"scope"
						],
						"name": "callback"
					},
					{
						"deco": "C4vibe4http6client10HTTPClient",
						"default": "null",
						"name": "client"
					}
				],
				"name": "download",
				"comment": "\tDownloads a file from the specified URL.\n\n\tAny redirects will be followed until the actual file resource is reached or if the redirection\n\tlimit of 10 is reached. Note that only HTTP(S) is currently supported.\n",
				"endline": 73
			},
			{
				"kind": "function",
				"line": 76,
				"deco": "FAyaMDFMC4vibe4core6stream11InputStreamZvC4vibe4http6client10HTTPClientZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "url"
					},
					{
						"deco": "DFMC4vibe4core6stream11InputStreamZv",
						"storageClass": [
							"scope"
						],
						"name": "callback"
					},
					{
						"deco": "C4vibe4http6client10HTTPClient",
						"default": "null",
						"name": "client"
					}
				],
				"name": "download",
				"comment": "ditto\n",
				"endline": 79
			},
			{
				"kind": "function",
				"line": 82,
				"deco": "FAyaAyaZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "url"
					},
					{
						"deco": "Aya",
						"name": "filename"
					}
				],
				"name": "download",
				"comment": "ditto\n",
				"endline": 89
			},
			{
				"kind": "function",
				"line": 92,
				"deco": "FS4vibe4inet3url3URLS4vibe4inet4path4PathZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "S4vibe4inet3url3URL",
						"name": "url"
					},
					{
						"deco": "S4vibe4inet4path4Path",
						"name": "filename"
					}
				],
				"name": "download",
				"comment": "ditto\n",
				"endline": 95
			}
		],
		"name": "vibe.inet.urltransfer",
		"comment": "\tDownloading and uploading of data from/to URLs.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\inet\\webform.d",
		"members": [
			{
				"kind": "function",
				"line": 40,
				"deco": "FKS4vibe5utils14dictionarylist33__T14DictionaryListTAyaVbi1Vki16Z14DictionaryListKS4vibe5utils14dictionarylist57__T14DictionaryListTS4vibe4inet7webform8FilePartVbi1Vki1Z14DictionaryListAyaC4vibe4core6stream11InputStreamkZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "S4vibe5utils14dictionarylist33__T14DictionaryListTAyaVbi1Vki16Z14DictionaryList",
						"storageClass": [
							"ref"
						],
						"name": "fields"
					},
					{
						"deco": "S4vibe5utils14dictionarylist57__T14DictionaryListTS4vibe4inet7webform8FilePartVbi1Vki1Z14DictionaryList",
						"storageClass": [
							"ref"
						],
						"name": "files"
					},
					{
						"deco": "Aya",
						"name": "content_type"
					},
					{
						"deco": "C4vibe4core6stream11InputStream",
						"name": "body_reader"
					},
					{
						"deco": "k",
						"name": "max_line_length"
					}
				],
				"name": "parseFormData",
				"comment": "\tParses form data according to an HTTP Content-Type header.\n\n\tWrites the form fields into a key-value of type $(D FormFields), parsed from the\n\tspecified $(D InputStream) and using the corresponding Content-Type header. Parsing\n\tis gracefully aborted if the Content-Type header is unrelated.\n\n\tParams:\n\t\tfields = The key-value map to which form fields must be written\n\t\tfiles = The $(D FilePart)s mapped to the corresponding key in which details on\n\t\t\t\ttransmitted files will be written to.\n\t\tcontent_type = The value of the Content-Type HTTP header.\n\t\tbody_reader = A valid $(D InputSteram) data stream consumed by the parser.\n\t\tmax_line_length = The byte-sized maximum length of lines used as boundary delimitors in Multi-Part forms.\n",
				"originalType": "bool(ref FormFields fields, ref FilePartFormFields files, string content_type, InputStream body_reader, size_t max_line_length)",
				"endline": 56
			},
			{
				"kind": "function",
				"line": 65,
				"deco": "FAyaKS4vibe5utils14dictionarylist33__T14DictionaryListTAyaVbi1Vki16Z14DictionaryListZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "str"
					},
					{
						"deco": "S4vibe5utils14dictionarylist33__T14DictionaryListTAyaVbi1Vki16Z14DictionaryList",
						"storageClass": [
							"ref"
						],
						"name": "params"
					}
				],
				"name": "parseURLEncodedForm",
				"comment": "\tParses a URL encoded form and stores the key/value pairs.\n\n\tWrites to the $(D FormFields) the key-value map associated to an\n\t\"application/x-www-form-urlencoded\" MIME formatted string, ie. all '+'\n\tcharacters are considered as ' ' spaces.\nExample:\nThis example demonstrates parsing using all known form separators, it builds\n\ta key-value map into the destination $(D FormFields)\n---\nFormFields dst;\nparseURLEncodedForm(\"a=b;c;dee=asd&e=fgh&f=j%20l\", dst);\nassert(\"a\" in dst && dst[\"a\"] == \"b\");\nassert(\"c\" in dst && dst[\"c\"] == \"\");\nassert(\"dee\" in dst && dst[\"dee\"] == \"asd\");\nassert(\"e\" in dst && dst[\"e\"] == \"fgh\");\nassert(\"f\" in dst && dst[\"f\"] == \"j l\");\n\n---\n",
				"originalType": "void(string str, ref FormFields params)",
				"endline": 97
			},
			{
				"kind": "function",
				"line": 129,
				"deco": "FKS4vibe5utils14dictionarylist33__T14DictionaryListTAyaVbi1Vki16Z14DictionaryListKS4vibe5utils14dictionarylist57__T14DictionaryListTS4vibe4inet7webform8FilePartVbi1Vki1Z14DictionaryListAyaC4vibe4core6stream11InputStreamkZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "S4vibe5utils14dictionarylist33__T14DictionaryListTAyaVbi1Vki16Z14DictionaryList",
						"storageClass": [
							"ref"
						],
						"name": "fields"
					},
					{
						"deco": "S4vibe5utils14dictionarylist57__T14DictionaryListTS4vibe4inet7webform8FilePartVbi1Vki1Z14DictionaryList",
						"storageClass": [
							"ref"
						],
						"name": "files"
					},
					{
						"deco": "Aya",
						"name": "content_type"
					},
					{
						"deco": "C4vibe4core6stream11InputStream",
						"name": "body_reader"
					},
					{
						"deco": "k",
						"name": "max_line_length"
					}
				],
				"name": "parseMultiPartForm",
				"comment": "\tParses a form in \"multipart/form-data\" format.\n\n\tIf any files are contained in the form, they are written to temporary files using\n\t$(D vibe.core.file.createTempFile) and their details returned in the files field.\n\n\tParams:\n\t\tfields = The key-value map to which form fields must be written\n\t\tfiles = The $(D FilePart)s mapped to the corresponding key in which details on\n\t\t\t\ttransmitted files will be written to.\n\t\tcontent_type = The value of the Content-Type HTTP header.\n\t\tbody_reader = A valid $(D InputSteram) data stream consumed by the parser.\n\t\tmax_line_length = The byte-sized maximum length of lines used as boundary delimitors in Multi-Part forms.\n",
				"originalType": "void(ref FormFields fields, ref FilePartFormFields files, string content_type, InputStream body_reader, size_t max_line_length)",
				"endline": 139
			},
			{
				"kind": "alias",
				"line": 141,
				"char": 1,
				"name": "FormFields"
			},
			{
				"kind": "alias",
				"line": 142,
				"char": 1,
				"name": "FilePartFormFields"
			},
			{
				"kind": "struct",
				"line": 150,
				"members": [
					{
						"kind": "variable",
						"line": 151,
						"deco": "S4vibe5utils14dictionarylist33__T14DictionaryListTAyaVbi0Vki32Z14DictionaryList",
						"char": 16,
						"name": "headers",
						"originalType": "InetHeaderMap",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 152,
						"deco": "S4vibe4inet4path9PathEntry",
						"char": 12,
						"name": "filename",
						"offset": 652
					},
					{
						"kind": "variable",
						"line": 153,
						"deco": "S4vibe4inet4path4Path",
						"char": 7,
						"name": "tempPath",
						"offset": 660
					}
				],
				"char": 1,
				"name": "FilePart",
				"comment": "\tSingle part of a multipart form.\n\n\tA FilePart is the data structure for individual \"multipart/form-data\" parts\n\taccording to RFC 1867 section 7.\n"
			},
			{
				"kind": "template",
				"line": 211,
				"constraint": "isFormMap!T",
				"members": [
					{
						"kind": "function",
						"line": 211,
						"endchar": 1,
						"char": 6,
						"type": "void(ref R dst, T map, char sep = '&')",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "dst"
							},
							{
								"type": "T",
								"name": "map"
							},
							{
								"deco": "a",
								"default": "'&'",
								"name": "sep"
							}
						],
						"name": "formEncode",
						"endline": 215
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tEncodes a Key-Value map into a form URL encoded string.\n\n\tWrites to the $(D OutputRange) an application/x-www-form-urlencoded MIME formatted string,\n\tie. all spaces ' ' are replaced by the '+' character\n\n\tParams:\n\t\tdst\t= The destination $(D OutputRange) where the resulting string must be written to.\n\t\tmap\t= An iterable key-value map iterable with $(D foreach(string key, string value; map)).\n\t\tsep\t= A valid form separator, common values are '&' or ';'\nExample:\nThe following example demonstrates the use of $(D formEncode) with a json map,\n\tthe ordering of keys will be preserved in $(D Bson) and $(D DictionaryList) objects only.\n---\nimport std.array : Appender;\nstring[string] map;\nmap[\"numbers\"] = \"123456789\";\nmap[\"spaces\"] = \"1 2 3 4 a b c d\";\n\nAppender!string app;\napp.formEncode(map);\nassert(app.data == \"spaces=1+2+3+4+a+b+c+d&numbers=123456789\");\n\n---\n",
				"name": "formEncode"
			},
			{
				"kind": "template",
				"line": 242,
				"constraint": "isFormMap!T",
				"members": [
					{
						"kind": "function",
						"line": 242,
						"endchar": 1,
						"char": 8,
						"type": "string(T map, char sep = '&')",
						"parameters": [
							{
								"type": "T",
								"name": "map"
							},
							{
								"deco": "a",
								"default": "'&'",
								"name": "sep"
							}
						],
						"name": "formEncode",
						"endline": 246
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tEncodes a Key-Value map into a form URL encoded string.\n\n\tReturns an application/x-www-form-urlencoded MIME formatted string,\n\tie. all spaces ' ' are replaced by the '+' character\n\n\tParams:\n\t\tmap = An iterable key-value map iterable with $(D foreach(string key, string value; map)).\n\t\tsep = A valid form separator, common values are '&' or ';'\n",
				"name": "formEncode"
			},
			{
				"kind": "template",
				"line": 255,
				"constraint": "isFormMap!T",
				"members": [
					{
						"kind": "function",
						"line": 255,
						"endchar": 1,
						"char": 6,
						"type": "void(ref R dst, T map)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "dst"
							},
							{
								"type": "T",
								"name": "map"
							}
						],
						"name": "urlEncode",
						"endline": 259
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tWrites to the $(D OutputRange) an URL encoded string as specified in RFC 3986 section 2\n\n\tParams:\n\t\tdst\t= The destination $(D OutputRange) where the resulting string must be written to.\n\t\tmap\t= An iterable key-value map iterable with $(D foreach(string key, string value; map)).\n",
				"name": "urlEncode"
			},
			{
				"kind": "template",
				"line": 268,
				"constraint": "isFormMap!T",
				"members": [
					{
						"kind": "function",
						"line": 268,
						"endchar": 1,
						"char": 8,
						"type": "string(T map)",
						"parameters": [
							{
								"type": "T",
								"name": "map"
							}
						],
						"name": "urlEncode",
						"endline": 272
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tReturns an URL encoded string as specified in RFC 3986 section 2\n\n\tParams:\n\t\tmap = An iterable key-value map iterable with $(D foreach(string key, string value; map)).\n",
				"name": "urlEncode"
			},
			{
				"kind": "template",
				"line": 283,
				"members": [
					{
						"kind": "variable",
						"line": 286,
						"init": "isStringMap!T || isJsonLike!T",
						"storageClass": [
							"enum"
						],
						"char": 7,
						"name": "isFormMap"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\tTests if a given type is suitable for storing a web form.\n\n\tTypes that define iteration support with the key typed as $(D string) and\n\tthe value either also typed as $(D string), or as a $(D vibe.data.json.Json)\n\tlike value. The latter case specifically requires a $(D .type) property that\n\tis tested for equality with $(D T.Type.string), as well as a\n\t$(D .get!string) method.\n",
				"name": "isFormMap"
			}
		],
		"name": "vibe.inet.webform",
		"comment": "\tContains HTML/urlencoded form parsing and construction routines.\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Jan Krüger\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\mail\\smtp.d",
		"members": [
			{
				"kind": "enum",
				"line": 26,
				"members": [
					{
						"kind": "enum member",
						"line": 27,
						"value": "0",
						"char": 2,
						"name": "plain"
					},
					{
						"kind": "enum member",
						"line": 28,
						"value": "1",
						"char": 2,
						"name": "ssl"
					},
					{
						"kind": "enum member",
						"line": 29,
						"value": "2",
						"char": 2,
						"name": "startTLS"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "SMTPConnectionType",
				"comment": "\tDetermines the (encryption) type of an SMTP connection.\n"
			},
			{
				"kind": "enum",
				"line": 35,
				"members": [
					{
						"kind": "enum member",
						"line": 36,
						"value": "200",
						"char": 2,
						"name": "_success"
					},
					{
						"kind": "enum member",
						"line": 37,
						"value": "211",
						"char": 2,
						"name": "systemStatus"
					},
					{
						"kind": "enum member",
						"line": 38,
						"value": "214",
						"char": 2,
						"name": "helpMessage"
					},
					{
						"kind": "enum member",
						"line": 39,
						"value": "220",
						"char": 2,
						"name": "serviceReady"
					},
					{
						"kind": "enum member",
						"line": 40,
						"value": "221",
						"char": 2,
						"name": "serviceClosing"
					},
					{
						"kind": "enum member",
						"line": 41,
						"value": "250",
						"char": 2,
						"name": "success"
					},
					{
						"kind": "enum member",
						"line": 42,
						"value": "251",
						"char": 2,
						"name": "forwarding"
					},
					{
						"kind": "enum member",
						"line": 43,
						"value": "334",
						"char": 2,
						"name": "serverAuthReady"
					},
					{
						"kind": "enum member",
						"line": 44,
						"value": "354",
						"char": 2,
						"name": "startMailInput"
					},
					{
						"kind": "enum member",
						"line": 45,
						"value": "421",
						"char": 2,
						"name": "serviceUnavailable"
					},
					{
						"kind": "enum member",
						"line": 46,
						"value": "450",
						"char": 2,
						"name": "mailboxTemporarilyUnavailable"
					},
					{
						"kind": "enum member",
						"line": 47,
						"value": "451",
						"char": 2,
						"name": "processingError"
					},
					{
						"kind": "enum member",
						"line": 48,
						"value": "452",
						"char": 2,
						"name": "outOfDiskSpace"
					},
					{
						"kind": "enum member",
						"line": 49,
						"value": "500",
						"char": 2,
						"name": "commandUnrecognized"
					},
					{
						"kind": "enum member",
						"line": 50,
						"value": "501",
						"char": 2,
						"name": "invalidParameters"
					},
					{
						"kind": "enum member",
						"line": 51,
						"value": "502",
						"char": 2,
						"name": "commandNotImplemented"
					},
					{
						"kind": "enum member",
						"line": 52,
						"value": "503",
						"char": 2,
						"name": "badCommandSequence"
					},
					{
						"kind": "enum member",
						"line": 53,
						"value": "504",
						"char": 2,
						"name": "commandParameterNotImplemented"
					},
					{
						"kind": "enum member",
						"line": 54,
						"value": "521",
						"char": 2,
						"name": "domainAcceptsNoMail"
					},
					{
						"kind": "enum member",
						"line": 55,
						"value": "530",
						"char": 2,
						"name": "accessDenied"
					},
					{
						"kind": "enum member",
						"line": 56,
						"value": "550",
						"char": 2,
						"name": "mailboxUnavailable"
					},
					{
						"kind": "enum member",
						"line": 57,
						"value": "551",
						"char": 2,
						"name": "userNotLocal"
					},
					{
						"kind": "enum member",
						"line": 58,
						"value": "552",
						"char": 2,
						"name": "exceededStorageAllocation"
					},
					{
						"kind": "enum member",
						"line": 59,
						"value": "553",
						"char": 2,
						"name": "mailboxNameNotAllowed"
					},
					{
						"kind": "enum member",
						"line": 60,
						"value": "554",
						"char": 2,
						"name": "transactionFailed"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "SMTPStatus",
				"comment": " Represents the different status codes for SMTP replies.\n"
			},
			{
				"kind": "enum",
				"line": 67,
				"members": [
					{
						"kind": "enum member",
						"line": 68,
						"value": "0",
						"char": 2,
						"name": "none"
					},
					{
						"kind": "enum member",
						"line": 69,
						"value": "1",
						"char": 2,
						"name": "plain"
					},
					{
						"kind": "enum member",
						"line": 70,
						"value": "2",
						"char": 2,
						"name": "login"
					},
					{
						"kind": "enum member",
						"line": 71,
						"value": "3",
						"char": 2,
						"name": "cramMd5"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "SMTPAuthType",
				"comment": "\tRepresents the authentication mechanism used by the SMTP client.\n"
			},
			{
				"kind": "class",
				"line": 78,
				"members": [
					{
						"kind": "variable",
						"line": 79,
						"init": "\"127.0.0.1\"",
						"deco": "Aya",
						"char": 9,
						"name": "host",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 80,
						"init": "cast(ushort)25u",
						"deco": "t",
						"char": 9,
						"name": "port",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 81,
						"init": "\"localhost\"",
						"deco": "Aya",
						"char": 9,
						"name": "localname",
						"offset": 20
					},
					{
						"kind": "variable",
						"line": 82,
						"init": "cast(SMTPConnectionType)0",
						"deco": "E4vibe4mail4smtp18SMTPConnectionType",
						"char": 21,
						"name": "connectionType",
						"offset": 28
					},
					{
						"kind": "variable",
						"line": 83,
						"init": "cast(SMTPAuthType)0",
						"deco": "E4vibe4mail4smtp12SMTPAuthType",
						"char": 15,
						"name": "authType",
						"offset": 32
					},
					{
						"kind": "variable",
						"line": 84,
						"init": "cast(SSLPeerValidationMode)15",
						"deco": "E4vibe6stream3ssl21SSLPeerValidationMode",
						"char": 24,
						"name": "sslValidationMode",
						"offset": 36
					},
					{
						"kind": "variable",
						"line": 85,
						"deco": "DFMC4vibe6stream3ssl10SSLContextZv",
						"char": 34,
						"name": "sslContextSetup",
						"offset": 40
					},
					{
						"kind": "alias",
						"line": 86,
						"storageClass": [
							"deprecated"
						],
						"char": 45,
						"name": "sseContextSetup"
					},
					{
						"kind": "variable",
						"line": 87,
						"deco": "Aya",
						"char": 9,
						"name": "username",
						"offset": 48
					},
					{
						"kind": "variable",
						"line": 88,
						"deco": "Aya",
						"char": 9,
						"name": "password",
						"offset": 56
					},
					{
						"kind": "constructor",
						"line": 90,
						"deco": "FZC4vibe4mail4smtp18SMTPClientSettings",
						"endchar": 10,
						"char": 2,
						"name": "this",
						"originalType": "()",
						"endline": 90
					},
					{
						"kind": "constructor",
						"line": 91,
						"deco": "FAyatZC4vibe4mail4smtp18SMTPClientSettings",
						"endchar": 71,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"name": "host"
							},
							{
								"deco": "t",
								"name": "port"
							}
						],
						"name": "this",
						"originalType": "(string host, ushort port)",
						"endline": 91
					}
				],
				"char": 7,
				"name": "SMTPClientSettings",
				"comment": "\tConfiguration options for the SMTP client.\n"
			},
			{
				"kind": "class",
				"line": 98,
				"members": [
					{
						"kind": "variable",
						"line": 99,
						"deco": "S4vibe5utils14dictionarylist33__T14DictionaryListTAyaVbi0Vki32Z14DictionaryList",
						"char": 16,
						"name": "headers",
						"originalType": "InetHeaderMap",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 100,
						"deco": "Aya",
						"char": 9,
						"name": "bodyText",
						"offset": 660
					}
				],
				"char": 7,
				"name": "Mail",
				"comment": "\tRepresents an email message, including its headers.\n"
			},
			{
				"kind": "function",
				"line": 111,
				"deco": "FC4vibe4mail4smtp18SMTPClientSettingsC4vibe4mail4smtp4MailZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "C4vibe4mail4smtp18SMTPClientSettings",
						"name": "settings"
					},
					{
						"deco": "C4vibe4mail4smtp4Mail",
						"name": "mail"
					}
				],
				"name": "sendMail",
				"comment": "\tSends an e-mail using the given settings.\n\n\tThe mail parameter must point to a valid $(D Mail) object and should define\n\tat least the headers \"To\", \"From\", Sender\" and \"Subject\".\n\n\tValid headers can be found at http://tools.ietf.org/html/rfc4021\nExample:\nThe following example demonstrates the complete construction of a valid\n\te-mail object with UTF-8 encoding. The Date header, as demonstrated, must\n\tbe converted with the local timezone using the $(D toRFC822DateTimeString)\n\tfunction.\n---\nimport vibe.inet.message;\nimport std.datetime;\nvoid testSmtp(string host, ushort port){\n\tMail email = new Mail;\n\temail.headers[\"Date\"] = Clock.currTime(TimeZone.getTimeZone(\"America/New_York\")).toRFC822DateTimeString(); // uses UFCS\n\temail.headers[\"Sender\"] = \"Domain.com Contact Form <no-reply@domain.com>\";\n\temail.headers[\"From\"] = \"John Doe <joe@doe.com>\";\n\temail.headers[\"To\"] = \"Customer Support <support@domain.com>\";\n\temail.headers[\"Subject\"] = \"My subject\";\n\temail.headers[\"Content-Type\"] = \"text/plain;charset=utf-8\";\n\temail.bodyText = \"This message can contain utf-8 [κόσμε], and\\nwill be displayed properly in mail clients with \\\\n line endings.\";\n\n\tauto smtpSettings = new SMTPClientSettings(host, port);\n\tsendMail(smtpSettings, email);\n}\n// testSmtp(\"localhost\", 25);\n\n---\n",
				"endline": 208
			}
		],
		"name": "vibe.mail.smtp",
		"comment": "\tSMTP client implementation\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\stream\\base64.d",
		"members": [
			{
				"kind": "alias",
				"line": 18,
				"deco": "C4vibe6stream6base6443__T22Base64OutputStreamImplVai43Vai47Vai61Z22Base64OutputStreamImpl",
				"char": 1,
				"name": "Base64OutputStream",
				"comment": "\tMIME compatible Base64 encoding stream.\n"
			},
			{
				"kind": "alias",
				"line": 23,
				"deco": "C4vibe6stream6base6443__T22Base64OutputStreamImplVai45Vai95Vai61Z22Base64OutputStreamImpl",
				"char": 1,
				"name": "Base64URLOutputStream",
				"comment": "\tURL safe Base64 encoding stream (using '-' and '_' for non-alphabetic values).\n"
			},
			{
				"kind": "template",
				"line": 32,
				"members": [
					{
						"kind": "class",
						"line": 32,
						"members": [
							{
								"kind": "variable",
								"line": 34,
								"char": 16,
								"type": "OutputStream",
								"name": "m_out"
							},
							{
								"kind": "variable",
								"line": 35,
								"deco": "m",
								"char": 9,
								"name": "m_maxBytesPerLine"
							},
							{
								"kind": "variable",
								"line": 36,
								"init": "0",
								"deco": "m",
								"char": 9,
								"name": "m_bytesInCurrentLine"
							},
							{
								"kind": "alias",
								"line": 39,
								"char": 10,
								"type": "Base64Impl!(C62, C63, CPAD)",
								"name": "B64"
							},
							{
								"kind": "constructor",
								"line": 50,
								"endchar": 2,
								"char": 2,
								"type": "(OutputStream output, ulong max_bytes_per_line = 57)",
								"parameters": [
									{
										"type": "OutputStream",
										"name": "output"
									},
									{
										"deco": "m",
										"default": "57",
										"name": "max_bytes_per_line"
									}
								],
								"name": "this",
								"comment": "\t\tInitializes the Base64 output stream.\n\n\t\tParams:\n\t\t\toutput = The output sink to which the encoded result is written.\n\t\t\tmax_bytes_per_line = The maximum number of input bytes after which a\n\t\t\t\tline break is inserted into the output. Defaults to 57,\n\t\t\t\taccording to the MIME standard.\n",
								"endline": 54
							},
							{
								"kind": "function",
								"line": 57,
								"endchar": 2,
								"char": 7,
								"type": "void(in ubyte[] bytes_)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "ubyte[]",
										"name": "bytes_"
									}
								],
								"name": "write",
								"endline": 78
							},
							{
								"kind": "function",
								"line": 80,
								"endchar": 2,
								"char": 7,
								"type": "void(InputStream stream, ulong nbytes = 0)",
								"parameters": [
									{
										"type": "InputStream",
										"name": "stream"
									},
									{
										"deco": "m",
										"default": "0",
										"name": "nbytes"
									}
								],
								"name": "write",
								"endline": 83
							},
							{
								"kind": "function",
								"line": 85,
								"endchar": 2,
								"char": 7,
								"type": "void()",
								"name": "flush",
								"endline": 88
							},
							{
								"kind": "function",
								"line": 90,
								"endchar": 2,
								"char": 7,
								"type": "void()",
								"name": "finalize",
								"endline": 93
							}
						],
						"char": 7,
						"name": "Base64OutputStreamImpl"
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "value",
						"deco": "a",
						"name": "C62"
					},
					{
						"kind": "value",
						"deco": "a",
						"name": "C63"
					},
					{
						"kind": "value",
						"defaultValue": "'='",
						"deco": "a",
						"name": "CPAD"
					}
				],
				"comment": "\tGeneric Base64 encoding output stream.\n\n\tThe template arguments C62 and C63 determine which non-alphabetic characters\n\tare used to represent the 62nd and 63rd code units. CPAD is the character\n\tused for padding the end of the result if necessary.\n",
				"name": "Base64OutputStreamImpl"
			}
		],
		"name": "vibe.stream.base64",
		"comment": "\tBase64 encoding routines\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger, Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\stream\\counting.d",
		"members": [
			{
				"kind": "import",
				"line": 11,
				"char": 15,
				"name": "vibe.core.stream"
			},
			{
				"kind": "class",
				"line": 19,
				"members": [
					{
						"kind": "constructor",
						"line": 34,
						"deco": "FC4vibe4core6stream11InputStreammbZC4vibe6stream8counting18LimitedInputStream",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							},
							{
								"deco": "m",
								"name": "byte_limit"
							},
							{
								"deco": "b",
								"default": "false",
								"name": "silent_limit"
							}
						],
						"name": "this",
						"comment": " Constructs a limited stream from an existing input stream.\n\n\t\tParams:\n\t\t\tstream: the input stream to be wrapped\n\t\t\tbyte_limit: the maximum number of bytes readable from the constructed stream\n\t\t\tsilent_limit: if set, the stream will behave exactly like the original stream, but\n\t\t\t\twill throw an exception as soon as the limit is reached.\n",
						"originalType": "(InputStream stream, ulong byte_limit, bool silent_limit = false)",
						"endline": 40
					},
					{
						"kind": "function",
						"line": 43,
						"deco": "NgFNdZNgC4vibe4core6stream11InputStream",
						"endchar": 70,
						"char": 31,
						"name": "sourceStream",
						"comment": "The stream that is wrapped by this one\n",
						"endline": 43
					},
					{
						"kind": "function",
						"line": 45,
						"deco": "FNdZb",
						"endchar": 86,
						"char": 17,
						"name": "empty",
						"endline": 45,
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						]
					},
					{
						"kind": "function",
						"line": 47,
						"deco": "FNdZm",
						"endchar": 98,
						"char": 18,
						"name": "leastSize",
						"endline": 47,
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						]
					},
					{
						"kind": "function",
						"line": 49,
						"deco": "FNdZb",
						"endchar": 79,
						"char": 17,
						"name": "dataAvailableForRead",
						"endline": 49,
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						]
					},
					{
						"kind": "function",
						"line": 51,
						"deco": "FmZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "m",
								"name": "bytes"
							}
						],
						"name": "increment",
						"endline": 55
					},
					{
						"kind": "function",
						"line": 57,
						"deco": "FZAxh",
						"endchar": 49,
						"char": 17,
						"name": "peek",
						"endline": 57,
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						]
					},
					{
						"kind": "function",
						"line": 59,
						"deco": "FAhZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Ah",
								"name": "dst"
							}
						],
						"name": "read",
						"endline": 64,
						"overrides": [
							"vibe.core.stream.InputStream.read"
						]
					},
					{
						"kind": "function",
						"line": 66,
						"protection": "protected",
						"deco": "FZv",
						"endchar": 2,
						"char": 17,
						"name": "onSizeLimitReached",
						"endline": 68
					}
				],
				"char": 1,
				"interfaces": [
					"vibe.core.stream.InputStream"
				],
				"name": "LimitedInputStream",
				"comment": "\tWraps an existing stream, limiting the amount of data that can be read.\n"
			},
			{
				"kind": "class",
				"line": 75,
				"members": [
					{
						"kind": "constructor",
						"line": 80,
						"deco": "FC4vibe4core6stream12OutputStreamZC4vibe6stream8counting20CountingOutputStream",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream12OutputStream",
								"name": "stream"
							}
						],
						"name": "this",
						"originalType": "(OutputStream stream)",
						"endline": 84
					},
					{
						"kind": "function",
						"line": 86,
						"deco": "xFNdZm",
						"endchar": 64,
						"char": 18,
						"name": "bytesWritten",
						"endline": 86
					},
					{
						"kind": "function",
						"line": 88,
						"deco": "FmZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "m",
								"name": "bytes"
							}
						],
						"name": "increment",
						"endline": 91
					},
					{
						"kind": "function",
						"line": 93,
						"deco": "FxAhZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							}
						],
						"name": "write",
						"originalType": "void(in ubyte[] bytes)",
						"endline": 97,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					},
					{
						"kind": "function",
						"line": 99,
						"deco": "FC4vibe4core6stream11InputStreammZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "nbytes"
							}
						],
						"name": "write",
						"originalType": "void(InputStream stream, ulong nbytes = 0)",
						"endline": 102,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					},
					{
						"kind": "function",
						"line": 104,
						"deco": "FZv",
						"endchar": 32,
						"char": 7,
						"name": "flush",
						"endline": 104,
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						]
					},
					{
						"kind": "function",
						"line": 105,
						"deco": "FZv",
						"endchar": 35,
						"char": 7,
						"name": "finalize",
						"endline": 105,
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						]
					}
				],
				"char": 1,
				"interfaces": [
					"vibe.core.stream.OutputStream"
				],
				"name": "CountingOutputStream",
				"comment": "\tWraps an existing output stream, counting the bytes that are written.\n"
			},
			{
				"kind": "class",
				"line": 111,
				"members": [
					{
						"kind": "constructor",
						"line": 116,
						"deco": "FC4vibe4core6stream11InputStreamZC4vibe6stream8counting19CountingInputStream",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							}
						],
						"name": "this",
						"originalType": "(InputStream stream)",
						"endline": 120
					},
					{
						"kind": "function",
						"line": 122,
						"deco": "xFNdZm",
						"endchar": 58,
						"char": 18,
						"name": "bytesRead",
						"endline": 122
					},
					{
						"kind": "function",
						"line": 124,
						"deco": "FNdZb",
						"endchar": 48,
						"char": 17,
						"name": "empty",
						"endline": 124,
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						]
					},
					{
						"kind": "function",
						"line": 125,
						"deco": "FNdZm",
						"endchar": 58,
						"char": 18,
						"name": "leastSize",
						"endline": 125,
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						]
					},
					{
						"kind": "function",
						"line": 126,
						"deco": "FNdZb",
						"endchar": 76,
						"char": 17,
						"name": "dataAvailableForRead",
						"endline": 126,
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						]
					},
					{
						"kind": "function",
						"line": 128,
						"deco": "FmZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "m",
								"name": "bytes"
							}
						],
						"name": "increment",
						"endline": 131
					},
					{
						"kind": "function",
						"line": 133,
						"deco": "FZAxh",
						"endchar": 46,
						"char": 17,
						"name": "peek",
						"endline": 133,
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						]
					},
					{
						"kind": "function",
						"line": 135,
						"deco": "FAhZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Ah",
								"name": "dst"
							}
						],
						"name": "read",
						"endline": 139,
						"overrides": [
							"vibe.core.stream.InputStream.read"
						]
					}
				],
				"char": 1,
				"interfaces": [
					"vibe.core.stream.InputStream"
				],
				"name": "CountingInputStream",
				"comment": "\tWraps an existing input stream, counting the bytes that are written.\n"
			},
			{
				"kind": "class",
				"line": 153,
				"members": [
					{
						"kind": "constructor",
						"line": 160,
						"deco": "FC4vibe4core6stream11InputStreamDFZvZC4vibe6stream8counting22EndCallbackInputStream",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "input"
							},
							{
								"deco": "DFZv",
								"name": "callback"
							}
						],
						"name": "this",
						"originalType": "(InputStream input, void delegate() callback)",
						"endline": 165
					},
					{
						"kind": "function",
						"line": 167,
						"deco": "FNdZb",
						"endchar": 2,
						"char": 17,
						"name": "empty",
						"endline": 171,
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						]
					},
					{
						"kind": "function",
						"line": 173,
						"deco": "FNdZm",
						"endchar": 2,
						"char": 18,
						"name": "leastSize",
						"endline": 178,
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						]
					},
					{
						"kind": "function",
						"line": 180,
						"deco": "FNdZb",
						"endchar": 2,
						"char": 17,
						"name": "dataAvailableForRead",
						"endline": 184,
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						]
					},
					{
						"kind": "function",
						"line": 186,
						"deco": "FZAxh",
						"endchar": 2,
						"char": 17,
						"name": "peek",
						"endline": 190,
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						]
					},
					{
						"kind": "function",
						"line": 192,
						"deco": "FAhZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Ah",
								"name": "dst"
							}
						],
						"name": "read",
						"endline": 197,
						"overrides": [
							"vibe.core.stream.InputStream.read"
						]
					}
				],
				"char": 1,
				"interfaces": [
					"vibe.core.stream.InputStream"
				],
				"name": "EndCallbackInputStream",
				"comment": "\tWraps an input stream and calls the given delegate once the stream is empty.\n\n\tNote that this function will potentially block after each read operation to\n\tsee if the end has already been reached - this may take as long until either\n\tnew data has arrived or until the connection was closed.\n\n\tThe stream will also guarantee that the inner stream is not used after it\n\thas been determined to be empty. It can thus be safely deleted once the\n\tcallback is invoked.\n"
			},
			{
				"kind": "class",
				"line": 209,
				"base": "object.Exception",
				"members": [
					{
						"kind": "constructor",
						"line": 212,
						"deco": "FAyamC6object9ThrowableAyaiZC4vibe6stream8counting14LimitException",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Aya",
								"name": "message"
							},
							{
								"deco": "m",
								"name": "limit"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "i",
								"default": "__LINE__",
								"name": "line"
							}
						],
						"name": "this",
						"originalType": "(string message, ulong limit, Throwable next = null, string file = __FILE__, int line = __LINE__)",
						"endline": 215
					},
					{
						"kind": "function",
						"line": 218,
						"deco": "xFNdZm",
						"endchar": 50,
						"char": 18,
						"name": "limit",
						"comment": "The byte limit of the stream that emitted the exception\n",
						"endline": 218
					}
				],
				"char": 1,
				"name": "LimitException"
			}
		],
		"name": "vibe.stream.counting",
		"comment": "\tWrapper streams which count the number of bytes or limit the stream based on the number of\n\ttransferred bytes.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\stream\\memory.d",
		"members": [
			{
				"kind": "class",
				"line": 23,
				"members": [
					{
						"kind": "constructor",
						"line": 28,
						"deco": "FC4vibe5utils6memory9AllocatorZC4vibe6stream6memory18MemoryOutputStream",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe5utils6memory9Allocator",
								"default": "defaultAllocator()",
								"name": "alloc"
							}
						],
						"name": "this",
						"originalType": "(Allocator alloc = defaultAllocator())",
						"endline": 31
					},
					{
						"kind": "function",
						"line": 34,
						"deco": "FNdZAh",
						"endchar": 58,
						"char": 20,
						"name": "data",
						"comment": "An array with all data written to the stream so far.\n",
						"endline": 34
					},
					{
						"kind": "function",
						"line": 37,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "reset",
						"comment": "Resets the stream to its initial state containing no data.\n",
						"endline": 40
					},
					{
						"kind": "function",
						"line": 43,
						"deco": "FkZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "k",
								"name": "nbytes"
							}
						],
						"name": "reserve",
						"comment": "Reserves space for data - useful for optimization.\n",
						"originalType": "void(size_t nbytes)",
						"endline": 46
					},
					{
						"kind": "function",
						"line": 48,
						"deco": "FxAhZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							}
						],
						"name": "write",
						"originalType": "void(in ubyte[] bytes)",
						"endline": 51,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					},
					{
						"kind": "function",
						"line": 53,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "flush",
						"endline": 55,
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						]
					},
					{
						"kind": "function",
						"line": 57,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "finalize",
						"endline": 59,
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						]
					},
					{
						"kind": "function",
						"line": 61,
						"deco": "FC4vibe4core6stream11InputStreammZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "nbytes"
							}
						],
						"name": "write",
						"originalType": "void(InputStream stream, ulong nbytes = 0)",
						"endline": 64,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					}
				],
				"char": 7,
				"interfaces": [
					"vibe.core.stream.OutputStream"
				],
				"name": "MemoryOutputStream",
				"comment": " OutputStream that collects the written data in memory and allows to query it\n\tas a byte array.\n"
			},
			{
				"kind": "class",
				"line": 71,
				"members": [
					{
						"kind": "constructor",
						"line": 87,
						"deco": "FAhbkZC4vibe6stream6memory12MemoryStream",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "Ah",
								"name": "data"
							},
							{
								"deco": "b",
								"default": "true",
								"name": "writable"
							},
							{
								"deco": "k",
								"default": "4294967295u",
								"name": "initial_size"
							}
						],
						"name": "this",
						"comment": " Creates a new stream with the given data array as its contents.\n\n\t\tParams:\n\t\t\tdata = The data array\n\t\t\twritable = Flag that controls whether the data array may be changed\n\t\t\tinitial_size = The initial value that size returns - the file can grow up to data.length in size\n",
						"originalType": "(ubyte[] data, bool writable = true, size_t initial_size = size_t.max)",
						"endline": 93
					},
					{
						"kind": "function",
						"line": 99,
						"deco": "FNdkZv",
						"endchar": 64,
						"char": 17,
						"parameters": [
							{
								"deco": "k",
								"name": "size"
							}
						],
						"name": "peekWindow",
						"comment": " Controls the maximum size of the array returned by peek().\n\n\t\tThis property is mainly useful for debugging purposes.\n",
						"originalType": "@property void(size_t size)",
						"endline": 99
					},
					{
						"kind": "function",
						"line": 101,
						"deco": "FNdZb",
						"endchar": 52,
						"char": 17,
						"name": "empty",
						"endline": 101,
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						]
					},
					{
						"kind": "function",
						"line": 102,
						"deco": "FNdZm",
						"endchar": 55,
						"char": 18,
						"name": "leastSize",
						"endline": 102,
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						]
					},
					{
						"kind": "function",
						"line": 103,
						"deco": "FNdZb",
						"endchar": 66,
						"char": 17,
						"name": "dataAvailableForRead",
						"endline": 103,
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						]
					},
					{
						"kind": "function",
						"line": 104,
						"deco": "xFNbNdZm",
						"endchar": 56,
						"char": 18,
						"name": "size",
						"endline": 104,
						"overrides": [
							"vibe.core.stream.RandomAccessStream.size"
						]
					},
					{
						"kind": "function",
						"line": 105,
						"deco": "xFNbNdZk",
						"endchar": 68,
						"char": 19,
						"name": "capacity",
						"originalType": "const nothrow @property size_t()",
						"endline": 105
					},
					{
						"kind": "function",
						"line": 106,
						"deco": "xFNbNdZb",
						"endchar": 57,
						"char": 17,
						"name": "readable",
						"endline": 106,
						"overrides": [
							"vibe.core.stream.RandomAccessStream.readable"
						]
					},
					{
						"kind": "function",
						"line": 107,
						"deco": "xFNbNdZb",
						"endchar": 63,
						"char": 17,
						"name": "writable",
						"endline": 107,
						"overrides": [
							"vibe.core.stream.RandomAccessStream.writable"
						]
					},
					{
						"kind": "function",
						"line": 109,
						"deco": "FmZv",
						"endchar": 82,
						"char": 7,
						"parameters": [
							{
								"deco": "m",
								"name": "offset"
							}
						],
						"name": "seek",
						"endline": 109,
						"overrides": [
							"vibe.core.stream.RandomAccessStream.seek"
						]
					},
					{
						"kind": "function",
						"line": 110,
						"deco": "FNbZm",
						"endchar": 39,
						"char": 8,
						"name": "tell",
						"endline": 110,
						"overrides": [
							"vibe.core.stream.RandomAccessStream.tell"
						]
					},
					{
						"kind": "function",
						"line": 111,
						"deco": "FZAxh",
						"endchar": 83,
						"char": 17,
						"name": "peek",
						"endline": 111,
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						]
					},
					{
						"kind": "function",
						"line": 113,
						"deco": "FAhZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Ah",
								"name": "dst"
							}
						],
						"name": "read",
						"endline": 118,
						"overrides": [
							"vibe.core.stream.InputStream.read"
						]
					},
					{
						"kind": "function",
						"line": 120,
						"deco": "FxAhZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							}
						],
						"name": "write",
						"originalType": "void(in ubyte[] bytes)",
						"endline": 127,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					},
					{
						"kind": "function",
						"line": 129,
						"deco": "FZv",
						"endchar": 16,
						"char": 7,
						"name": "flush",
						"endline": 129,
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						]
					},
					{
						"kind": "function",
						"line": 130,
						"deco": "FZv",
						"endchar": 19,
						"char": 7,
						"name": "finalize",
						"endline": 130,
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						]
					},
					{
						"kind": "function",
						"line": 131,
						"deco": "FC4vibe4core6stream11InputStreammZv",
						"endchar": 83,
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "nbytes"
							}
						],
						"name": "write",
						"originalType": "void(InputStream stream, ulong nbytes = 0)",
						"endline": 131,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					}
				],
				"char": 7,
				"interfaces": [
					"vibe.core.stream.RandomAccessStream"
				],
				"name": "MemoryStream",
				"comment": "\tProvides a random access stream interface for accessing an array of bytes.\n"
			}
		],
		"name": "vibe.stream.memory",
		"comment": "\tIn-memory streams\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\stream\\multicast.d",
		"members": [
			{
				"kind": "class",
				"line": 17,
				"members": [
					{
						"kind": "constructor",
						"line": 22,
						"deco": "FAC4vibe4core6stream12OutputStreamXC4vibe6stream9multicast15MulticastStream",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "AC4vibe4core6stream12OutputStream",
								"name": "outputs"
							}
						],
						"name": "this",
						"originalType": "(OutputStream[] outputs...)",
						"endline": 26
					},
					{
						"kind": "function",
						"line": 28,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "finalize",
						"endline": 31,
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						]
					},
					{
						"kind": "function",
						"line": 33,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "flush",
						"endline": 37,
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						]
					},
					{
						"kind": "function",
						"line": 39,
						"deco": "FxAhZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							}
						],
						"name": "write",
						"originalType": "void(in ubyte[] bytes)",
						"endline": 43,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					},
					{
						"kind": "function",
						"line": 45,
						"deco": "FC4vibe4core6stream11InputStreammZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "source"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "nbytes"
							}
						],
						"name": "write",
						"originalType": "void(InputStream source, ulong nbytes = 0)",
						"endline": 48,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					}
				],
				"char": 1,
				"interfaces": [
					"vibe.core.stream.OutputStream"
				],
				"name": "MulticastStream"
			}
		],
		"name": "vibe.stream.multicast",
		"comment": "\tMulticasts an input stream to multiple output streams.\n\n\tCopyright: © 2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Eric Cornelius\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\stream\\openssl.d",
		"members": [
			{
				"kind": "class",
				"line": 53,
				"members": [
					{
						"kind": "constructor",
						"line": 65,
						"deco": "FC4vibe4core6stream6StreamC4vibe6stream7openssl14OpenSSLContextE4vibe6stream3ssl14SSLStreamStateAyaS4vibe4core3net14NetworkAddressZC4vibe6stream7openssl13OpenSSLStream",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream6Stream",
								"name": "underlying"
							},
							{
								"deco": "C4vibe6stream7openssl14OpenSSLContext",
								"name": "ctx"
							},
							{
								"deco": "E4vibe6stream3ssl14SSLStreamState",
								"name": "state"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "peer_name"
							},
							{
								"deco": "S4vibe4core3net14NetworkAddress",
								"default": "NetworkAddress(sockaddr(cast(short)0, [cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u]), , )",
								"name": "peer_address"
							}
						],
						"name": "this",
						"originalType": "(Stream underlying, OpenSSLContext ctx, SSLStreamState state, string peer_name = null, NetworkAddress peer_address = NetworkAddress.init)",
						"endline": 148
					},
					{
						"kind": "destructor",
						"line": 169,
						"deco": "FZv",
						"endchar": 2,
						"char": 2,
						"name": "~this",
						"endline": 172
					},
					{
						"kind": "function",
						"line": 174,
						"deco": "FNdZb",
						"endchar": 2,
						"char": 17,
						"name": "empty",
						"endline": 177,
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						]
					},
					{
						"kind": "function",
						"line": 179,
						"deco": "FNdZm",
						"endchar": 2,
						"char": 18,
						"name": "leastSize",
						"endline": 183,
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						]
					},
					{
						"kind": "function",
						"line": 185,
						"deco": "FNdZb",
						"endchar": 2,
						"char": 17,
						"name": "dataAvailableForRead",
						"endline": 188,
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						]
					},
					{
						"kind": "function",
						"line": 190,
						"deco": "FZAxh",
						"endchar": 2,
						"char": 17,
						"name": "peek",
						"endline": 195,
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						]
					},
					{
						"kind": "function",
						"line": 197,
						"deco": "FAhZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Ah",
								"name": "dst"
							}
						],
						"name": "read",
						"endline": 205,
						"overrides": [
							"vibe.core.stream.InputStream.read"
						]
					},
					{
						"kind": "function",
						"line": 207,
						"deco": "FxAhZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes_"
							}
						],
						"name": "write",
						"originalType": "void(in ubyte[] bytes_)",
						"endline": 216,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					},
					{
						"kind": "alias",
						"line": 218,
						"char": 2,
						"name": "write"
					},
					{
						"kind": "function",
						"line": 220,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "flush",
						"endline": 223,
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						]
					},
					{
						"kind": "function",
						"line": 225,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "finalize",
						"endline": 236,
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						]
					},
					{
						"kind": "function",
						"line": 238,
						"deco": "FC4vibe4core6stream11InputStreammZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "nbytes"
							}
						],
						"name": "write",
						"originalType": "void(InputStream stream, ulong nbytes = 0)",
						"endline": 241,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					},
					{
						"kind": "function",
						"line": 293,
						"deco": "FNdZS4vibe6stream3ssl25SSLCertificateInformation",
						"endchar": 2,
						"char": 38,
						"name": "peerCertificate",
						"endline": 296,
						"overrides": [
							"vibe.stream.ssl.SSLStream.peerCertificate"
						]
					}
				],
				"char": 7,
				"interfaces": [
					"vibe.stream.ssl.SSLStream"
				],
				"name": "OpenSSLStream",
				"comment": "\tCreates an SSL/TLS tunnel within an existing stream.\n\n\tNote: Be sure to call finalize before finalizing/closing the outer stream so that the SSL\n\t\ttunnel is properly closed first.\n"
			},
			{
				"kind": "class",
				"line": 308,
				"members": [
					{
						"kind": "constructor",
						"line": 318,
						"deco": "FE4vibe6stream3ssl14SSLContextKindE4vibe6stream3ssl10SSLVersionZC4vibe6stream7openssl14OpenSSLContext",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "E4vibe6stream3ssl14SSLContextKind",
								"name": "kind"
							},
							{
								"deco": "E4vibe6stream3ssl10SSLVersion",
								"default": "cast(SSLVersion)0",
								"name": "ver"
							}
						],
						"name": "this",
						"originalType": "(SSLContextKind kind, SSLVersion ver = SSLVersion.any)",
						"endline": 387
					},
					{
						"kind": "destructor",
						"line": 389,
						"deco": "FZv",
						"endchar": 2,
						"char": 2,
						"name": "~this",
						"endline": 393
					},
					{
						"kind": "function",
						"line": 397,
						"deco": "xFNdZE4vibe6stream3ssl14SSLContextKind",
						"endchar": 57,
						"char": 27,
						"name": "kind",
						"comment": "The kind of SSL context (client/server)\n",
						"endline": 397,
						"overrides": [
							"vibe.stream.ssl.SSLContext.kind"
						]
					},
					{
						"kind": "function",
						"line": 406,
						"deco": "FNdE4vibe6stream3ssl21SSLPeerValidationModeZv",
						"endchar": 2,
						"char": 17,
						"parameters": [
							{
								"deco": "E4vibe6stream3ssl21SSLPeerValidationMode",
								"name": "mode"
							}
						],
						"name": "peerValidationMode",
						"comment": " Specifies the validation level of remote peers.\n\n\t\tThe default mode for SSLContextKind.client is\n\t\tSSLPeerValidationMode.trustedCert and the default for\n\t\tSSLContextKind.server is SSLPeerValidationMode.none.\n",
						"endline": 421,
						"overrides": [
							"vibe.stream.ssl.SSLContext.peerValidationMode"
						]
					},
					{
						"kind": "function",
						"line": 423,
						"deco": "xFNdZE4vibe6stream3ssl21SSLPeerValidationMode",
						"endchar": 88,
						"char": 34,
						"name": "peerValidationMode",
						"comment": "ditto\n",
						"endline": 423,
						"overrides": [
							"vibe.stream.ssl.SSLContext.peerValidationMode"
						]
					},
					{
						"kind": "function",
						"line": 433,
						"deco": "FNdiZv",
						"endchar": 2,
						"char": 17,
						"parameters": [
							{
								"deco": "i",
								"name": "val"
							}
						],
						"name": "maxCertChainLength",
						"comment": " The maximum length of an accepted certificate chain.\n\n\t\tAny certificate chain longer than this will result in the SSL/TLS\n\t\tnegitiation failing.\n\n\t\tThe default value is 9.\n",
						"endline": 438,
						"overrides": [
							"vibe.stream.ssl.SSLContext.maxCertChainLength"
						]
					},
					{
						"kind": "function",
						"line": 441,
						"deco": "xFNdZi",
						"endchar": 67,
						"char": 16,
						"name": "maxCertChainLength",
						"comment": "ditto\n",
						"endline": 441,
						"overrides": [
							"vibe.stream.ssl.SSLContext.maxCertChainLength"
						]
					},
					{
						"kind": "function",
						"line": 452,
						"deco": "FNdDFMS4vibe6stream3ssl21SSLPeerValidationDataZbZv",
						"endchar": 115,
						"char": 17,
						"parameters": [
							{
								"deco": "DFMS4vibe6stream3ssl21SSLPeerValidationDataZb",
								"name": "callback"
							}
						],
						"name": "peerValidationCallback",
						"comment": " An optional user callback for peer validation.\n\n\t\tThis callback will be called for each peer and each certificate of\n\t\tits certificate chain to allow overriding the validation decision\n\t\tbased on the selected peerValidationMode (e.g. to allow invalid\n\t\tcertificates or to reject valid ones). This is mainly useful for\n\t\tpresenting the user with a dialog in case of untrusted or mismatching\n\t\tcertificates.\n",
						"originalType": "@property void(SSLPeerValidationCallback callback)",
						"endline": 452,
						"overrides": [
							"vibe.stream.ssl.SSLContext.peerValidationCallback"
						]
					},
					{
						"kind": "function",
						"line": 454,
						"deco": "NgFNdZNgDFMS4vibe6stream3ssl21SSLPeerValidationDataZb",
						"endchar": 111,
						"char": 45,
						"name": "peerValidationCallback",
						"comment": "ditto\n",
						"originalType": "inout @property inout(SSLPeerValidationCallback)()",
						"endline": 454,
						"overrides": [
							"vibe.stream.ssl.SSLContext.peerValidationCallback"
						]
					},
					{
						"kind": "function",
						"line": 456,
						"deco": "FNdDFAyaZC4vibe6stream3ssl10SSLContextZv",
						"endchar": 2,
						"char": 17,
						"parameters": [
							{
								"deco": "DFAyaZC4vibe6stream3ssl10SSLContext",
								"name": "callback"
							}
						],
						"name": "sniCallback",
						"originalType": "@property void(SSLServerNameCallback callback)",
						"endline": 463,
						"overrides": [
							"vibe.stream.ssl.SSLContext.sniCallback"
						]
					},
					{
						"kind": "function",
						"line": 464,
						"deco": "NgFNdZNgDFAyaZC4vibe6stream3ssl10SSLContext",
						"endchar": 85,
						"char": 41,
						"name": "sniCallback",
						"originalType": "inout @property inout(SSLServerNameCallback)()",
						"endline": 464,
						"overrides": [
							"vibe.stream.ssl.SSLContext.sniCallback"
						]
					},
					{
						"kind": "function",
						"line": 478,
						"deco": "FC4vibe4core6stream6StreamE4vibe6stream3ssl14SSLStreamStateAyaS4vibe4core3net14NetworkAddressZC4vibe6stream7openssl13OpenSSLStream",
						"endchar": 2,
						"char": 16,
						"parameters": [
							{
								"deco": "C4vibe4core6stream6Stream",
								"name": "underlying"
							},
							{
								"deco": "E4vibe6stream3ssl14SSLStreamState",
								"name": "state"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "peer_name"
							},
							{
								"deco": "S4vibe4core3net14NetworkAddress",
								"default": "NetworkAddress(sockaddr(cast(short)0, [cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u]), , )",
								"name": "peer_address"
							}
						],
						"name": "createStream",
						"originalType": "OpenSSLStream(Stream underlying, SSLStreamState state, string peer_name = null, NetworkAddress peer_address = NetworkAddress.init)",
						"endline": 481,
						"overrides": [
							"vibe.stream.ssl.SSLContext.createStream"
						]
					},
					{
						"kind": "function",
						"line": 491,
						"deco": "FAyaZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"default": "null",
								"name": "list"
							}
						],
						"name": "setCipherList",
						"comment": " Set the list of cipher specifications to use for SSL/TLS tunnels.\n\n\t\tThe list must be a colon separated list of cipher\n\t\tspecifications as accepted by OpenSSL. Calling this function\n\t\twithout argument will restore the default.\n\n\t\tSee_also: $(LINK https://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT)\n",
						"endline": 499,
						"overrides": [
							"vibe.stream.ssl.SSLContext.setCipherList"
						]
					},
					{
						"kind": "function",
						"line": 524,
						"deco": "FAyaZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"default": "null",
								"name": "pem_file"
							}
						],
						"name": "setDHParams",
						"comment": " Set params to use for DH cipher.\n\n By default the 2048-bit prime from RFC 3526 is used.\n\n Params:\n pem_file = Path to a PEM file containing the DH parameters. Calling\n    this function without argument will restore the default.\n",
						"endline": 543,
						"overrides": [
							"vibe.stream.ssl.SSLContext.setDHParams"
						]
					},
					{
						"kind": "function",
						"line": 554,
						"deco": "FAyaZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"default": "null",
								"name": "curve"
							}
						],
						"name": "setECDHCurve",
						"comment": " Set the elliptic curve to use for ECDH cipher.\n\n By default a curve is either chosen automatically or  prime256v1 is used.\n\n Params:\n curve = The short name of the elliptic curve to use. Calling this\n    function without argument will restore the default.\n\n",
						"endline": 577,
						"overrides": [
							"vibe.stream.ssl.SSLContext.setECDHCurve"
						]
					},
					{
						"kind": "function",
						"line": 580,
						"deco": "FAyaZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"name": "useCertificateChainFile",
						"comment": "Sets a certificate file to use for authenticating to the remote peer\n",
						"endline": 583,
						"overrides": [
							"vibe.stream.ssl.SSLContext.useCertificateChainFile"
						]
					},
					{
						"kind": "function",
						"line": 587,
						"deco": "FAyaZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"name": "usePrivateKeyFile",
						"comment": "Sets the private key to use for authenticating to the remote peer based\n\non the configured certificate chain file.\n",
						"endline": 590,
						"overrides": [
							"vibe.stream.ssl.SSLContext.usePrivateKeyFile"
						]
					},
					{
						"kind": "function",
						"line": 601,
						"deco": "FAyaZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"name": "useTrustedCertificateFile",
						"comment": " Sets the list of trusted certificates for verifying peer certificates.\n\n\t\tIf this is a server context, this also entails that the given\n\t\tcertificates are advertised to connecting clients during handshake.\n\n\t\tOn Linux, the system's root certificate authority list is usually\n\t\tfound at \"/etc/ssl/certs/ca-certificates.crt\",\n\t\t\"/etc/pki/tls/certs/ca-bundle.crt\", or \"/etc/ssl/ca-bundle.pem\".\n",
						"endline": 612,
						"overrides": [
							"vibe.stream.ssl.SSLContext.useTrustedCertificateFile"
						]
					}
				],
				"char": 7,
				"interfaces": [
					"vibe.stream.ssl.SSLContext"
				],
				"name": "OpenSSLContext",
				"comment": "\tEncapsulates the configuration for an SSL tunnel.\n\n\tNote that when creating an SSLContext with SSLContextKind.client, the\n\tpeerValidationMode will be set to SSLPeerValidationMode.trustedCert,\n\tbut no trusted certificate authorities are added by default. Use\n\tuseTrustedCertificateFile to add those.\n"
			},
			{
				"kind": "alias",
				"line": 693,
				"deco": "PS6deimos7openssl3ssl6ssl_st",
				"char": 1,
				"name": "SSLState"
			}
		],
		"name": "vibe.stream.openssl",
		"comment": "\tOpenSSL based SSL/TLS stream implementation\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\stream\\operations.d",
		"members": [
			{
				"kind": "import",
				"line": 10,
				"char": 15,
				"name": "vibe.core.stream"
			},
			{
				"kind": "template",
				"line": 35,
				"members": [
					{
						"kind": "function",
						"line": 35,
						"endchar": 1,
						"char": 9,
						"type": "ubyte[](InputStream stream, size_t max_bytes = size_t.max, string linesep = \"\\x0d\\x0a\", Allocator alloc = defaultAllocator())",
						"parameters": [
							{
								"type": "InputStream",
								"name": "stream"
							},
							{
								"default": "size_t.max",
								"type": "size_t",
								"name": "max_bytes"
							},
							{
								"default": "\"\\x0d\\x0a\"",
								"type": "string",
								"name": "linesep"
							},
							{
								"default": "defaultAllocator()",
								"type": "Allocator",
								"name": "alloc"
							}
						],
						"name": "readLine",
						"endline": 38
					}
				],
				"char": 9,
				"parameters": [],
				"comment": "\n\n\n\n\tReads and returns a single line from the stream.\n\n\tThrows:\n\t\tAn exception if either the stream end was hit without hitting a newline first, or\n\t\tif more than max_bytes have been read from the stream.\n",
				"name": "readLine"
			},
			{
				"kind": "template",
				"line": 40,
				"members": [
					{
						"kind": "function",
						"line": 40,
						"endchar": 1,
						"char": 6,
						"type": "void(InputStream stream, OutputStream dst, size_t max_bytes = size_t.max, string linesep = \"\\x0d\\x0a\")",
						"parameters": [
							{
								"type": "InputStream",
								"name": "stream"
							},
							{
								"type": "OutputStream",
								"name": "dst"
							},
							{
								"default": "size_t.max",
								"type": "size_t",
								"name": "max_bytes"
							},
							{
								"default": "\"\\x0d\\x0a\"",
								"type": "string",
								"name": "linesep"
							}
						],
						"name": "readLine",
						"endline": 43
					}
				],
				"char": 6,
				"parameters": [],
				"comment": "ditto\n",
				"name": "readLine"
			},
			{
				"kind": "template",
				"line": 45,
				"constraint": "isOutputRange!(R, ubyte)",
				"members": [
					{
						"kind": "function",
						"line": 45,
						"endchar": 1,
						"char": 6,
						"type": "void(InputStream stream, ref R dst, size_t max_bytes = size_t.max, string linesep = \"\\x0d\\x0a\")",
						"parameters": [
							{
								"type": "InputStream",
								"name": "stream"
							},
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "dst"
							},
							{
								"default": "size_t.max",
								"type": "size_t",
								"name": "max_bytes"
							},
							{
								"default": "\"\\x0d\\x0a\"",
								"type": "string",
								"name": "linesep"
							}
						],
						"name": "readLine",
						"endline": 49
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "ditto\n",
				"name": "readLine"
			},
			{
				"kind": "template",
				"line": 89,
				"members": [
					{
						"kind": "function",
						"line": 89,
						"endchar": 1,
						"char": 9,
						"type": "ubyte[](InputStream stream, in ubyte[] end_marker, size_t max_bytes = size_t.max, Allocator alloc = defaultAllocator())",
						"parameters": [
							{
								"type": "InputStream",
								"name": "stream"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "ubyte[]",
								"name": "end_marker"
							},
							{
								"default": "size_t.max",
								"type": "size_t",
								"name": "max_bytes"
							},
							{
								"default": "defaultAllocator()",
								"type": "Allocator",
								"name": "alloc"
							}
						],
						"name": "readUntil",
						"endline": 95
					}
				],
				"char": 9,
				"parameters": [],
				"comment": "\tReads all data of a stream until the specified end marker is detected.\n\n\tParams:\n\t\tstream = The input stream which is searched for end_marker\n\t\tend_marker = The byte sequence which is searched in the stream\n\t\tmax_bytes = An optional limit of how much data is to be read from the\n\t\t\tinput stream; if the limit is reaached before hitting the end\n\t\t\tmarker, an exception is thrown.\n\t\talloc = An optional allocator that is used to build the result string\n\t\t\tin the string variant of this function\n\t\tdst = The output stream, to which the prefix to the end marker of the\n\t\t\tinput stream is written\n\n\tReturns:\n\t\tThe string variant of this function returns the complete prefix to the\n\t\tend marker of the input stream, excluding the end marker itself.\n\n\tThrows:\n\t\tAn exception if either the stream end was hit without hitting a marker\n\t\tfirst, or if more than max_bytes have been read from the stream in\n\t\tcase of max_bytes != 0.\n\n\tRemarks:\n\t\tThis function uses an algorithm inspired by the\n\t\t$(LINK2 http://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm,\n\t\tBoyer-Moore string search algorithm). However, contrary to the original\n\t\talgorithm, it will scan the whole input string exactly once, without\n\t\tjumping over portions of it. This allows the algorithm to work with\n\t\tconstant memory requirements and without the memory copies that would\n\t\tbe necessary for streams that do not hold their complete data in\n\t\tmemory.\n\n\t\tThe current implementation has a run time complexity of O(n*m+m²) and\n\t\tO(n+m) in typical cases, with n being the length of the scanned input\n\t\tstring and m the length of the marker.\n",
				"name": "readUntil"
			},
			{
				"kind": "template",
				"line": 97,
				"members": [
					{
						"kind": "function",
						"line": 97,
						"endchar": 1,
						"char": 6,
						"type": "void(InputStream stream, OutputStream dst, in ubyte[] end_marker, ulong max_bytes = (ulong).max)",
						"parameters": [
							{
								"type": "InputStream",
								"name": "stream"
							},
							{
								"type": "OutputStream",
								"name": "dst"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "ubyte[]",
								"name": "end_marker"
							},
							{
								"deco": "m",
								"default": "(ulong).max",
								"name": "max_bytes"
							}
						],
						"name": "readUntil",
						"endline": 102
					}
				],
				"char": 6,
				"parameters": [],
				"comment": "ditto\n",
				"name": "readUntil"
			},
			{
				"kind": "template",
				"line": 104,
				"constraint": "isOutputRange!(R, ubyte)",
				"members": [
					{
						"kind": "function",
						"line": 104,
						"endchar": 1,
						"char": 6,
						"type": "void(InputStream stream, ref R dst, in ubyte[] end_marker, ulong max_bytes = (ulong).max)",
						"parameters": [
							{
								"type": "InputStream",
								"name": "stream"
							},
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "dst"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "ubyte[]",
								"name": "end_marker"
							},
							{
								"deco": "m",
								"default": "(ulong).max",
								"name": "max_bytes"
							}
						],
						"name": "readUntil",
						"endline": 203
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "ditto\n",
				"name": "readUntil"
			},
			{
				"kind": "function",
				"line": 244,
				"deco": "FC4vibe4core6stream11InputStreamkkZAh",
				"endchar": 1,
				"char": 9,
				"parameters": [
					{
						"deco": "C4vibe4core6stream11InputStream",
						"name": "stream"
					},
					{
						"deco": "k",
						"default": "4294967295u",
						"name": "max_bytes"
					},
					{
						"deco": "k",
						"default": "0u",
						"name": "reserve_bytes"
					}
				],
				"name": "readAll",
				"comment": "\tReads the complete contents of a stream, optionally limited by max_bytes.\n\n\tThrows:\n\t\tAn exception is thrown if the stream contains more than max_bytes data.\n",
				"originalType": "ubyte[](InputStream stream, size_t max_bytes = size_t.max, size_t reserve_bytes = 0)",
				"endline": 264
			},
			{
				"kind": "function",
				"line": 282,
				"deco": "FC4vibe4core6stream11InputStreambkZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "C4vibe4core6stream11InputStream",
						"name": "stream"
					},
					{
						"deco": "b",
						"default": "false",
						"name": "sanitize"
					},
					{
						"deco": "k",
						"default": "4294967295u",
						"name": "max_bytes"
					}
				],
				"name": "readAllUTF8",
				"comment": "\tReads the complete contents of a stream, assuming UTF-8 encoding.\n\n\tParams:\n\t\tstream = Specifies the stream from which to read.\n\t\tsanitize = If true, the input data will not be validated but will instead be made valid UTF-8.\n\t\tmax_bytes = Optional size limit of the data that is read.\n\n\tReturns:\n\t\tThe full contents of the stream, excluding a possible BOM, are returned as a UTF-8 string.\n\n\tThrows:\n\t\tAn exception is thrown if max_bytes != 0 and the stream contains more than max_bytes data.\n\t\tIf the sanitize parameter is fals and the stream contains invalid UTF-8 code sequences,\n\t\ta UTFException is thrown.\n",
				"originalType": "string(InputStream stream, bool sanitize = false, size_t max_bytes = size_t.max)",
				"endline": 292
			},
			{
				"kind": "function",
				"line": 307,
				"deco": "FC4vibe4core6stream12OutputStreamC4vibe4core6stream16ConnectionStreammS4core4time8DurationZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "C4vibe4core6stream12OutputStream",
						"name": "destination"
					},
					{
						"deco": "C4vibe4core6stream16ConnectionStream",
						"name": "source"
					},
					{
						"deco": "m",
						"default": "0LU",
						"name": "nbytes"
					},
					{
						"deco": "S4core4time8Duration",
						"default": "dur(0L)",
						"name": "max_latency"
					}
				],
				"name": "pipeRealtime",
				"comment": "\tPipes a stream to another while keeping the latency within the specified threshold.\n\n\tParams:\n\t\tdestination = The destination stram to pipe into\n\t\tsource =      The source stream to read data from\n\t\tnbytes =      Number of bytes to pipe through. The default of zero means to pipe\n\t\t              the whole input stream.\n\t\tmax_latency = The maximum time before data is flushed to destination. The default value\n\t\t              of 0 s will flush after each chunk of data read from source.\n\n\tSee_also: OutputStream.write\n",
				"originalType": "void(OutputStream destination, ConnectionStream source, ulong nbytes = 0, Duration max_latency = 0.seconds)",
				"endline": 340
			}
		],
		"name": "vibe.stream.operations",
		"comment": "\tHigh level stream manipulation functions.\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\stream\\ssl.d",
		"members": [
			{
				"kind": "function",
				"line": 83,
				"deco": "FE4vibe6stream3ssl14SSLContextKindE4vibe6stream3ssl10SSLVersionZC4vibe6stream3ssl10SSLContext",
				"endchar": 1,
				"char": 12,
				"parameters": [
					{
						"deco": "E4vibe6stream3ssl14SSLContextKind",
						"name": "kind"
					},
					{
						"deco": "E4vibe6stream3ssl10SSLVersion",
						"default": "cast(SSLVersion)0",
						"name": "ver"
					}
				],
				"name": "createSSLContext",
				"comment": "\n\n\n\n Creates a new context of the given kind.\n\n\tParams:\n\t\tkind = Specifies if the context is going to be used on the client\n\t\t\tor on the server end of the SSL tunnel\n\t\tver = The SSL/TLS protocol used for negotiating the tunnel\n",
				"originalType": "SSLContext(SSLContextKind kind, SSLVersion ver = SSLVersion.any)",
				"endline": 95
			},
			{
				"kind": "function",
				"line": 108,
				"deco": "FC4vibe4core6stream6StreamC4vibe6stream3ssl10SSLContextAyaS4vibe4core3net14NetworkAddressZC4vibe6stream3ssl9SSLStream",
				"endchar": 1,
				"char": 11,
				"parameters": [
					{
						"deco": "C4vibe4core6stream6Stream",
						"name": "underlying"
					},
					{
						"deco": "C4vibe6stream3ssl10SSLContext",
						"name": "ctx"
					},
					{
						"deco": "Aya",
						"default": "null",
						"name": "peer_name"
					},
					{
						"deco": "S4vibe4core3net14NetworkAddress",
						"default": "NetworkAddress(sockaddr(cast(short)0, [cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u]), , )",
						"name": "peer_address"
					}
				],
				"name": "createSSLStream",
				"comment": " Constructs a new SSL tunnel and infers the stream state from the SSLContextKind.\n\n\tDepending on the SSLContextKind of ctx, the tunnel will try to establish an SSL\n\ttunnel by either passively accepting or by actively connecting.\n\n\tParams:\n\t\tunderlying = The base stream which is used for the SSL tunnel\n\t\tctx = SSL context used for initiating the tunnel\n\t\tpeer_name = DNS name of the remote peer, used for certificate validation\n\t\tpeer_address = IP address of the remote peer, used for certificate validation\n",
				"originalType": "SSLStream(Stream underlying, SSLContext ctx, string peer_name = null, NetworkAddress peer_address = NetworkAddress.init)",
				"endline": 112
			},
			{
				"kind": "function",
				"line": 126,
				"deco": "FC4vibe4core6stream6StreamC4vibe6stream3ssl10SSLContextE4vibe6stream3ssl14SSLStreamStateAyaS4vibe4core3net14NetworkAddressZC4vibe6stream3ssl9SSLStream",
				"endchar": 1,
				"char": 11,
				"parameters": [
					{
						"deco": "C4vibe4core6stream6Stream",
						"name": "underlying"
					},
					{
						"deco": "C4vibe6stream3ssl10SSLContext",
						"name": "ctx"
					},
					{
						"deco": "E4vibe6stream3ssl14SSLStreamState",
						"name": "state"
					},
					{
						"deco": "Aya",
						"default": "null",
						"name": "peer_name"
					},
					{
						"deco": "S4vibe4core3net14NetworkAddress",
						"default": "NetworkAddress(sockaddr(cast(short)0, [cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u]), , )",
						"name": "peer_address"
					}
				],
				"name": "createSSLStream",
				"comment": " Constructs a new SSL tunnel, allowing to override the stream state.\n\n\tThis constructor allows to specify a custom tunnel state, which can\n\tbe useful when a tunnel has already been established by other means.\n\n\tParams:\n\t\tunderlying = The base stream which is used for the SSL tunnel\n\t\tctx = SSL context used for initiating the tunnel\n\t\tstate = The manually specified tunnel state\n\t\tpeer_name = DNS name of the remote peer, used for certificate validation\n\t\tpeer_address = IP address of the remote peer, used for certificate validation\n",
				"originalType": "SSLStream(Stream underlying, SSLContext ctx, SSLStreamState state, string peer_name = null, NetworkAddress peer_address = NetworkAddress.init)",
				"endline": 129
			},
			{
				"kind": "function",
				"line": 134,
				"storageClass": [
					"auto"
				],
				"deco": "FC4vibe4core6stream6StreamC4vibe6stream3ssl10SSLContextE4vibe6stream3ssl14SSLStreamStateAyaS4vibe4core3net14NetworkAddressZS4vibe5utils6memory58__T11FreeListRefTC4vibe6stream7openssl13OpenSSLStreamVbi1Z11FreeListRef",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "C4vibe4core6stream6Stream",
						"name": "underlying"
					},
					{
						"deco": "C4vibe6stream3ssl10SSLContext",
						"name": "ctx"
					},
					{
						"deco": "E4vibe6stream3ssl14SSLStreamState",
						"name": "state"
					},
					{
						"deco": "Aya",
						"default": "null",
						"name": "peer_name"
					},
					{
						"deco": "S4vibe4core3net14NetworkAddress",
						"default": "NetworkAddress(sockaddr(cast(short)0, [cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u]), , )",
						"name": "peer_address"
					}
				],
				"name": "createSSLStreamFL",
				"comment": "\tConstructs a new SSL stream using manual memory allocator.\n",
				"originalType": "(Stream underlying, SSLContext ctx, SSLStreamState state, string peer_name = null, NetworkAddress peer_address = NetworkAddress.init)",
				"endline": 148
			},
			{
				"kind": "function",
				"line": 150,
				"deco": "FPFE4vibe6stream3ssl14SSLContextKindE4vibe6stream3ssl10SSLVersionZC4vibe6stream3ssl10SSLContextZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "PFE4vibe6stream3ssl14SSLContextKindE4vibe6stream3ssl10SSLVersionZC4vibe6stream3ssl10SSLContext",
						"name": "factory"
					}
				],
				"name": "setSSLContextFactory",
				"endline": 153
			},
			{
				"kind": "interface",
				"line": 166,
				"members": [
					{
						"kind": "function",
						"line": 167,
						"storageClass": [
							"abstract"
						],
						"deco": "FNdZS4vibe6stream3ssl25SSLCertificateInformation",
						"char": 38,
						"name": "peerCertificate"
					}
				],
				"char": 1,
				"interfaces": [
					"vibe.core.stream.Stream"
				],
				"name": "SSLStream",
				"comment": "\n\n\n\n\tCreates an SSL/TLS tunnel within an existing stream.\n\n\tNote: Be sure to call finalize before finalizing/closing the outer stream so that the SSL\n\t\ttunnel is properly closed first.\n"
			},
			{
				"kind": "enum",
				"line": 170,
				"members": [
					{
						"kind": "enum member",
						"line": 171,
						"value": "0",
						"char": 2,
						"name": "connecting"
					},
					{
						"kind": "enum member",
						"line": 172,
						"value": "1",
						"char": 2,
						"name": "accepting"
					},
					{
						"kind": "enum member",
						"line": 173,
						"value": "2",
						"char": 2,
						"name": "connected"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "SSLStreamState"
			},
			{
				"kind": "interface",
				"line": 185,
				"members": [
					{
						"kind": "function",
						"line": 187,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNdZE4vibe6stream3ssl14SSLContextKind",
						"char": 27,
						"name": "kind",
						"comment": "The kind of SSL context (client/server)\n"
					},
					{
						"kind": "function",
						"line": 195,
						"storageClass": [
							"abstract"
						],
						"deco": "FNdE4vibe6stream3ssl21SSLPeerValidationModeZv",
						"char": 17,
						"parameters": [
							{
								"deco": "E4vibe6stream3ssl21SSLPeerValidationMode",
								"name": "mode"
							}
						],
						"name": "peerValidationMode",
						"comment": " Specifies the validation level of remote peers.\n\n\t\tThe default mode for SSLContextKind.client is\n\t\tSSLPeerValidationMode.trustedCert and the default for\n\t\tSSLContextKind.server is SSLPeerValidationMode.none.\n"
					},
					{
						"kind": "function",
						"line": 197,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNdZE4vibe6stream3ssl21SSLPeerValidationMode",
						"char": 34,
						"name": "peerValidationMode",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 206,
						"storageClass": [
							"abstract"
						],
						"deco": "FNdiZv",
						"char": 17,
						"parameters": [
							{
								"deco": "i",
								"name": "val"
							}
						],
						"name": "maxCertChainLength",
						"comment": " The maximum length of an accepted certificate chain.\n\n\t\tAny certificate chain longer than this will result in the SSL/TLS\n\t\tnegitiation failing.\n\n\t\tThe default value is 9.\n"
					},
					{
						"kind": "function",
						"line": 208,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNdZi",
						"char": 16,
						"name": "maxCertChainLength",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 219,
						"storageClass": [
							"abstract"
						],
						"deco": "FNdDFMS4vibe6stream3ssl21SSLPeerValidationDataZbZv",
						"char": 17,
						"parameters": [
							{
								"deco": "DFMS4vibe6stream3ssl21SSLPeerValidationDataZb",
								"name": "callback"
							}
						],
						"name": "peerValidationCallback",
						"comment": " An optional user callback for peer validation.\n\n\t\tThis callback will be called for each peer and each certificate of\n\t\tits certificate chain to allow overriding the validation decision\n\t\tbased on the selected peerValidationMode (e.g. to allow invalid\n\t\tcertificates or to reject valid ones). This is mainly useful for\n\t\tpresenting the user with a dialog in case of untrusted or mismatching\n\t\tcertificates.\n",
						"originalType": "@property void(SSLPeerValidationCallback callback)"
					},
					{
						"kind": "function",
						"line": 221,
						"storageClass": [
							"abstract"
						],
						"deco": "NgFNdZNgDFMS4vibe6stream3ssl21SSLPeerValidationDataZb",
						"char": 45,
						"name": "peerValidationCallback",
						"comment": "ditto\n",
						"originalType": "inout @property inout(SSLPeerValidationCallback)()"
					},
					{
						"kind": "function",
						"line": 227,
						"storageClass": [
							"abstract"
						],
						"deco": "FNdDFAyaZC4vibe6stream3ssl10SSLContextZv",
						"char": 17,
						"parameters": [
							{
								"deco": "DFAyaZC4vibe6stream3ssl10SSLContext",
								"name": "callback"
							}
						],
						"name": "sniCallback",
						"comment": " The callback used to associcate host names with SSL certificates/contexts.\n\n\t\tThis property is only used for kind $(D SSLContextKind.serverSNI).\n",
						"originalType": "@property void(SSLServerNameCallback callback)"
					},
					{
						"kind": "function",
						"line": 229,
						"storageClass": [
							"abstract"
						],
						"deco": "NgFNdZNgDFAyaZC4vibe6stream3ssl10SSLContext",
						"char": 41,
						"name": "sniCallback",
						"comment": "ditto\n",
						"originalType": "inout @property inout(SSLServerNameCallback)()"
					},
					{
						"kind": "function",
						"line": 233,
						"storageClass": [
							"abstract"
						],
						"deco": "FC4vibe4core6stream6StreamE4vibe6stream3ssl14SSLStreamStateAyaS4vibe4core3net14NetworkAddressZC4vibe6stream3ssl9SSLStream",
						"char": 12,
						"parameters": [
							{
								"deco": "C4vibe4core6stream6Stream",
								"name": "underlying"
							},
							{
								"deco": "E4vibe6stream3ssl14SSLStreamState",
								"name": "state"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "peer_name"
							},
							{
								"deco": "S4vibe4core3net14NetworkAddress",
								"default": "NetworkAddress(sockaddr(cast(short)0, [cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u]), , )",
								"name": "peer_address"
							}
						],
						"name": "createStream",
						"comment": " Creates a new stream associated to this context.\n",
						"originalType": "SSLStream(Stream underlying, SSLStreamState state, string peer_name = null, NetworkAddress peer_address = NetworkAddress.init)"
					},
					{
						"kind": "function",
						"line": 243,
						"storageClass": [
							"abstract"
						],
						"deco": "FAyaZv",
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"default": "null",
								"name": "list"
							}
						],
						"name": "setCipherList",
						"comment": " Set the list of cipher specifications to use for SSL/TLS tunnels.\n\n\t\tThe list must be a colon separated list of cipher\n\t\tspecifications as accepted by OpenSSL. Calling this function\n\t\twithout argument will restore the default.\n\n\t\tSee_also: $(LINK https://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT)\n"
					},
					{
						"kind": "function",
						"line": 253,
						"storageClass": [
							"abstract"
						],
						"deco": "FAyaZv",
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"default": "null",
								"name": "pem_file"
							}
						],
						"name": "setDHParams",
						"comment": " Set params to use for DH cipher.\n\n By default the 2048-bit prime from RFC 3526 is used.\n\n Params:\n pem_file = Path to a PEM file containing the DH parameters. Calling\n    this function without argument will restore the default.\n"
					},
					{
						"kind": "function",
						"line": 264,
						"storageClass": [
							"abstract"
						],
						"deco": "FAyaZv",
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"default": "null",
								"name": "curve"
							}
						],
						"name": "setECDHCurve",
						"comment": " Set the elliptic curve to use for ECDH cipher.\n\n By default a curve is either chosen automatically or  prime256v1 is used.\n\n Params:\n curve = The short name of the elliptic curve to use. Calling this\n    function without argument will restore the default.\n\n"
					},
					{
						"kind": "function",
						"line": 267,
						"storageClass": [
							"abstract"
						],
						"deco": "FAyaZv",
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"name": "useCertificateChainFile",
						"comment": "Sets a certificate file to use for authenticating to the remote peer\n"
					},
					{
						"kind": "function",
						"line": 271,
						"storageClass": [
							"abstract"
						],
						"deco": "FAyaZv",
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"name": "usePrivateKeyFile",
						"comment": "Sets the private key to use for authenticating to the remote peer based\n\non the configured certificate chain file.\n"
					},
					{
						"kind": "function",
						"line": 282,
						"storageClass": [
							"abstract"
						],
						"deco": "FAyaZv",
						"char": 7,
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"name": "useTrustedCertificateFile",
						"comment": " Sets the list of trusted certificates for verifying peer certificates.\n\n\t\tIf this is a server context, this also entails that the given\n\t\tcertificates are advertised to connecting clients during handshake.\n\n\t\tOn Linux, the system's root certificate authority list is usually\n\t\tfound at \"/etc/ssl/certs/ca-certificates.crt\",\n\t\t\"/etc/pki/tls/certs/ca-bundle.crt\", or \"/etc/ssl/ca-bundle.pem\".\n"
					}
				],
				"char": 1,
				"name": "SSLContext",
				"comment": "\tEncapsulates the configuration for an SSL tunnel.\n\n\tNote that when creating an SSLContext with SSLContextKind.client, the\n\tpeerValidationMode will be set to SSLPeerValidationMode.trustedCert,\n\tbut no trusted certificate authorities are added by default. Use\n\tuseTrustedCertificateFile to add those.\n"
			},
			{
				"kind": "enum",
				"line": 285,
				"members": [
					{
						"kind": "enum member",
						"line": 286,
						"value": "0",
						"char": 2,
						"name": "client",
						"comment": "Client context (active connector)\n"
					},
					{
						"kind": "enum member",
						"line": 287,
						"value": "1",
						"char": 2,
						"name": "server",
						"comment": "Server context (passive connector)\n"
					},
					{
						"kind": "enum member",
						"line": 288,
						"value": "2",
						"char": 2,
						"name": "serverSNI",
						"comment": "Server context with multiple certificate support (SNI)\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "SSLContextKind"
			},
			{
				"kind": "enum",
				"line": 291,
				"members": [
					{
						"kind": "enum member",
						"line": 292,
						"value": "0",
						"char": 2,
						"name": "any",
						"comment": "Accept SSLv3 or TLSv1.0 and greater\n"
					},
					{
						"kind": "enum member",
						"line": 293,
						"value": "1",
						"char": 2,
						"name": "ssl3",
						"comment": "Accept only SSLv3\n"
					},
					{
						"kind": "enum member",
						"line": 294,
						"value": "2",
						"char": 2,
						"name": "tls1",
						"comment": "Accept only TLSv1.0\n"
					},
					{
						"kind": "enum member",
						"line": 295,
						"value": "3",
						"char": 2,
						"name": "dtls1",
						"comment": "Use DTLSv1.0\n"
					},
					{
						"kind": "enum member",
						"line": 297,
						"value": "0",
						"char": 2,
						"name": "ssl23",
						"comment": "Deprecated compatibility alias\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "SSLVersion"
			},
			{
				"kind": "enum",
				"line": 306,
				"members": [
					{
						"kind": "enum member",
						"line": 312,
						"value": "0",
						"char": 2,
						"name": "none",
						"comment": " Accept any peer regardless if and which certificate is presented.\n\n\t\tThis mode is generally discouraged and should only be used with\n\t\ta custom validation callback set to do the verification.\n"
					},
					{
						"kind": "enum member",
						"line": 320,
						"value": "1",
						"char": 2,
						"name": "requireCert",
						"comment": " Require the peer to always present a certificate.\n\n\t\tNote that this option alone does not verify the certificate at all. It\n\t\tcan be used together with the \"check\" options, or by using a custom\n\t\tvalidation callback to actually validate certificates.\n"
					},
					{
						"kind": "enum member",
						"line": 328,
						"value": "2",
						"char": 2,
						"name": "checkCert",
						"comment": " Check the certificate for basic validity.\n\n\t\tThis verifies the validity of the certificate chain and some other\n\t\tgeneral properties, such as expiration time. It doesn't verify\n\t\teither the peer name or the trust state of the certificate.\n"
					},
					{
						"kind": "enum member",
						"line": 337,
						"value": "4",
						"char": 2,
						"name": "checkPeer",
						"comment": " Validate the actual peer name/address against the certificate.\n\n\t\tCompares the name/address of the connected peer, as passed to\n\t\t$(D createSSLStream) to the list of patterns present in the\n\t\tcertificate, if any. If no match is found, the connection is\n\t\trejected.\n"
					},
					{
						"kind": "enum member",
						"line": 346,
						"value": "8",
						"char": 2,
						"name": "checkTrust",
						"comment": " Requires that the certificate or any parent certificate is trusted.\n\n\t\tSearches list of trusted certificates for a match of the certificate\n\t\tchain. If no match is found, the connection is rejected.\n\n\t\tSee_also: $(D useTrustedCertificateFile)\n"
					},
					{
						"kind": "enum member",
						"line": 361,
						"value": "7",
						"char": 2,
						"name": "validCert",
						"comment": " Require a valid certificate matching the peer name.\n\n\t\tIn this mode, the certificate is validated for general consistency and\n\t\tpossible expiration, and the peer name is checked to see if the\n\t\tcertificate actually applies.\n\n\t\tHowever, the certificate chain is not matched against the system's\n\t\tpool of trusted certificate authorities, so a custom validation\n\t\tcallback is still needed to get a secure validation process.\n\n\t\tThis option is a combination $(D requireCert), $(D checkCert) and\n\t\t$(D checkPeer).\n"
					},
					{
						"kind": "enum member",
						"line": 373,
						"value": "15",
						"char": 2,
						"name": "trustedCert",
						"comment": " Require a valid and trusted certificate (strongly recommended).\n\n\t\tChecks the certificate and peer name for validity and requires that\n\t\tthe certificate chain originates from a trusted CA (based on the\n\t\tregistered pool of certificate authorities).\n\n\t\tThis option is a combination $(D validCert) and $(D checkTrust).\n\n\t\tSee_also: $(D useTrustedCertificateFile)\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "SSLPeerValidationMode",
				"comment": " Specifies how rigorously SSL peer certificates are validated.\n\n\tThe individual options can be combined using a bitwise \"or\". Usually it is\n\trecommended to use $(D trustedCert) for full validation.\n"
			},
			{
				"kind": "struct",
				"line": 377,
				"members": [
					{
						"kind": "variable",
						"line": 384,
						"deco": "S4vibe5utils14dictionarylist33__T14DictionaryListTAyaVbi0Vki32Z14DictionaryList",
						"char": 33,
						"name": "subjectName",
						"comment": " Information about the certificate's subject name.\n\n\t\tMaps fields to their values. For example, typical fields on a\n\t\tcertificate will be 'commonName', 'countryName', 'emailAddress', etc.\n",
						"originalType": "DictionaryList!(string, false)",
						"offset": 0
					}
				],
				"char": 1,
				"name": "SSLCertificateInformation",
				"comment": " Certificate information\n"
			},
			{
				"kind": "struct",
				"line": 387,
				"members": [
					{
						"kind": "variable",
						"line": 388,
						"deco": "Aa",
						"char": 9,
						"name": "certName",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 389,
						"deco": "Aya",
						"char": 9,
						"name": "errorString",
						"offset": 8
					}
				],
				"char": 1,
				"name": "SSLPeerValidationData"
			},
			{
				"kind": "alias",
				"line": 395,
				"deco": "DFMS4vibe6stream3ssl21SSLPeerValidationDataZb",
				"char": 1,
				"name": "SSLPeerValidationCallback"
			},
			{
				"kind": "alias",
				"line": 397,
				"deco": "DFAyaZC4vibe6stream3ssl10SSLContext",
				"char": 1,
				"name": "SSLServerNameCallback"
			}
		],
		"name": "vibe.stream.ssl",
		"comment": "\tSSL/TLS stream implementation\n\n\tSSLStream can be used to implement SSL/TLS communication on top of a TCP connection. The\n\tSSLContextKind of an SSLStream determines if the SSL tunnel is established actively (client) or\n\tpassively (server).\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\nExample:\nA simple SSL client\n---\nimport vibe.core.net;\nimport vibe.stream.ssl;\n\nvoid sendSSLMessage()\n{\n\tauto conn = connectTCP(\"127.0.0.1\", 1234);\n\tauto sslctx = createSSLContext(SSLContextKind.client);\n\tauto stream = createSSLStream(conn, sslctx);\n\tstream.write(\"Hello, World!\");\n\tstream.finalize();\n\tconn.close();\n}\n\n---\nExample:\nCorresponding server\n---\nimport vibe.core.log;\nimport vibe.core.net;\nimport vibe.stream.operations;\nimport vibe.stream.ssl;\n\nvoid listenForSSL()\n{\n\tauto sslctx = createSSLContext(SSLContextKind.server);\n\tsslctx.useCertificateChainFile(\"server.crt\");\n\tsslctx.usePrivateKeyFile(\"server.key\");\n\tlistenTCP(1234, (conn){\n\t\tauto stream = createSSLStream(conn, sslctx);\n\t\tlogInfo(\"Got message: %s\", stream.readAllUTF8());\n\t\tstream.finalize();\n\t});\n}\n\n---\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\stream\\stdio.d",
		"members": [
			{
				"kind": "class",
				"line": 19,
				"members": [
					{
						"kind": "constructor",
						"line": 28,
						"deco": "FbbZC4vibe6stream5stdio13StdFileStream",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "b",
								"name": "read"
							},
							{
								"deco": "b",
								"name": "write"
							}
						],
						"name": "this",
						"originalType": "(bool read, bool write)",
						"endline": 32
					},
					{
						"kind": "function",
						"line": 34,
						"deco": "FS3std5stdio4FileZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "S3std5stdio4File",
								"name": "file"
							}
						],
						"name": "setup",
						"originalType": "void(std.stdio.File file)",
						"endline": 49
					},
					{
						"kind": "function",
						"line": 51,
						"storageClass": [
							"override"
						],
						"deco": "FNdZb",
						"endchar": 80,
						"char": 26,
						"name": "empty",
						"endline": 51,
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						]
					},
					{
						"kind": "function",
						"line": 53,
						"storageClass": [
							"override"
						],
						"deco": "FNdZm",
						"endchar": 2,
						"char": 27,
						"name": "leastSize",
						"endline": 57,
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						]
					},
					{
						"kind": "function",
						"line": 59,
						"storageClass": [
							"override"
						],
						"deco": "FNdZb",
						"endchar": 2,
						"char": 26,
						"name": "dataAvailableForRead",
						"endline": 63,
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						]
					},
					{
						"kind": "function",
						"line": 65,
						"storageClass": [
							"override"
						],
						"deco": "xFNdZb",
						"endchar": 75,
						"char": 26,
						"name": "connected",
						"endline": 65,
						"overrides": [
							"vibe.core.stream.ConnectionStream.connected"
						]
					},
					{
						"kind": "function",
						"line": 67,
						"storageClass": [
							"override"
						],
						"deco": "FZv",
						"endchar": 47,
						"char": 16,
						"name": "close",
						"endline": 67,
						"overrides": [
							"vibe.core.stream.ConnectionStream.close"
						]
					},
					{
						"kind": "function",
						"line": 69,
						"storageClass": [
							"override"
						],
						"deco": "FS4core4time8DurationZb",
						"endchar": 88,
						"char": 16,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							}
						],
						"name": "waitForData",
						"endline": 69,
						"overrides": [
							"vibe.core.stream.ConnectionStream.waitForData"
						]
					},
					{
						"kind": "function",
						"line": 71,
						"storageClass": [
							"override"
						],
						"deco": "FZAxh",
						"endchar": 2,
						"char": 26,
						"name": "peek",
						"endline": 75,
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						]
					},
					{
						"kind": "function",
						"line": 77,
						"storageClass": [
							"override"
						],
						"deco": "FAhZv",
						"endchar": 2,
						"char": 16,
						"parameters": [
							{
								"deco": "Ah",
								"name": "dst"
							}
						],
						"name": "read",
						"endline": 81,
						"overrides": [
							"vibe.core.stream.InputStream.read"
						]
					},
					{
						"kind": "function",
						"line": 83,
						"storageClass": [
							"override"
						],
						"deco": "FxAhZv",
						"endchar": 2,
						"char": 16,
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes_"
							}
						],
						"name": "write",
						"originalType": "void(in ubyte[] bytes_)",
						"endline": 87,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					},
					{
						"kind": "function",
						"line": 89,
						"storageClass": [
							"override"
						],
						"deco": "FZv",
						"endchar": 2,
						"char": 16,
						"name": "flush",
						"endline": 93,
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						]
					},
					{
						"kind": "function",
						"line": 95,
						"storageClass": [
							"override"
						],
						"deco": "FZv",
						"endchar": 2,
						"char": 16,
						"name": "finalize",
						"endline": 101,
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						]
					},
					{
						"kind": "function",
						"line": 103,
						"storageClass": [
							"override"
						],
						"deco": "FC4vibe4core6stream11InputStreammZv",
						"endchar": 2,
						"char": 16,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "nbytes"
							}
						],
						"name": "write",
						"originalType": "void(InputStream stream, ulong nbytes = 0)",
						"endline": 106,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					},
					{
						"kind": "function",
						"line": 108,
						"deco": "FZv",
						"endchar": 75,
						"char": 7,
						"name": "enforceReadable",
						"endline": 108
					},
					{
						"kind": "function",
						"line": 109,
						"deco": "FZv",
						"endchar": 76,
						"char": 7,
						"name": "enforceWritable",
						"endline": 109
					},
					{
						"kind": "destructor",
						"line": 19,
						"deco": "FNfZv",
						"char": 1,
						"name": "~this"
					}
				],
				"char": 1,
				"interfaces": [
					"vibe.core.stream.ConnectionStream"
				],
				"name": "StdFileStream"
			},
			{
				"kind": "class",
				"line": 163,
				"base": "vibe.stream.stdio.StdFileStream",
				"members": [
					{
						"kind": "constructor",
						"line": 164,
						"deco": "FZC4vibe6stream5stdio12StdoutStream",
						"endchar": 2,
						"char": 2,
						"name": "this",
						"originalType": "()",
						"endline": 167
					}
				],
				"char": 7,
				"name": "StdoutStream",
				"comment": "\tOutputStream that writes to stdout\n"
			},
			{
				"kind": "class",
				"line": 173,
				"base": "vibe.stream.stdio.StdFileStream",
				"members": [
					{
						"kind": "constructor",
						"line": 174,
						"deco": "FZC4vibe6stream5stdio12StderrStream",
						"endchar": 2,
						"char": 2,
						"name": "this",
						"originalType": "()",
						"endline": 177
					}
				],
				"char": 7,
				"name": "StderrStream",
				"comment": "\tOutputStream that writes to stderr\n"
			},
			{
				"kind": "class",
				"line": 183,
				"base": "vibe.stream.stdio.StdFileStream",
				"members": [
					{
						"kind": "constructor",
						"line": 184,
						"deco": "FZC4vibe6stream5stdio11StdinStream",
						"endchar": 2,
						"char": 2,
						"name": "this",
						"originalType": "()",
						"endline": 187
					}
				],
				"char": 7,
				"name": "StdinStream",
				"comment": "\tInputStream that reads from stdin\n"
			}
		],
		"name": "vibe.stream.stdio",
		"comment": "\tStandard I/O streams\n\n\tCopyright: © 2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Eric Cornelius\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\stream\\taskpipe.d",
		"members": [
			{
				"kind": "import",
				"line": 10,
				"char": 15,
				"name": "vibe.core.stream"
			},
			{
				"kind": "class",
				"line": 24,
				"members": [
					{
						"kind": "constructor",
						"line": 31,
						"deco": "FbZC4vibe6stream8taskpipe8TaskPipe",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "b",
								"default": "false",
								"name": "grow_when_full"
							}
						],
						"name": "this",
						"comment": " Constructs a new pipe ready for use.\n",
						"originalType": "(bool grow_when_full = false)",
						"endline": 34
					},
					{
						"kind": "function",
						"line": 37,
						"deco": "xFNdZk",
						"endchar": 66,
						"char": 19,
						"name": "bufferSize",
						"comment": "Size of the (fixed) FIFO buffer used to transfer data between tasks\n",
						"originalType": "const @property size_t()",
						"endline": 37
					},
					{
						"kind": "function",
						"line": 39,
						"deco": "FNdkZv",
						"endchar": 73,
						"char": 17,
						"parameters": [
							{
								"deco": "k",
								"name": "nbytes"
							}
						],
						"name": "bufferSize",
						"comment": "ditto\n",
						"originalType": "@property void(size_t nbytes)",
						"endline": 39
					},
					{
						"kind": "function",
						"line": 41,
						"deco": "FNdZb",
						"endchar": 52,
						"char": 17,
						"name": "empty",
						"endline": 41,
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						]
					},
					{
						"kind": "function",
						"line": 42,
						"deco": "FNdZm",
						"endchar": 74,
						"char": 18,
						"name": "leastSize",
						"endline": 42,
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						]
					},
					{
						"kind": "function",
						"line": 43,
						"deco": "FNdZb",
						"endchar": 66,
						"char": 17,
						"name": "dataAvailableForRead",
						"endline": 43,
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						]
					},
					{
						"kind": "function",
						"line": 44,
						"deco": "xFNdZb",
						"endchar": 57,
						"char": 17,
						"name": "connected",
						"endline": 44,
						"overrides": [
							"vibe.core.stream.ConnectionStream.connected"
						]
					},
					{
						"kind": "function",
						"line": 46,
						"deco": "FZv",
						"endchar": 33,
						"char": 7,
						"name": "close",
						"endline": 46,
						"overrides": [
							"vibe.core.stream.ConnectionStream.close"
						]
					},
					{
						"kind": "function",
						"line": 47,
						"deco": "FS4core4time8DurationZb",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							}
						],
						"name": "waitForData",
						"endline": 52,
						"overrides": [
							"vibe.core.stream.ConnectionStream.waitForData"
						]
					},
					{
						"kind": "function",
						"line": 53,
						"deco": "FZAxh",
						"endchar": 46,
						"char": 17,
						"name": "peek",
						"endline": 53,
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						]
					},
					{
						"kind": "function",
						"line": 54,
						"deco": "FAhZv",
						"endchar": 52,
						"char": 7,
						"parameters": [
							{
								"deco": "Ah",
								"name": "dst"
							}
						],
						"name": "read",
						"endline": 54,
						"overrides": [
							"vibe.core.stream.InputStream.read"
						]
					},
					{
						"kind": "function",
						"line": 55,
						"deco": "FxAhZv",
						"endchar": 54,
						"char": 7,
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							}
						],
						"name": "write",
						"originalType": "void(in ubyte[] bytes)",
						"endline": 55,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					},
					{
						"kind": "function",
						"line": 56,
						"deco": "FZv",
						"endchar": 16,
						"char": 7,
						"name": "flush",
						"endline": 56,
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						]
					},
					{
						"kind": "function",
						"line": 57,
						"deco": "FZv",
						"endchar": 36,
						"char": 7,
						"name": "finalize",
						"endline": 57,
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						]
					},
					{
						"kind": "function",
						"line": 58,
						"deco": "FC4vibe4core6stream11InputStreammZv",
						"endchar": 83,
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "nbytes"
							}
						],
						"name": "write",
						"originalType": "void(InputStream stream, ulong nbytes = 0)",
						"endline": 58,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					}
				],
				"char": 7,
				"interfaces": [
					"vibe.core.stream.ConnectionStream"
				],
				"name": "TaskPipe",
				"comment": "\tImplements a unidirectional data pipe between two tasks.\n"
			}
		],
		"name": "vibe.stream.taskpipe",
		"comment": "\tStream interface for passing data between different tasks.\n\n\tCopyright: © 2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\stream\\wrapper.d",
		"members": [
			{
				"kind": "import",
				"line": 10,
				"char": 15,
				"name": "vibe.core.stream"
			},
			{
				"kind": "class",
				"line": 20,
				"members": [
					{
						"kind": "constructor",
						"line": 27,
						"deco": "FC4vibe4core6stream6StreamZC4vibe6stream7wrapper11ProxyStream",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream6Stream",
								"default": "null",
								"name": "stream"
							}
						],
						"name": "this",
						"originalType": "(Stream stream = null)",
						"endline": 32
					},
					{
						"kind": "constructor",
						"line": 34,
						"deco": "FC4vibe4core6stream11InputStreamC4vibe4core6stream12OutputStreamZC4vibe6stream7wrapper11ProxyStream",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "input"
							},
							{
								"deco": "C4vibe4core6stream12OutputStream",
								"name": "output"
							}
						],
						"name": "this",
						"originalType": "(InputStream input, OutputStream output)",
						"endline": 38
					},
					{
						"kind": "function",
						"line": 41,
						"deco": "NgFNdZNgC4vibe4core6stream6Stream",
						"endchar": 68,
						"char": 26,
						"name": "underlying",
						"comment": "The stream that is wrapped by this one\n",
						"endline": 41
					},
					{
						"kind": "function",
						"line": 43,
						"deco": "FNdC4vibe4core6stream6StreamZv",
						"endchar": 101,
						"char": 17,
						"parameters": [
							{
								"deco": "C4vibe4core6stream6Stream",
								"name": "value"
							}
						],
						"name": "underlying",
						"comment": "ditto\n",
						"endline": 43
					},
					{
						"kind": "function",
						"line": 45,
						"deco": "FNdZb",
						"endchar": 66,
						"char": 17,
						"name": "empty",
						"endline": 45,
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						]
					},
					{
						"kind": "function",
						"line": 47,
						"deco": "FNdZm",
						"endchar": 72,
						"char": 18,
						"name": "leastSize",
						"endline": 47,
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						]
					},
					{
						"kind": "function",
						"line": 49,
						"deco": "FNdZb",
						"endchar": 97,
						"char": 17,
						"name": "dataAvailableForRead",
						"endline": 49,
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						]
					},
					{
						"kind": "function",
						"line": 51,
						"deco": "FZAxh",
						"endchar": 49,
						"char": 17,
						"name": "peek",
						"endline": 51,
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						]
					},
					{
						"kind": "function",
						"line": 53,
						"deco": "FAhZv",
						"endchar": 46,
						"char": 7,
						"parameters": [
							{
								"deco": "Ah",
								"name": "dst"
							}
						],
						"name": "read",
						"endline": 53,
						"overrides": [
							"vibe.core.stream.InputStream.read"
						]
					},
					{
						"kind": "function",
						"line": 55,
						"deco": "FxAhZv",
						"endchar": 56,
						"char": 7,
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							}
						],
						"name": "write",
						"originalType": "void(in ubyte[] bytes)",
						"endline": 55,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					},
					{
						"kind": "function",
						"line": 57,
						"deco": "FZv",
						"endchar": 35,
						"char": 7,
						"name": "flush",
						"endline": 57,
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						]
					},
					{
						"kind": "function",
						"line": 59,
						"deco": "FZv",
						"endchar": 41,
						"char": 7,
						"name": "finalize",
						"endline": 59,
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						]
					},
					{
						"kind": "function",
						"line": 61,
						"deco": "FC4vibe4core6stream11InputStreammZv",
						"endchar": 85,
						"char": 7,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "nbytes"
							}
						],
						"name": "write",
						"originalType": "void(InputStream stream, ulong nbytes = 0)",
						"endline": 61,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					}
				],
				"char": 1,
				"interfaces": [
					"vibe.core.stream.Stream"
				],
				"name": "ProxyStream",
				"comment": "\tProvides a way to access varying streams using a constant stream reference.\n"
			},
			{
				"kind": "class",
				"line": 73,
				"base": "vibe.stream.wrapper.ProxyStream",
				"members": [
					{
						"kind": "constructor",
						"line": 78,
						"deco": "FC4vibe4core6stream6StreamC4vibe4core6stream16ConnectionStreamZC4vibe6stream7wrapper21ConnectionProxyStream",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream6Stream",
								"name": "stream"
							},
							{
								"deco": "C4vibe4core6stream16ConnectionStream",
								"name": "connection_stream"
							}
						],
						"name": "this",
						"originalType": "(Stream stream, ConnectionStream connection_stream)",
						"endline": 82
					},
					{
						"kind": "function",
						"line": 84,
						"deco": "xFNdZb",
						"endchar": 68,
						"char": 17,
						"name": "connected",
						"endline": 84,
						"overrides": [
							"vibe.core.stream.ConnectionStream.connected"
						]
					},
					{
						"kind": "function",
						"line": 86,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "close",
						"endline": 90,
						"overrides": [
							"vibe.core.stream.ConnectionStream.close"
						]
					},
					{
						"kind": "function",
						"line": 92,
						"deco": "FS4core4time8DurationZb",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"default": "dur(0L)",
								"name": "timeout"
							}
						],
						"name": "waitForData",
						"originalType": "bool(Duration timeout = 0.seconds)",
						"endline": 96,
						"overrides": [
							"vibe.core.stream.ConnectionStream.waitForData"
						]
					},
					{
						"kind": "function",
						"line": 99,
						"storageClass": [
							"override"
						],
						"deco": "FxAhZv",
						"endchar": 62,
						"char": 16,
						"parameters": [
							{
								"deco": "xAh",
								"name": "bytes"
							}
						],
						"name": "write",
						"originalType": "void(in ubyte[] bytes)",
						"endline": 99,
						"overrides": [
							"vibe.stream.wrapper.ProxyStream.write",
							"vibe.core.stream.OutputStream.write"
						]
					},
					{
						"kind": "function",
						"line": 100,
						"storageClass": [
							"override"
						],
						"deco": "FZv",
						"endchar": 41,
						"char": 16,
						"name": "flush",
						"endline": 100,
						"overrides": [
							"vibe.stream.wrapper.ProxyStream.flush",
							"vibe.core.stream.OutputStream.flush"
						]
					},
					{
						"kind": "function",
						"line": 101,
						"storageClass": [
							"override"
						],
						"deco": "FZv",
						"endchar": 47,
						"char": 16,
						"name": "finalize",
						"endline": 101,
						"overrides": [
							"vibe.stream.wrapper.ProxyStream.finalize",
							"vibe.core.stream.OutputStream.finalize"
						]
					},
					{
						"kind": "function",
						"line": 102,
						"storageClass": [
							"override"
						],
						"deco": "FC4vibe4core6stream11InputStreammZv",
						"endchar": 91,
						"char": 16,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "nbytes"
							}
						],
						"name": "write",
						"originalType": "void(InputStream stream, ulong nbytes = 0)",
						"endline": 102,
						"overrides": [
							"vibe.stream.wrapper.ProxyStream.write",
							"vibe.core.stream.OutputStream.write"
						]
					}
				],
				"char": 1,
				"interfaces": [
					"vibe.core.stream.ConnectionStream"
				],
				"name": "ConnectionProxyStream",
				"comment": "\tSpecial kind of proxy stream for streams nested in a ConnectionStream.\n\n\tThis stream will forward all stream operations to the selected stream,\n\tbut will forward all connection related operations to the given\n\tConnectionStream. This allows wrapping embedded streams, such as\n\tSSL streams in a ConnectionStream.\n"
			},
			{
				"kind": "struct",
				"line": 120,
				"members": [
					{
						"kind": "constructor",
						"line": 130,
						"deco": "FNcC4vibe4core6stream11InputStreamZS4vibe6stream7wrapper16StreamInputRange",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							}
						],
						"name": "this",
						"originalType": "ref (InputStream stream)",
						"endline": 134
					},
					{
						"kind": "function",
						"line": 136,
						"deco": "FNdZb",
						"endchar": 68,
						"char": 17,
						"name": "empty",
						"endline": 136
					},
					{
						"kind": "function",
						"line": 138,
						"deco": "FZh",
						"endchar": 2,
						"char": 8,
						"name": "front",
						"endline": 142
					},
					{
						"kind": "function",
						"line": 143,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "popFront",
						"endline": 148
					}
				],
				"char": 1,
				"name": "StreamInputRange",
				"comment": "\tImplements an input range interface on top of an InputStream using an\n\tinternal buffer.\n\n\tThe buffer is GC allocated and is filled chunk wise. Thus an InputStream\n\tthat has been wrapped in a StreamInputRange cannot be used reliably on its\n\town anymore.\n\n\tReading occurs in a fully lazy fashion. The first call to either front,\n\tpopFront or empty will potentially trigger waiting for the next chunk of\n\tdata to arrive - but especially popFront will not wait if it was called\n\tafter a call to front. This property allows the range to be used in\n\trequest-response scenarios.\n"
			},
			{
				"kind": "struct",
				"line": 163,
				"members": [
					{
						"kind": "constructor",
						"line": 172,
						"deco": "FNcC4vibe4core6stream12OutputStreamZS4vibe6stream7wrapper17StreamOutputRange",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream12OutputStream",
								"name": "stream"
							}
						],
						"name": "this",
						"originalType": "ref (OutputStream stream)",
						"endline": 175
					},
					{
						"kind": "destructor",
						"line": 177,
						"deco": "FZv",
						"endchar": 2,
						"char": 2,
						"name": "~this",
						"endline": 180
					},
					{
						"kind": "function",
						"line": 182,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "flush",
						"endline": 187
					},
					{
						"kind": "function",
						"line": 189,
						"deco": "FhZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "h",
								"name": "bt"
							}
						],
						"name": "put",
						"endline": 193
					},
					{
						"kind": "function",
						"line": 195,
						"deco": "FAxhZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Axh",
								"name": "bts"
							}
						],
						"name": "put",
						"endline": 204
					},
					{
						"kind": "function",
						"line": 206,
						"deco": "FaZv",
						"endchar": 46,
						"char": 7,
						"parameters": [
							{
								"deco": "a",
								"name": "elem"
							}
						],
						"name": "put",
						"endline": 206
					},
					{
						"kind": "function",
						"line": 207,
						"deco": "FAxaZv",
						"endchar": 66,
						"char": 7,
						"parameters": [
							{
								"deco": "Axa",
								"name": "elems"
							}
						],
						"name": "put",
						"endline": 207
					},
					{
						"kind": "function",
						"line": 209,
						"deco": "FwZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "w",
								"name": "elem"
							}
						],
						"name": "put",
						"endline": 215
					},
					{
						"kind": "function",
						"line": 217,
						"deco": "FAxwZv",
						"endchar": 65,
						"char": 7,
						"parameters": [
							{
								"deco": "Axw",
								"name": "elems"
							}
						],
						"name": "put",
						"endline": 217
					},
					{
						"kind": "function",
						"line": 163,
						"deco": "FNcNjS4vibe6stream7wrapper17StreamOutputRangeZS4vibe6stream7wrapper17StreamOutputRange",
						"char": 1,
						"parameters": [
							{
								"deco": "S4vibe6stream7wrapper17StreamOutputRange",
								"name": "p"
							}
						],
						"name": "opAssign"
					}
				],
				"char": 1,
				"name": "StreamOutputRange",
				"comment": "\tImplements a buffered output range interface on top of an OutputStream.\n"
			}
		],
		"name": "vibe.stream.wrapper",
		"comment": "\tStream proxy and wrapper facilities.\n\n\tCopyright: © 2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\stream\\zlib.d",
		"members": [
			{
				"kind": "class",
				"line": 25,
				"base": "vibe.stream.zlib.ZlibOutputStream",
				"members": [
					{
						"kind": "constructor",
						"line": 26,
						"deco": "FC4vibe4core6stream12OutputStreamZC4vibe6stream4zlib19DeflateOutputStream",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream12OutputStream",
								"name": "dst"
							}
						],
						"name": "this",
						"originalType": "(OutputStream dst)",
						"endline": 29
					}
				],
				"char": 7,
				"name": "DeflateOutputStream",
				"comment": "\tWrites any data compressed in deflate format to the specified output stream.\n"
			},
			{
				"kind": "class",
				"line": 36,
				"base": "vibe.stream.zlib.ZlibOutputStream",
				"members": [
					{
						"kind": "constructor",
						"line": 37,
						"deco": "FC4vibe4core6stream12OutputStreamZC4vibe6stream4zlib16GzipOutputStream",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream12OutputStream",
								"name": "dst"
							}
						],
						"name": "this",
						"originalType": "(OutputStream dst)",
						"endline": 40
					}
				],
				"char": 7,
				"name": "GzipOutputStream",
				"comment": "\tWrites any data compressed in gzip format to the specified output stream.\n"
			},
			{
				"kind": "class",
				"line": 46,
				"members": [
					{
						"kind": "enum",
						"line": 55,
						"members": [
							{
								"kind": "enum member",
								"line": 56,
								"value": "0",
								"char": 3,
								"name": "gzip"
							},
							{
								"kind": "enum member",
								"line": 57,
								"value": "1",
								"char": 3,
								"name": "deflate"
							}
						],
						"char": 2,
						"baseDeco": "i",
						"name": "HeaderFormat"
					},
					{
						"kind": "constructor",
						"line": 60,
						"deco": "FC4vibe4core6stream12OutputStreamE4vibe6stream4zlib16ZlibOutputStream12HeaderFormatiZC4vibe6stream4zlib16ZlibOutputStream",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream12OutputStream",
								"name": "dst"
							},
							{
								"deco": "E4vibe6stream4zlib16ZlibOutputStream12HeaderFormat",
								"name": "type"
							},
							{
								"deco": "i",
								"default": "-1",
								"name": "level"
							}
						],
						"name": "this",
						"originalType": "(OutputStream dst, HeaderFormat type, int level = Z_DEFAULT_COMPRESSION)",
						"endline": 64
					},
					{
						"kind": "function",
						"line": 66,
						"storageClass": [
							"final"
						],
						"deco": "FxAhZv",
						"endchar": 2,
						"char": 13,
						"parameters": [
							{
								"deco": "xAh",
								"name": "data"
							}
						],
						"name": "write",
						"originalType": "void(in ubyte[] data)",
						"endline": 77,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					},
					{
						"kind": "function",
						"line": 79,
						"storageClass": [
							"final"
						],
						"deco": "FC4vibe4core6stream11InputStreammZv",
						"endchar": 2,
						"char": 13,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "stream"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "nbytes"
							}
						],
						"name": "write",
						"originalType": "void(InputStream stream, ulong nbytes = 0)",
						"endline": 82,
						"overrides": [
							"vibe.core.stream.OutputStream.write"
						]
					},
					{
						"kind": "function",
						"line": 84,
						"storageClass": [
							"final"
						],
						"deco": "FZv",
						"endchar": 2,
						"char": 13,
						"name": "flush",
						"endline": 89,
						"overrides": [
							"vibe.core.stream.OutputStream.flush"
						]
					},
					{
						"kind": "function",
						"line": 91,
						"storageClass": [
							"final"
						],
						"deco": "FZv",
						"endchar": 2,
						"char": 13,
						"name": "finalize",
						"endline": 98,
						"overrides": [
							"vibe.core.stream.OutputStream.finalize"
						]
					}
				],
				"char": 1,
				"interfaces": [
					"vibe.core.stream.OutputStream"
				],
				"name": "ZlibOutputStream",
				"comment": "\tGeneric zlib output stream.\n"
			},
			{
				"kind": "class",
				"line": 133,
				"base": "vibe.stream.zlib.ZlibInputStream",
				"members": [
					{
						"kind": "constructor",
						"line": 134,
						"deco": "FC4vibe4core6stream11InputStreamZC4vibe6stream4zlib18DeflateInputStream",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "dst"
							}
						],
						"name": "this",
						"originalType": "(InputStream dst)",
						"endline": 137
					}
				],
				"char": 1,
				"name": "DeflateInputStream",
				"comment": "\tTakes an input stream that contains data in deflate compressed format and outputs the\n\tuncompressed data.\n"
			},
			{
				"kind": "class",
				"line": 145,
				"base": "vibe.stream.zlib.ZlibInputStream",
				"members": [
					{
						"kind": "constructor",
						"line": 146,
						"deco": "FC4vibe4core6stream11InputStreamZC4vibe6stream4zlib15GzipInputStream",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "dst"
							}
						],
						"name": "this",
						"originalType": "(InputStream dst)",
						"endline": 149
					}
				],
				"char": 1,
				"name": "GzipInputStream",
				"comment": "\tTakes an input stream that contains data in gzip compressed format and outputs the\n\tuncompressed data.\n"
			},
			{
				"kind": "class",
				"line": 156,
				"members": [
					{
						"kind": "enum",
						"line": 167,
						"members": [
							{
								"kind": "enum member",
								"line": 168,
								"value": "0",
								"char": 3,
								"name": "gzip"
							},
							{
								"kind": "enum member",
								"line": 169,
								"value": "1",
								"char": 3,
								"name": "deflate"
							},
							{
								"kind": "enum member",
								"line": 170,
								"value": "2",
								"char": 3,
								"name": "automatic"
							}
						],
						"char": 2,
						"baseDeco": "i",
						"name": "HeaderFormat"
					},
					{
						"kind": "constructor",
						"line": 173,
						"deco": "FC4vibe4core6stream11InputStreamE4vibe6stream4zlib15ZlibInputStream12HeaderFormatZC4vibe6stream4zlib15ZlibInputStream",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe4core6stream11InputStream",
								"name": "src"
							},
							{
								"deco": "E4vibe6stream4zlib15ZlibInputStream12HeaderFormat",
								"name": "type"
							}
						],
						"name": "this",
						"originalType": "(InputStream src, HeaderFormat type)",
						"endline": 185
					},
					{
						"kind": "function",
						"line": 187,
						"deco": "FNdZb",
						"endchar": 55,
						"char": 17,
						"name": "empty",
						"endline": 187,
						"overrides": [
							"vibe.core.stream.InputStream.empty"
						]
					},
					{
						"kind": "function",
						"line": 189,
						"deco": "FNdZm",
						"endchar": 2,
						"char": 18,
						"name": "leastSize",
						"endline": 197,
						"overrides": [
							"vibe.core.stream.InputStream.leastSize"
						]
					},
					{
						"kind": "function",
						"line": 199,
						"deco": "FNdZb",
						"endchar": 2,
						"char": 17,
						"name": "dataAvailableForRead",
						"endline": 202,
						"overrides": [
							"vibe.core.stream.InputStream.dataAvailableForRead"
						]
					},
					{
						"kind": "function",
						"line": 204,
						"deco": "FZAxh",
						"endchar": 53,
						"char": 17,
						"name": "peek",
						"endline": 204,
						"overrides": [
							"vibe.core.stream.InputStream.peek"
						]
					},
					{
						"kind": "function",
						"line": 206,
						"deco": "FAhZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Ah",
								"name": "dst"
							}
						],
						"name": "read",
						"endline": 218,
						"overrides": [
							"vibe.core.stream.InputStream.read"
						]
					},
					{
						"kind": "function",
						"line": 220,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "readChunk",
						"endline": 252
					}
				],
				"char": 1,
				"interfaces": [
					"vibe.core.stream.InputStream"
				],
				"name": "ZlibInputStream",
				"comment": "\tGeneric zlib input stream.\n"
			}
		],
		"name": "vibe.stream.zlib",
		"comment": "\tZlib input/output streams\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\templ\\diet.d",
		"members": [
			{
				"kind": "import",
				"line": 14,
				"char": 15,
				"name": "vibe.core.stream"
			},
			{
				"kind": "template",
				"line": 49,
				"members": [
					{
						"kind": "function",
						"line": 49,
						"endchar": 1,
						"char": 6,
						"type": "void(OutputStream stream__)",
						"parameters": [
							{
								"type": "OutputStream",
								"name": "stream__"
							}
						],
						"name": "compileDietFile",
						"endline": 52
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "template_file"
					},
					{
						"kind": "tuple",
						"name": "ALIASES"
					}
				],
				"comment": "\tParses the given diet template at compile time and writes the resulting\n\tHTML code into 'stream'.\n\n\tNote that this function suffers from multiple compiler bugsin conjunction with local\n\tvariables passed as alias template parameters up to DMD 2.063.2. DMD 2.064 supposedly\n\thas these fixed.\n",
				"name": "compileDietFile"
			},
			{
				"kind": "template",
				"line": 54,
				"members": [
					{
						"kind": "function",
						"line": 54,
						"endchar": 1,
						"char": 6,
						"type": "void(OutputStream stream__)",
						"parameters": [
							{
								"type": "OutputStream",
								"name": "stream__"
							}
						],
						"name": "compileDietFileIndent",
						"endline": 81
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "template_file"
					},
					{
						"kind": "value",
						"deco": "k",
						"name": "indent"
					},
					{
						"kind": "tuple",
						"name": "ALIASES"
					}
				],
				"comment": "ditto\n",
				"name": "compileDietFileIndent"
			},
			{
				"kind": "alias",
				"line": 84,
				"char": 1,
				"name": "parseDietFile",
				"comment": "compatibility alias\n"
			},
			{
				"kind": "template",
				"line": 92,
				"members": [
					{
						"kind": "function",
						"line": 92,
						"endchar": 1,
						"char": 6,
						"type": "void(OutputStream stream__, ...)",
						"parameters": [
							{
								"type": "OutputStream",
								"name": "stream__"
							}
						],
						"name": "compileDietFileCompat",
						"endline": 95
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "template_file"
					},
					{
						"kind": "tuple",
						"name": "TYPES_AND_NAMES"
					}
				],
				"comment": "\tCompatibility version of parseDietFile().\n\n\tThis function should only be called indirectly through HTTPServerResponse.renderCompat().\n\n",
				"name": "compileDietFileCompat"
			},
			{
				"kind": "template",
				"line": 97,
				"members": [
					{
						"kind": "function",
						"line": 97,
						"endchar": 1,
						"char": 6,
						"type": "void(OutputStream stream__, va_list _argptr, TypeInfo[] _arguments)",
						"parameters": [
							{
								"type": "OutputStream",
								"name": "stream__"
							},
							{
								"type": "va_list",
								"name": "_argptr"
							},
							{
								"type": "TypeInfo[]",
								"name": "_arguments"
							}
						],
						"name": "compileDietFileCompatV",
						"endline": 116
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "template_file"
					},
					{
						"kind": "tuple",
						"name": "TYPES_AND_NAMES"
					}
				],
				"comment": "ditto\n",
				"name": "compileDietFileCompatV"
			},
			{
				"kind": "alias",
				"line": 119,
				"char": 1,
				"name": "parseDietFileCompat",
				"comment": "compatibility alias\n"
			},
			{
				"kind": "template",
				"line": 145,
				"members": [
					{
						"kind": "variable",
						"line": 147,
						"init": "\"import vibe.stream.wrapper;\\x0a\" ~ \"OutputStream stream__ = \" ~ stream_variable ~ \";\\x0a\" ~ \"auto output__ = StreamOutputRange(stream__);\\x0a\" ~ dietParser!template_file(base_indent)",
						"storageClass": [
							"enum"
						],
						"char": 7,
						"name": "compileDietFileMixin"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "template_file"
					},
					{
						"kind": "value",
						"deco": "Aya",
						"name": "stream_variable"
					},
					{
						"kind": "value",
						"defaultValue": "0",
						"deco": "k",
						"name": "base_indent"
					}
				],
				"comment": "\tGenerates a diet template compiler to use as a mixin.\n\n\tThis can be used as an alternative to compileDietFile or compileDietFileCompat. It allows\n\tthe template to use all symbols visible in the enclosing scope. In situations where many\n\tvariables from the calling function's scope are used within the template, it can reduce the\n\tamount of code required for invoking the template.\n\n\tNote that even if this method of using diet templates can reduce the amount of source code. It\n\tis generally recommended to use compileDietFile(Compat) instead, as those\n\tfacilitate a cleaner interface between D code and diet code by explicity documenting the\n\tsymbols usable inside of the template and thus avoiding unwanted, hidden dependencies. A\n\tpossible alternative for passing many variables is to pass a struct or class value to\n\tcompileDietFile(Compat).\n\n\tExamples:\n\t---\n\tvoid handleRequest(HTTPServerRequest req, HTTPServerResponse res)\n\t{\n\t\tint this_variable_is_automatically_visible_to_the_template;\n\t\tmixin(compileDietFileMixin!(\"index.dt\", \"res.bodyWriter\"));\n\t}\n\t---\n",
				"name": "compileDietFileMixin"
			},
			{
				"kind": "template",
				"line": 158,
				"members": [
					{
						"kind": "function",
						"line": 158,
						"endchar": 1,
						"char": 6,
						"type": "void(OutputStream stream__)",
						"parameters": [
							{
								"type": "OutputStream",
								"name": "stream__"
							}
						],
						"name": "compileDietString",
						"endline": 177
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "diet_code"
					},
					{
						"kind": "tuple",
						"name": "ALIASES"
					}
				],
				"comment": "\tThe same as compileDietFile, but taking a Diet source code string instead of a file name.\n",
				"name": "compileDietString"
			},
			{
				"kind": "function",
				"line": 211,
				"deco": "FAyaPFAyakZAyaZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "name"
					},
					{
						"deco": "PFAyakZAya",
						"name": "filter"
					}
				],
				"name": "registerDietTextFilter",
				"comment": "\tRegisters a new text filter for use in Diet templates.\n\n\tThe filter will be available using :filtername inside of the template. The following filters are\n\tpredefined: css, javascript, markdown, htmlescape\n",
				"originalType": "void(string name, string function(string, size_t indent) filter)",
				"endline": 214
			},
			{
				"kind": "template",
				"line": 1414,
				"members": [
					{
						"kind": "function",
						"line": 1414,
						"endchar": 1,
						"char": 8,
						"type": "string(T v)",
						"parameters": [
							{
								"type": "T",
								"name": "v"
							}
						],
						"name": "_toString",
						"endline": 1422
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Internal function used for converting an interpolation expression to string\n",
				"name": "_toString"
			}
		],
		"name": "vibe.templ.diet",
		"comment": "\tImplements a compile-time Diet template parser.\n\n\tDiet templates are an more or less compatible incarnation of Jade templates but with\n\tembedded D source instead of JavaScript. The Diet syntax reference is found at\n\t$(LINK http://vibed.org/templates/diet).\n\n\tCopyright: © 2012-2015 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\templ\\parsertools.d",
		"members": [
			{
				"kind": "struct",
				"line": 15,
				"members": [
					{
						"kind": "variable",
						"line": 16,
						"deco": "Aya",
						"char": 9,
						"name": "file",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 17,
						"deco": "i",
						"char": 6,
						"name": "number",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 18,
						"deco": "Aya",
						"char": 9,
						"name": "text",
						"offset": 12
					}
				],
				"char": 1,
				"name": "Line"
			},
			{
				"kind": "function",
				"line": 22,
				"deco": "FKxS4vibe5templ11parsertools4LinebAyaAyaiZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xS4vibe5templ11parsertools4Line",
						"storageClass": [
							"ref"
						],
						"name": "ln"
					},
					{
						"deco": "b",
						"name": "cond"
					},
					{
						"deco": "Aya",
						"default": "null",
						"name": "text"
					},
					{
						"deco": "Aya",
						"default": "__FILE__",
						"name": "file"
					},
					{
						"deco": "i",
						"default": "__LINE__",
						"name": "line"
					}
				],
				"name": "assert_ln",
				"originalType": "void(ref Line ln, bool cond, string text = null, string file = __FILE__, int line = __LINE__)",
				"endline": 26
			},
			{
				"kind": "function",
				"line": 29,
				"deco": "FKxAyaKxAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"ref"
						],
						"name": "str"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"ref"
						],
						"name": "indent"
					}
				],
				"name": "unindent",
				"originalType": "string(ref string str, ref string indent)",
				"endline": 33
			},
			{
				"kind": "function",
				"line": 35,
				"deco": "FKxAyaKxAyaZi",
				"endchar": 1,
				"char": 5,
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"ref"
						],
						"name": "s"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"ref"
						],
						"name": "indent"
					}
				],
				"name": "indentLevel",
				"originalType": "int(ref string s, ref string indent)",
				"endline": 42
			},
			{
				"kind": "function",
				"line": 45,
				"deco": "FKxS4vibe5templ11parsertools4LineZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "xS4vibe5templ11parsertools4Line",
						"storageClass": [
							"ref"
						],
						"name": "ln"
					}
				],
				"name": "lineMarker",
				"originalType": "string(ref Line ln)",
				"endline": 49
			},
			{
				"kind": "function",
				"line": 52,
				"deco": "FaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "a",
						"name": "ch"
					}
				],
				"name": "dstringEscape",
				"endline": 62
			},
			{
				"kind": "function",
				"line": 64,
				"deco": "FAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "str"
					}
				],
				"name": "sanitizeEscaping",
				"endline": 68
			},
			{
				"kind": "function",
				"line": 70,
				"deco": "FKxAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"ref"
						],
						"name": "str"
					}
				],
				"name": "dstringEscape",
				"originalType": "string(ref string str)",
				"endline": 75
			},
			{
				"kind": "function",
				"line": 77,
				"deco": "FxAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "xAya",
						"name": "str"
					}
				],
				"name": "dstringUnescape",
				"originalType": "string(in string str)",
				"endline": 102
			},
			{
				"kind": "function",
				"line": 105,
				"deco": "FAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "s"
					}
				],
				"name": "ctstrip",
				"endline": 111
			},
			{
				"kind": "function",
				"line": 113,
				"deco": "FKxAS4vibe5templ11parsertools4LineZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "xAS4vibe5templ11parsertools4Line",
						"storageClass": [
							"ref"
						],
						"name": "lines"
					}
				],
				"name": "detectIndentStyle",
				"originalType": "string(ref Line[] lines)",
				"endline": 133
			},
			{
				"kind": "function",
				"line": 135,
				"deco": "FAyaAyaZAS4vibe5templ11parsertools4Line",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "text"
					},
					{
						"deco": "Aya",
						"name": "file"
					}
				],
				"name": "removeEmptyLines",
				"endline": 167
			}
		],
		"name": "vibe.templ.parsertools",
		"comment": "\tContains useful functions for template the template parser implementations.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\templ\\utils.d",
		"members": [
			{
				"kind": "template",
				"line": 62,
				"members": [
					{
						"kind": "function",
						"line": 62,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 16,
						"type": "@property ()",
						"name": "inject",
						"endline": 65
					}
				],
				"char": 16,
				"parameters": [
					{
						"kind": "alias",
						"name": "Page"
					},
					{
						"kind": "tuple",
						"name": "Injectors"
					}
				],
				"comment": "\tAllows to pass additional variables to a function that renders a templated page.\n\n\tThis function is useful if you need to support additional layers of functionality that should\n\tbe available to your views, such as authentication. This function allows to define variables\n\tthat should be usable from templates using so called \"injectors\". Each injector is a template\n\tfunction that can add its own parameters.\n\n\tIf you should need explicit access to one of the parameters of an upstream injector, you can use\n\tthe InjectedParams!() template.\n\n\tNOTE: this function requires at least DMD 2.064, as it suffers from DMD BUG 2962/10086/10857.\n\n\tExamples:\n\n\t\tThe following example will render the template \"home.dt\" and make the variables 'userinfo',\n\t\t'something_else' and 'message' available. Before the 'page' function is called,\n\t\t'authInjector' and 'somethingInjector' can process the request and decide what to do.\n\n\t\t---\n\t\tvoid authInjector(alias Next, Aliases...)(HTTPServerRequest req, HTTPServerResponse res)\n\t\t{\n\t\t\tstring userinfo;\n\t\t\t// TODO: fill userinfo with content, throw an Unauthorized HTTP error etc.\n\t\t\tNext!(Aliases, userinfo)(req, res);\n\t\t}\n\n\t\tvoid somethingInjector(alias Next, Aliases...)(HTTPServerRequest req, HTTPServerResponse res)\n\t\t{\n\t\t\tstring something_else;\n\t\t\tNext!(Aliases, something_else)(req, res);\n\t\t}\n\n\t\tvoid page(Aliases...)(HTTPServerRequest req, HTTPServerResponse res)\n\t\t{\n\t\t\tstring message = \"Welcome to the example page!\"\n\t\t\tres.render!(\"home.dt\", Aliases, message);\n\t\t}\n\n\t\tstatic this()\n\t\t{\n\t\t\tauto router = new URLRouter;\n\t\t\trouter.get(\"/\", inject!(page, authInjector, somethingInjector));\n\t\t}\n\t\t---\n",
				"name": "inject"
			},
			{
				"kind": "template",
				"line": 95,
				"members": [
					{
						"kind": "struct",
						"line": 95,
						"members": [],
						"char": 1,
						"name": "InjectedParams"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Aliases"
					}
				],
				"comment": "\tMakes the variable aliases passed to one of the injectors of the inject!() template accessible\n\tto the local function.\n\n\tExamples:\n\t\t---\n\t\tvoid authInjector(alias Next, Aliases...)(HTTPServerRequest req, HTTPServerResponse res)\n\t\t{\n\t\t\tstring userinfo;\n\t\t\t// TODO: fill userinfo with content, throw an Unauthorized HTTP error etc.\n\t\t\tNext!(Aliases, userinfo)(req, res);\n\t\t}\n\n\t\tvoid somethingInjector(alias Next, Aliases...)(HTTPServerRequest req, HTTPServerResponse res)\n\t\t{\n\t\t\t// access the userinfo variable:\n\t\t\tif( InjectedParams!Aliases.userinfo.length == 0 ) return;\n\n\t\t\t// it's also possible to declare a pseudo-\n\t\t\t// variable like this to access the parameters:\n\t\t\tInjectedParams!Aliases params;\n\t\t\tif( params.userinfo == \"peter\" )\n\t\t\t\tthrow Exception(\"Not allowed!\")\n\n\t\t\tNext!(Aliases)(req, res);\n\t\t}\n\t\t---\n",
				"name": "InjectedParams"
			},
			{
				"kind": "template",
				"line": 101,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "value",
						"deco": "i",
						"name": "i"
					},
					{
						"kind": "tuple",
						"name": "ALIASES"
					}
				],
				"comment": "When mixed in, makes all ALIASES available in the local scope\n",
				"name": "localAliases"
			},
			{
				"kind": "template",
				"line": 113,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "value",
						"deco": "i",
						"name": "i"
					},
					{
						"kind": "tuple",
						"name": "TYPES_AND_NAMES"
					}
				],
				"comment": "When mixed in, makes all ALIASES available in the local scope. Note that there must be a\n\nVariant[] args__ available that matches TYPES_AND_NAMES\n",
				"name": "localAliasesCompat"
			},
			{
				"kind": "template",
				"line": 134,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"name": "Rebindable2"
			}
		],
		"name": "vibe.templ.utils",
		"comment": "\tUtility functions for dealing with templates.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\textfilter\\html.d",
		"members": [
			{
				"kind": "template",
				"line": 19,
				"constraint": "isInputRange!R",
				"members": [
					{
						"kind": "function",
						"line": 19,
						"endchar": 1,
						"char": 8,
						"type": "string(R str)",
						"parameters": [
							{
								"type": "R",
								"name": "str"
							}
						],
						"name": "htmlEscape",
						"endline": 31
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": " Returns the HTML escaped version of a given string.\nExample:\n\n---\nassert(htmlEscape(`\"Hello\", <World>!`) == `\"Hello\", &lt;World&gt;!`);\n\n---\n",
				"name": "htmlEscape"
			},
			{
				"kind": "template",
				"line": 41,
				"constraint": "isOutputRange!(R, dchar) && isInputRange!S",
				"members": [
					{
						"kind": "function",
						"line": 41,
						"endchar": 1,
						"char": 6,
						"type": "void(ref R dst, S str, HTMLEscapeFlags flags = HTMLEscapeFlags.escapeNewline)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "dst"
							},
							{
								"type": "S",
								"name": "str"
							},
							{
								"default": "HTMLEscapeFlags.escapeNewline",
								"type": "HTMLEscapeFlags",
								"name": "flags"
							}
						],
						"name": "filterHTMLEscape",
						"endline": 46
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": " Writes the HTML escaped version of a given string to an output range.\n",
				"name": "filterHTMLEscape"
			},
			{
				"kind": "template",
				"line": 51,
				"constraint": "isInputRange!R",
				"members": [
					{
						"kind": "function",
						"line": 51,
						"endchar": 1,
						"char": 8,
						"type": "string(R str)",
						"parameters": [
							{
								"type": "R",
								"name": "str"
							}
						],
						"name": "htmlAttribEscape",
						"endline": 63
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": " Returns the HTML escaped version of a given string (also escapes double quotes).\nExample:\n\n---\nassert(htmlAttribEscape(`\"Hello\", <World>!`) == `&quot;Hello&quot;, &lt;World&gt;!`);\n\n---\n",
				"name": "htmlAttribEscape"
			},
			{
				"kind": "template",
				"line": 73,
				"constraint": "isOutputRange!(R, dchar) && isInputRange!S",
				"members": [
					{
						"kind": "function",
						"line": 73,
						"endchar": 1,
						"char": 6,
						"type": "void(ref R dst, S str)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "dst"
							},
							{
								"type": "S",
								"name": "str"
							}
						],
						"name": "filterHTMLAttribEscape",
						"endline": 78
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": " Writes the HTML escaped version of a given string to an output range (also escapes double quotes).\n",
				"name": "filterHTMLAttribEscape"
			},
			{
				"kind": "template",
				"line": 83,
				"constraint": "isInputRange!R",
				"members": [
					{
						"kind": "function",
						"line": 83,
						"endchar": 1,
						"char": 8,
						"type": "string(R str)",
						"parameters": [
							{
								"type": "R",
								"name": "str"
							}
						],
						"name": "htmlAllEscape",
						"endline": 95
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": " Returns the HTML escaped version of a given string (escapes every character).\nExample:\n\n---\nassert(htmlAllEscape(\"Hello!\") == \"&#72;&#101;&#108;&#108;&#111;&#33;\");\n\n---\n",
				"name": "htmlAllEscape"
			},
			{
				"kind": "template",
				"line": 105,
				"constraint": "isOutputRange!(R, dchar) && isInputRange!S",
				"members": [
					{
						"kind": "function",
						"line": 105,
						"endchar": 1,
						"char": 6,
						"type": "void(ref R dst, S str)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "dst"
							},
							{
								"type": "S",
								"name": "str"
							}
						],
						"name": "filterHTMLAllEscape",
						"endline": 113
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": " Writes the HTML escaped version of a given string to an output range (escapes every character).\n",
				"name": "filterHTMLAllEscape"
			},
			{
				"kind": "template",
				"line": 119,
				"constraint": "isInputRange!R",
				"members": [
					{
						"kind": "function",
						"line": 119,
						"endchar": 1,
						"char": 8,
						"type": "string(R str)",
						"parameters": [
							{
								"type": "R",
								"name": "str"
							}
						],
						"name": "htmlEscapeMin",
						"endline": 126
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "\tMinimally escapes a text so that no HTML tags appear in it.\n",
				"name": "htmlEscapeMin"
			},
			{
				"kind": "template",
				"line": 132,
				"members": [
					{
						"kind": "function",
						"line": 132,
						"endchar": 1,
						"char": 6,
						"type": "void(ref R dst, dchar ch, HTMLEscapeFlags flags = HTMLEscapeFlags.escapeNewline)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "dst"
							},
							{
								"deco": "w",
								"name": "ch"
							},
							{
								"default": "HTMLEscapeFlags.escapeNewline",
								"type": "HTMLEscapeFlags",
								"name": "flags"
							}
						],
						"name": "filterHTMLEscape",
						"endline": 169
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "\tWrites the HTML escaped version of a character to an output range.\n",
				"name": "filterHTMLEscape"
			},
			{
				"kind": "enum",
				"line": 172,
				"members": [
					{
						"kind": "enum member",
						"line": 173,
						"value": "0",
						"char": 2,
						"name": "escapeMinimal"
					},
					{
						"kind": "enum member",
						"line": 174,
						"value": "1",
						"char": 2,
						"name": "escapeQuotes"
					},
					{
						"kind": "enum member",
						"line": 175,
						"value": "2",
						"char": 2,
						"name": "escapeNewline"
					},
					{
						"kind": "enum member",
						"line": 176,
						"value": "4",
						"char": 2,
						"name": "escapeUnknown"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "HTMLEscapeFlags"
			}
		],
		"name": "vibe.textfilter.html",
		"comment": "\tHTML character entity escaping.\n\n\tTODO: Make things @safe once Appender is.\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\textfilter\\markdown.d",
		"members": [
			{
				"kind": "template",
				"line": 43,
				"members": [
					{
						"kind": "function",
						"line": 43,
						"endchar": 1,
						"char": 8,
						"type": "string(string str, MarkdownFlags flags)",
						"parameters": [
							{
								"type": "string",
								"name": "str"
							},
							{
								"type": "MarkdownFlags",
								"name": "flags"
							}
						],
						"name": "filterMarkdown",
						"endline": 48
					}
				],
				"char": 8,
				"parameters": [],
				"comment": " Returns a Markdown filtered HTML string.\n",
				"name": "filterMarkdown"
			},
			{
				"kind": "template",
				"line": 50,
				"members": [
					{
						"kind": "function",
						"line": 50,
						"endchar": 1,
						"char": 8,
						"type": "@trusted string(string str, scope MarkdownSettings settings = null)",
						"parameters": [
							{
								"type": "string",
								"name": "str"
							},
							{
								"storageClass": [
									"scope"
								],
								"default": "null",
								"type": "MarkdownSettings",
								"name": "settings"
							}
						],
						"name": "filterMarkdown",
						"endline": 55
					}
				],
				"char": 8,
				"parameters": [],
				"comment": "ditto\n",
				"name": "filterMarkdown"
			},
			{
				"kind": "template",
				"line": 60,
				"members": [
					{
						"kind": "function",
						"line": 60,
						"endchar": 1,
						"char": 6,
						"type": "void(ref R dst, string src, MarkdownFlags flags)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "dst"
							},
							{
								"type": "string",
								"name": "src"
							},
							{
								"type": "MarkdownFlags",
								"name": "flags"
							}
						],
						"name": "filterMarkdown",
						"endline": 65
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": " Markdown filters the given string and writes the corresponding HTML to an output range.\n",
				"name": "filterMarkdown"
			},
			{
				"kind": "template",
				"line": 67,
				"members": [
					{
						"kind": "function",
						"line": 67,
						"endchar": 1,
						"char": 6,
						"type": "void(ref R dst, string src, scope MarkdownSettings settings = null)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "dst"
							},
							{
								"type": "string",
								"name": "src"
							},
							{
								"storageClass": [
									"scope"
								],
								"default": "null",
								"type": "MarkdownSettings",
								"name": "settings"
							}
						],
						"name": "filterMarkdown",
						"endline": 78
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "ditto\n",
				"name": "filterMarkdown"
			},
			{
				"kind": "class",
				"line": 80,
				"members": [
					{
						"kind": "variable",
						"line": 81,
						"init": "cast(MarkdownFlags)0",
						"deco": "E4vibe10textfilter8markdown13MarkdownFlags",
						"char": 16,
						"name": "flags",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 82,
						"init": "1u",
						"deco": "k",
						"char": 9,
						"name": "headingBaseLevel",
						"originalType": "size_t",
						"offset": 12
					}
				],
				"char": 7,
				"name": "MarkdownSettings"
			},
			{
				"kind": "enum",
				"line": 85,
				"members": [
					{
						"kind": "enum member",
						"line": 86,
						"value": "0",
						"char": 2,
						"name": "none"
					},
					{
						"kind": "enum member",
						"line": 87,
						"value": "1",
						"char": 2,
						"name": "keepLineBreaks"
					},
					{
						"kind": "enum member",
						"line": 88,
						"value": "2",
						"char": 2,
						"name": "backtickCodeBlocks"
					},
					{
						"kind": "enum member",
						"line": 89,
						"value": "4",
						"char": 2,
						"name": "noInlineHtml"
					},
					{
						"kind": "enum member",
						"line": 92,
						"value": "0",
						"char": 2,
						"name": "vanillaMarkdown"
					},
					{
						"kind": "enum member",
						"line": 93,
						"value": "7",
						"char": 2,
						"name": "forumDefault"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "MarkdownFlags"
			}
		],
		"name": "vibe.textfilter.markdown",
		"comment": "\tMarkdown parser implementation\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\textfilter\\urlencode.d",
		"members": [
			{
				"kind": "function",
				"line": 21,
				"deco": "FNfAyaAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "str"
					},
					{
						"deco": "Aya",
						"default": "null",
						"name": "allowed_chars"
					}
				],
				"name": "urlEncode",
				"comment": " Returns the URL encoded version of a given string.\n",
				"endline": 27
			},
			{
				"kind": "function",
				"line": 31,
				"deco": "FNfAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "str"
					}
				],
				"name": "urlDecode",
				"comment": " Returns the decoded version of a given URL encoded string.\n",
				"endline": 38
			},
			{
				"kind": "function",
				"line": 48,
				"deco": "FNfAyaAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "str"
					},
					{
						"deco": "Aya",
						"default": "null",
						"name": "allowed_chars"
					}
				],
				"name": "formEncode",
				"comment": " Returns the form encoded version of a given string.\n\n\tForm encoding is the same as normal URL encoding, except that\n\tspaces are replaced by plus characters.\n\n\tNote that newlines should always be represented as \\r\\n sequences\n\taccording to the HTTP standard.\n",
				"endline": 54
			},
			{
				"kind": "function",
				"line": 61,
				"deco": "FNfAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "str"
					}
				],
				"name": "formDecode",
				"comment": " Returns the decoded version of a form encoded string.\n\n\tForm encoding is the same as normal URL encoding, except that\n\tspaces are replaced by plus characters.\n",
				"endline": 68
			},
			{
				"kind": "template",
				"line": 72,
				"members": [
					{
						"kind": "function",
						"line": 72,
						"endchar": 1,
						"char": 6,
						"type": "void(ref R dst, string str, string allowed_chars = null, bool form_encoding = false)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "dst"
							},
							{
								"type": "string",
								"name": "str"
							},
							{
								"default": "null",
								"type": "string",
								"name": "allowed_chars"
							},
							{
								"deco": "b",
								"default": "false",
								"name": "form_encoding"
							}
						],
						"name": "filterURLEncode",
						"endline": 94
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": " Writes the URL encoded version of the given string to an output range.\n",
				"name": "filterURLEncode"
			},
			{
				"kind": "template",
				"line": 99,
				"members": [
					{
						"kind": "function",
						"line": 99,
						"endchar": 1,
						"char": 6,
						"type": "void(ref R dst, string str, bool form_encoding = false)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "dst"
							},
							{
								"type": "string",
								"name": "str"
							},
							{
								"deco": "b",
								"default": "false",
								"name": "form_encoding"
							}
						],
						"name": "filterURLDecode",
						"endline": 124
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": " Writes the decoded version of the given URL encoded string to an output range.\n",
				"name": "filterURLDecode"
			}
		],
		"name": "vibe.textfilter.urlencode",
		"comment": "\tURL-encoding implementation\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Jan Krüger, Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\utils\\array.d",
		"members": [
			{
				"kind": "template",
				"line": 18,
				"members": [
					{
						"kind": "function",
						"line": 18,
						"endchar": 1,
						"char": 6,
						"type": "void(ref T[] array, T item)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "T[]",
								"name": "array"
							},
							{
								"type": "T",
								"name": "item"
							}
						],
						"name": "removeFromArray",
						"endline": 25
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"name": "removeFromArray"
			},
			{
				"kind": "template",
				"line": 27,
				"members": [
					{
						"kind": "function",
						"line": 27,
						"endchar": 1,
						"char": 6,
						"type": "void(ref T[] array, size_t idx)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "T[]",
								"name": "array"
							},
							{
								"type": "size_t",
								"name": "idx"
							}
						],
						"name": "removeFromArrayIdx",
						"endline": 32
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"name": "removeFromArrayIdx"
			},
			{
				"kind": "enum",
				"line": 34,
				"members": [
					{
						"kind": "enum member",
						"line": 35,
						"value": "0",
						"char": 2,
						"name": "keepData"
					},
					{
						"kind": "enum member",
						"line": 36,
						"value": "1",
						"char": 2,
						"name": "freeData"
					},
					{
						"kind": "enum member",
						"line": 37,
						"value": "2",
						"char": 2,
						"name": "reuseData"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "AppenderResetMode"
			},
			{
				"kind": "template",
				"line": 40,
				"members": [
					{
						"kind": "struct",
						"line": 40,
						"members": [
							{
								"kind": "alias",
								"line": 41,
								"char": 2,
								"type": "Unqual!E",
								"name": "ElemType"
							},
							{
								"kind": "variable",
								"line": 46,
								"char": 14,
								"type": "ElemType[]",
								"name": "m_data"
							},
							{
								"kind": "variable",
								"line": 47,
								"char": 14,
								"type": "ElemType[]",
								"name": "m_remaining"
							},
							{
								"kind": "variable",
								"line": 48,
								"char": 13,
								"type": "Allocator",
								"name": "m_alloc"
							},
							{
								"kind": "variable",
								"line": 49,
								"init": "false",
								"deco": "b",
								"char": 8,
								"name": "m_allocatedBuffer"
							},
							{
								"kind": "constructor",
								"line": 52,
								"endchar": 2,
								"char": 2,
								"type": "(Allocator alloc, ElemType[] initial_buffer = null)",
								"parameters": [
									{
										"type": "Allocator",
										"name": "alloc"
									},
									{
										"default": "null",
										"type": "ElemType[]",
										"name": "initial_buffer"
									}
								],
								"name": "this",
								"endline": 57
							},
							{
								"kind": "function",
								"line": 61,
								"endchar": 102,
								"char": 22,
								"type": "@property ArrayType()",
								"name": "data",
								"endline": 61
							},
							{
								"kind": "function",
								"line": 63,
								"endchar": 2,
								"char": 7,
								"type": "void(AppenderResetMode reset_mode = AppenderResetMode.keepData)",
								"parameters": [
									{
										"default": "AppenderResetMode.keepData",
										"type": "AppenderResetMode",
										"name": "reset_mode"
									}
								],
								"name": "reset",
								"endline": 68
							},
							{
								"kind": "function",
								"line": 70,
								"endchar": 2,
								"char": 7,
								"type": "void(size_t amt)",
								"parameters": [
									{
										"type": "size_t",
										"name": "amt"
									}
								],
								"name": "reserve",
								"endline": 93
							},
							{
								"kind": "function",
								"line": 95,
								"endchar": 2,
								"char": 7,
								"type": "void(E el)",
								"parameters": [
									{
										"type": "E",
										"name": "el"
									}
								],
								"name": "put",
								"endline": 100
							},
							{
								"kind": "function",
								"line": 102,
								"endchar": 2,
								"char": 7,
								"type": "void(ArrayType arr)",
								"parameters": [
									{
										"type": "ArrayType",
										"name": "arr"
									}
								],
								"name": "put",
								"endline": 107
							},
							{
								"kind": "function",
								"line": 139,
								"endchar": 2,
								"char": 7,
								"type": "void(size_t min_free)",
								"parameters": [
									{
										"type": "size_t",
										"name": "min_free"
									}
								],
								"name": "grow",
								"endline": 148
							}
						],
						"char": 1,
						"name": "AllocAppender"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"type": "E[]",
						"name": "ArrayType"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"name": "AllocAppender"
			},
			{
				"kind": "template",
				"line": 183,
				"members": [
					{
						"kind": "struct",
						"line": 183,
						"members": [
							{
								"kind": "alias",
								"line": 184,
								"char": 2,
								"type": "Unqual!E",
								"name": "ElemType"
							},
							{
								"kind": "variable",
								"line": 186,
								"char": 19,
								"type": "ElemType[NELEM]",
								"name": "m_data"
							},
							{
								"kind": "variable",
								"line": 187,
								"char": 10,
								"type": "size_t",
								"name": "m_fill"
							},
							{
								"kind": "function",
								"line": 190,
								"endchar": 2,
								"char": 7,
								"type": "void()",
								"name": "clear",
								"endline": 193
							},
							{
								"kind": "function",
								"line": 195,
								"endchar": 2,
								"char": 7,
								"type": "void(E el)",
								"parameters": [
									{
										"type": "E",
										"name": "el"
									}
								],
								"name": "put",
								"endline": 198
							},
							{
								"kind": "function",
								"line": 224,
								"endchar": 2,
								"char": 7,
								"type": "void(ArrayType arr)",
								"parameters": [
									{
										"type": "ArrayType",
										"name": "arr"
									}
								],
								"name": "put",
								"endline": 228
							},
							{
								"kind": "function",
								"line": 230,
								"endchar": 74,
								"char": 22,
								"type": "@property ArrayType()",
								"name": "data",
								"endline": 230
							}
						],
						"char": 1,
						"name": "FixedAppender"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"type": "E[]",
						"name": "ArrayType"
					},
					{
						"kind": "value",
						"deco": "k",
						"name": "NELEM"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"name": "FixedAppender"
			},
			{
				"kind": "template",
				"line": 241,
				"members": [
					{
						"kind": "struct",
						"line": 241,
						"members": [
							{
								"kind": "variable",
								"line": 245,
								"init": "0",
								"char": 10,
								"type": "size_t",
								"name": "m_start"
							},
							{
								"kind": "variable",
								"line": 246,
								"init": "0",
								"char": 10,
								"type": "size_t",
								"name": "m_fill"
							},
							{
								"kind": "function",
								"line": 255,
								"endchar": 53,
								"char": 17,
								"type": "const @property bool()",
								"name": "empty",
								"endline": 255
							},
							{
								"kind": "function",
								"line": 257,
								"endchar": 66,
								"char": 17,
								"type": "const @property bool()",
								"name": "full",
								"endline": 257
							},
							{
								"kind": "function",
								"line": 259,
								"endchar": 51,
								"char": 19,
								"type": "const @property size_t()",
								"name": "length",
								"endline": 259
							},
							{
								"kind": "function",
								"line": 261,
								"endchar": 72,
								"char": 19,
								"type": "const @property size_t()",
								"name": "freeSpace",
								"endline": 261
							},
							{
								"kind": "function",
								"line": 263,
								"endchar": 62,
								"char": 19,
								"type": "const @property size_t()",
								"name": "capacity",
								"endline": 263
							},
							{
								"kind": "function",
								"line": 285,
								"endchar": 83,
								"char": 25,
								"type": "inout @property ref inout(T)()",
								"name": "front",
								"endline": 285
							},
							{
								"kind": "function",
								"line": 287,
								"endchar": 96,
								"char": 25,
								"type": "inout @property ref inout(T)()",
								"name": "back",
								"endline": 287
							},
							{
								"kind": "function",
								"line": 289,
								"endchar": 2,
								"char": 7,
								"type": "void()",
								"name": "clear",
								"endline": 294
							},
							{
								"kind": "template",
								"line": 296,
								"members": [
									{
										"kind": "function",
										"line": 296,
										"endchar": 97,
										"char": 7,
										"type": "void(T itm)",
										"parameters": [
											{
												"type": "T",
												"name": "itm"
											}
										],
										"name": "put",
										"endline": 296
									}
								],
								"char": 7,
								"parameters": [],
								"name": "put"
							},
							{
								"kind": "template",
								"line": 297,
								"members": [
									{
										"kind": "function",
										"line": 297,
										"endchar": 2,
										"char": 7,
										"type": "void(TC[] itms)",
										"parameters": [
											{
												"type": "TC[]",
												"name": "itms"
											}
										],
										"name": "put",
										"endline": 310
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "type",
										"type": "T",
										"name": "TC"
									}
								],
								"name": "put"
							},
							{
								"kind": "function",
								"line": 311,
								"endchar": 74,
								"char": 7,
								"type": "void(size_t n)",
								"parameters": [
									{
										"type": "size_t",
										"name": "n"
									}
								],
								"name": "putN",
								"endline": 311
							},
							{
								"kind": "function",
								"line": 313,
								"endchar": 72,
								"char": 7,
								"type": "void()",
								"name": "popFront",
								"endline": 313
							},
							{
								"kind": "function",
								"line": 314,
								"endchar": 91,
								"char": 7,
								"type": "void(size_t n)",
								"parameters": [
									{
										"type": "size_t",
										"name": "n"
									}
								],
								"name": "popFrontN",
								"endline": 314
							},
							{
								"kind": "function",
								"line": 316,
								"endchar": 45,
								"char": 7,
								"type": "void()",
								"name": "popBack",
								"endline": 316
							},
							{
								"kind": "function",
								"line": 317,
								"endchar": 62,
								"char": 7,
								"type": "void(size_t n)",
								"parameters": [
									{
										"type": "size_t",
										"name": "n"
									}
								],
								"name": "popBackN",
								"endline": 317
							},
							{
								"kind": "function",
								"line": 319,
								"endchar": 2,
								"char": 7,
								"type": "void(Range r)",
								"parameters": [
									{
										"type": "Range",
										"name": "r"
									}
								],
								"name": "removeAt",
								"endline": 341
							},
							{
								"kind": "function",
								"line": 343,
								"endchar": 94,
								"char": 13,
								"type": "inout inout(T)[]()",
								"name": "peek",
								"endline": 343
							},
							{
								"kind": "function",
								"line": 344,
								"endchar": 2,
								"char": 6,
								"type": "T[]()",
								"name": "peekDst",
								"endline": 347
							},
							{
								"kind": "function",
								"line": 349,
								"endchar": 2,
								"char": 7,
								"type": "void(T[] dst)",
								"parameters": [
									{
										"type": "T[]",
										"name": "dst"
									}
								],
								"name": "read",
								"endline": 362
							},
							{
								"kind": "function",
								"line": 364,
								"endchar": 2,
								"char": 6,
								"type": "int(scope int delegate(ref T itm) del)",
								"parameters": [
									{
										"storageClass": [
											"scope"
										],
										"type": "int delegate(ref T itm)",
										"name": "del"
									}
								],
								"name": "opApply",
								"endline": 379
							},
							{
								"kind": "function",
								"line": 381,
								"endchar": 100,
								"char": 15,
								"type": "inout ref inout(T)(size_t idx)",
								"parameters": [
									{
										"type": "size_t",
										"name": "idx"
									}
								],
								"name": "opIndex",
								"endline": 381
							},
							{
								"kind": "function",
								"line": 383,
								"endchar": 61,
								"char": 8,
								"type": "Range()",
								"name": "opSlice",
								"endline": 383
							},
							{
								"kind": "function",
								"line": 385,
								"endchar": 2,
								"char": 8,
								"type": "Range(size_t from, size_t to)",
								"parameters": [
									{
										"type": "size_t",
										"name": "from"
									},
									{
										"type": "size_t",
										"name": "to"
									}
								],
								"name": "opSlice",
								"endline": 390
							},
							{
								"kind": "template",
								"line": 392,
								"constraint": "dim == 0",
								"members": [
									{
										"kind": "function",
										"line": 392,
										"endchar": 68,
										"char": 9,
										"type": "const size_t()",
										"name": "opDollar",
										"endline": 392
									}
								],
								"char": 9,
								"parameters": [
									{
										"kind": "value",
										"type": "size_t",
										"name": "dim"
									}
								],
								"name": "opDollar"
							},
							{
								"kind": "function",
								"line": 394,
								"endchar": 2,
								"char": 17,
								"type": "const size_t(size_t n)",
								"parameters": [
									{
										"type": "size_t",
										"name": "n"
									}
								],
								"name": "mod",
								"endline": 405
							},
							{
								"kind": "struct",
								"line": 407,
								"members": [
									{
										"kind": "variable",
										"line": 409,
										"char": 8,
										"type": "T[]",
										"name": "m_buffer"
									},
									{
										"kind": "variable",
										"line": 410,
										"char": 11,
										"type": "size_t",
										"name": "m_start"
									},
									{
										"kind": "variable",
										"line": 411,
										"char": 11,
										"type": "size_t",
										"name": "m_length"
									},
									{
										"kind": "constructor",
										"line": 414,
										"endchar": 3,
										"char": 11,
										"type": "(T[] buffer, size_t start, size_t length)",
										"parameters": [
											{
												"type": "T[]",
												"name": "buffer"
											},
											{
												"type": "size_t",
												"name": "start"
											},
											{
												"type": "size_t",
												"name": "length"
											}
										],
										"name": "this",
										"endline": 419
									},
									{
										"kind": "function",
										"line": 421,
										"endchar": 56,
										"char": 18,
										"type": "const @property bool()",
										"name": "empty",
										"endline": 421
									},
									{
										"kind": "function",
										"line": 423,
										"endchar": 80,
										"char": 22,
										"type": "inout @property inout(T)()",
										"name": "front",
										"endline": 423
									},
									{
										"kind": "function",
										"line": 425,
										"endchar": 3,
										"char": 8,
										"type": "void()",
										"name": "popFront",
										"endline": 432
									}
								],
								"char": 9,
								"name": "Range"
							}
						],
						"char": 1,
						"name": "FixedRingBuffer"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"defaultValue": "0",
						"deco": "k",
						"name": "N"
					}
				],
				"comment": "\tTODO: clear ring buffer fields upon removal (to run struct destructors, if T is a struct)\n",
				"name": "FixedRingBuffer"
			},
			{
				"kind": "template",
				"line": 465,
				"members": [
					{
						"kind": "struct",
						"line": 465,
						"members": [
							{
								"kind": "variable",
								"line": 468,
								"char": 10,
								"type": "Key[4]",
								"name": "m_staticEntries"
							},
							{
								"kind": "variable",
								"line": 469,
								"char": 9,
								"type": "Key[]",
								"name": "m_entries"
							},
							{
								"kind": "function",
								"line": 472,
								"endchar": 2,
								"char": 21,
								"type": "@property ArraySet()",
								"name": "dup",
								"endline": 475
							},
							{
								"kind": "template",
								"line": 477,
								"constraint": "op == \"in\"",
								"members": [
									{
										"kind": "function",
										"line": 477,
										"endchar": 81,
										"char": 7,
										"type": "bool(Key key)",
										"parameters": [
											{
												"type": "Key",
												"name": "key"
											}
										],
										"name": "opBinaryRight",
										"endline": 477
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"name": "opBinaryRight"
							},
							{
								"kind": "function",
								"line": 479,
								"endchar": 2,
								"char": 6,
								"type": "int(int delegate(ref Key) del)",
								"parameters": [
									{
										"type": "int delegate(ref Key)",
										"name": "del"
									}
								],
								"name": "opApply",
								"endline": 490
							},
							{
								"kind": "function",
								"line": 492,
								"endchar": 2,
								"char": 7,
								"type": "const bool(Key key)",
								"parameters": [
									{
										"type": "Key",
										"name": "key"
									}
								],
								"name": "contains",
								"endline": 497
							},
							{
								"kind": "function",
								"line": 499,
								"endchar": 2,
								"char": 7,
								"type": "void(Key key)",
								"parameters": [
									{
										"type": "Key",
										"name": "key"
									}
								],
								"name": "insert",
								"endline": 513
							},
							{
								"kind": "function",
								"line": 515,
								"endchar": 2,
								"char": 7,
								"type": "void(Key key)",
								"parameters": [
									{
										"type": "Key",
										"name": "key"
									}
								],
								"name": "remove",
								"endline": 519
							}
						],
						"char": 1,
						"name": "ArraySet"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Key"
					}
				],
				"name": "ArraySet"
			}
		],
		"name": "vibe.utils.array",
		"comment": "\tUtility functions for array processing\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\utils\\dictionarylist.d",
		"members": [
			{
				"kind": "template",
				"line": 30,
				"members": [
					{
						"kind": "struct",
						"line": 30,
						"members": [
							{
								"kind": "struct",
								"line": 34,
								"members": [
									{
										"kind": "variable",
										"line": 34,
										"deco": "k",
										"char": 30,
										"name": "keyCheckSum"
									},
									{
										"kind": "variable",
										"line": 34,
										"char": 50,
										"type": "string",
										"name": "key"
									},
									{
										"kind": "variable",
										"line": 34,
										"char": 61,
										"type": "VALUE",
										"name": "value"
									}
								],
								"char": 10,
								"name": "Field"
							},
							{
								"kind": "variable",
								"line": 35,
								"char": 28,
								"type": "Field[NUM_STATIC_FIELDS]",
								"name": "m_fields"
							},
							{
								"kind": "variable",
								"line": 36,
								"init": "0",
								"char": 10,
								"type": "size_t",
								"name": "m_fieldCount"
							},
							{
								"kind": "variable",
								"line": 37,
								"char": 11,
								"type": "Field[]",
								"name": "m_extendedFields"
							},
							{
								"kind": "variable",
								"line": 38,
								"storageClass": [
									"static"
								],
								"char": 20,
								"type": "char[256]",
								"name": "s_keyBuffer"
							},
							{
								"kind": "alias",
								"line": 41,
								"char": 2,
								"type": "VALUE",
								"name": "ValueType"
							},
							{
								"kind": "struct",
								"line": 43,
								"members": [
									{
										"kind": "variable",
										"line": 43,
										"char": 29,
										"type": "string",
										"name": "key"
									},
									{
										"kind": "variable",
										"line": 43,
										"char": 44,
										"type": "ValueType",
										"name": "value"
									}
								],
								"char": 2,
								"name": "FieldTuple"
							},
							{
								"kind": "function",
								"line": 47,
								"endchar": 83,
								"char": 19,
								"type": "const @property size_t()",
								"name": "length",
								"comment": " The number of fields present in the map.\n",
								"endline": 47
							},
							{
								"kind": "function",
								"line": 50,
								"storageClass": [
									"static"
								],
								"endchar": 2,
								"char": 24,
								"type": "DictionaryList(FieldTuple[] array)",
								"parameters": [
									{
										"type": "FieldTuple[]",
										"name": "array"
									}
								],
								"name": "fromRepresentation",
								"comment": "Supports serialization using vibe.data.serialization.\n",
								"endline": 55
							},
							{
								"kind": "function",
								"line": 57,
								"endchar": 2,
								"char": 15,
								"type": "FieldTuple[]()",
								"name": "toRepresentation",
								"comment": "ditto\n",
								"endline": 61
							},
							{
								"kind": "function",
								"line": 65,
								"endchar": 2,
								"char": 7,
								"type": "void(string key)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"name": "remove",
								"comment": " Removes the first field that matches the given key.\n",
								"endline": 78
							},
							{
								"kind": "function",
								"line": 82,
								"endchar": 2,
								"char": 7,
								"type": "void(string key)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"name": "removeAll",
								"comment": " Removes all fields that matches the given key.\n",
								"endline": 98
							},
							{
								"kind": "function",
								"line": 106,
								"endchar": 2,
								"char": 7,
								"type": "void(string key, ValueType value)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"type": "ValueType",
										"name": "value"
									}
								],
								"name": "addField",
								"comment": " Adds a new field to the map.\n\n\t\tThe new field will be added regardless of any existing fields that\n\t\thave the same key, possibly resulting in duplicates. Use opIndexAssign\n\t\tif you want to avoid duplicates.\n",
								"endline": 112
							},
							{
								"kind": "function",
								"line": 118,
								"endchar": 2,
								"char": 19,
								"type": "inout inout(ValueType)(string key, lazy inout(ValueType) def_val = ValueType.init)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"storageClass": [
											"lazy"
										],
										"default": "ValueType.init",
										"type": "inout(ValueType)",
										"name": "def_val"
									}
								],
								"name": "get",
								"comment": " Returns the first field that matches the given key.\n\n\t\tIf no field is found, def_val is returned.\n",
								"endline": 122
							},
							{
								"kind": "function",
								"line": 128,
								"endchar": 2,
								"char": 21,
								"type": "const const(ValueType)[](string key)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"name": "getAll",
								"comment": " Returns all values matching the given key.\n\n\t\tNote that the version returning an array will allocate for each call.\n",
								"endline": 134
							},
							{
								"kind": "function",
								"line": 136,
								"endchar": 2,
								"char": 7,
								"type": "const void(string key, scope void delegate(const(ValueType)) del)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									},
									{
										"storageClass": [
											"scope"
										],
										"type": "void delegate(const(ValueType))",
										"name": "del"
									}
								],
								"name": "getAll",
								"comment": "ditto\n",
								"endline": 147
							},
							{
								"kind": "function",
								"line": 151,
								"endchar": 2,
								"char": 19,
								"type": "inout inout(ValueType)(string key)",
								"parameters": [
									{
										"type": "string",
										"name": "key"
									}
								],
								"name": "opIndex",
								"comment": " Returns the first value matching the given key.\n",
								"endline": 156
							},
							{
								"kind": "function",
								"line": 160,
								"endchar": 2,
								"char": 12,
								"type": "ValueType(ValueType val, string key)",
								"parameters": [
									{
										"type": "ValueType",
										"name": "val"
									},
									{
										"type": "string",
										"name": "key"
									}
								],
								"name": "opIndexAssign",
								"comment": " Adds or replaces the given field with a new value.\n",
								"endline": 167
							},
							{
								"kind": "template",
								"line": 171,
								"constraint": "op == \"in\"",
								"members": [
									{
										"kind": "function",
										"line": 171,
										"endchar": 2,
										"char": 20,
										"type": "inout inout(ValueType)*(string key)",
										"parameters": [
											{
												"type": "string",
												"name": "key"
											}
										],
										"name": "opBinaryRight",
										"endline": 178
									}
								],
								"char": 20,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"comment": " Returns a pointer to the first field that matches the given key.\n",
								"name": "opBinaryRight"
							},
							{
								"kind": "template",
								"line": 180,
								"constraint": "op == \"!in\"",
								"members": [
									{
										"kind": "function",
										"line": 180,
										"endchar": 2,
										"char": 7,
										"type": "inout bool(string key)",
										"parameters": [
											{
												"type": "string",
												"name": "key"
											}
										],
										"name": "opBinaryRight",
										"endline": 182
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"comment": "ditto\n",
								"name": "opBinaryRight"
							},
							{
								"kind": "function",
								"line": 186,
								"endchar": 2,
								"char": 6,
								"type": "int(scope int delegate(string key, ref ValueType val) del)",
								"parameters": [
									{
										"storageClass": [
											"scope"
										],
										"type": "int delegate(string key, ref ValueType val)",
										"name": "del"
									}
								],
								"name": "opApply",
								"comment": " Iterates over all fields, including duplicates.\n",
								"endline": 197
							},
							{
								"kind": "function",
								"line": 200,
								"endchar": 2,
								"char": 6,
								"type": "int(scope int delegate(ref ValueType val) del)",
								"parameters": [
									{
										"storageClass": [
											"scope"
										],
										"type": "int delegate(ref ValueType val)",
										"name": "del"
									}
								],
								"name": "opApply",
								"comment": "ditto\n",
								"endline": 203
							},
							{
								"kind": "function",
								"line": 206,
								"endchar": 2,
								"char": 6,
								"type": "const int(scope int delegate(string key, ref const(ValueType) val) del)",
								"parameters": [
									{
										"storageClass": [
											"scope"
										],
										"type": "int delegate(string key, ref const(ValueType) val)",
										"name": "del"
									}
								],
								"name": "opApply",
								"comment": "ditto\n",
								"endline": 209
							},
							{
								"kind": "function",
								"line": 212,
								"endchar": 2,
								"char": 6,
								"type": "const int(scope int delegate(ref const(ValueType) val) del)",
								"parameters": [
									{
										"storageClass": [
											"scope"
										],
										"type": "int delegate(ref const(ValueType) val)",
										"name": "del"
									}
								],
								"name": "opApply",
								"comment": "ditto\n",
								"endline": 215
							},
							{
								"kind": "function",
								"line": 230,
								"endchar": 2,
								"char": 20,
								"type": "const ptrdiff_t(in Field[] map, string key, uint keysum)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Field[]",
										"name": "map"
									},
									{
										"type": "string",
										"name": "key"
									},
									{
										"deco": "k",
										"name": "keysum"
									}
								],
								"name": "getIndex",
								"endline": 237
							},
							{
								"kind": "function",
								"line": 239,
								"storageClass": [
									"static"
								],
								"endchar": 2,
								"char": 22,
								"type": "bool(string a, string b)",
								"parameters": [
									{
										"type": "string",
										"name": "a"
									},
									{
										"type": "string",
										"name": "b"
									}
								],
								"name": "matches",
								"endline": 243
							},
							{
								"kind": "function",
								"line": 247,
								"storageClass": [
									"static"
								],
								"endchar": 2,
								"char": 22,
								"type": "@trusted uint(string s)",
								"parameters": [
									{
										"type": "string",
										"name": "s"
									}
								],
								"name": "computeCheckSumI",
								"endline": 257
							}
						],
						"char": 1,
						"name": "DictionaryList"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "VALUE"
					},
					{
						"kind": "value",
						"defaultValue": "true",
						"deco": "b",
						"name": "case_sensitive"
					},
					{
						"kind": "value",
						"defaultValue": "32",
						"deco": "k",
						"name": "NUM_STATIC_FIELDS"
					}
				],
				"comment": "\tBehaves similar to $(D VALUE[string]) but the insertion order is not changed\n\tand multiple values per key are supported.\n\n\tThis kind of map is used for MIME headers (e.g. for HTTP, see\n\tvibe.inet.message.InetHeaderMap), or for form data\n\t(vibe.inet.webform.FormFields). Note that the map can contain fields with\n\tthe same key multiple times if addField is used for insertion. Insertion\n\torder is preserved.\n\n\tNote that despite case not being relevant for matching keyse, iterating\n\tover the map will yield\tthe original case of the key that was put in.\n\n\tInsertion and lookup has O(n) complexity.\n",
				"name": "DictionaryList"
			}
		],
		"name": "vibe.utils.dictionarylist",
		"comment": "\tDefines a string based multi-map with conserved insertion order.\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\utils\\hashmap.d",
		"members": [
			{
				"kind": "template",
				"line": 16,
				"members": [
					{
						"kind": "struct",
						"line": 16,
						"members": [
							{
								"kind": "variable",
								"line": 17,
								"init": "Key.init",
								"storageClass": [
									"enum"
								],
								"char": 7,
								"name": "clearValue"
							},
							{
								"kind": "function",
								"line": 18,
								"storageClass": [
									"static"
								],
								"endchar": 2,
								"char": 14,
								"type": "bool(in Key a, in Key b)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Key",
										"name": "a"
									},
									{
										"storageClass": [
											"in"
										],
										"type": "Key",
										"name": "b"
									}
								],
								"name": "equals",
								"endline": 22
							},
							{
								"kind": "function",
								"line": 23,
								"storageClass": [
									"static"
								],
								"endchar": 2,
								"char": 16,
								"type": "size_t(ref Key k)",
								"parameters": [
									{
										"storageClass": [
											"in",
											"ref"
										],
										"type": "Key",
										"name": "k"
									}
								],
								"name": "hashOf",
								"endline": 41
							}
						],
						"char": 1,
						"name": "DefaultHashMapTraits"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Key"
					}
				],
				"name": "DefaultHashMapTraits"
			},
			{
				"kind": "template",
				"line": 44,
				"members": [
					{
						"kind": "struct",
						"line": 44,
						"members": [
							{
								"kind": "alias",
								"line": 48,
								"char": 2,
								"type": "TKey",
								"name": "Key"
							},
							{
								"kind": "alias",
								"line": 49,
								"char": 2,
								"type": "TValue",
								"name": "Value"
							},
							{
								"kind": "struct",
								"line": 51,
								"members": [
									{
										"kind": "variable",
										"line": 52,
										"init": "Traits.clearValue",
										"char": 15,
										"type": "UnConst!Key",
										"name": "key"
									},
									{
										"kind": "variable",
										"line": 53,
										"char": 9,
										"type": "Value",
										"name": "value"
									},
									{
										"kind": "constructor",
										"line": 55,
										"endchar": 85,
										"char": 3,
										"type": "(Key key, Value value)",
										"parameters": [
											{
												"type": "Key",
												"name": "key"
											},
											{
												"type": "Value",
												"name": "value"
											}
										],
										"name": "this",
										"endline": 55
									}
								],
								"char": 2,
								"name": "TableEntry"
							},
							{
								"kind": "variable",
								"line": 58,
								"char": 16,
								"type": "TableEntry[]",
								"name": "m_table"
							},
							{
								"kind": "variable",
								"line": 59,
								"char": 10,
								"type": "size_t",
								"name": "m_length"
							},
							{
								"kind": "variable",
								"line": 60,
								"char": 13,
								"type": "Allocator",
								"name": "m_allocator"
							},
							{
								"kind": "variable",
								"line": 61,
								"deco": "b",
								"char": 8,
								"name": "m_resizing"
							},
							{
								"kind": "constructor",
								"line": 64,
								"endchar": 2,
								"char": 2,
								"type": "(Allocator allocator)",
								"parameters": [
									{
										"type": "Allocator",
										"name": "allocator"
									}
								],
								"name": "this",
								"endline": 67
							},
							{
								"kind": "destructor",
								"line": 69,
								"endchar": 2,
								"char": 2,
								"name": "~this",
								"endline": 72
							},
							{
								"kind": "function",
								"line": 76,
								"endchar": 53,
								"char": 19,
								"type": "const @property size_t()",
								"name": "length",
								"endline": 76
							},
							{
								"kind": "function",
								"line": 78,
								"endchar": 2,
								"char": 7,
								"type": "void(Key key)",
								"parameters": [
									{
										"type": "Key",
										"name": "key"
									}
								],
								"name": "remove",
								"endline": 98
							},
							{
								"kind": "function",
								"line": 100,
								"endchar": 2,
								"char": 8,
								"type": "Value(Key key, lazy Value default_value = Value.init)",
								"parameters": [
									{
										"type": "Key",
										"name": "key"
									},
									{
										"storageClass": [
											"lazy"
										],
										"default": "Value.init",
										"type": "Value",
										"name": "default_value"
									}
								],
								"name": "get",
								"endline": 105
							},
							{
								"kind": "function",
								"line": 108,
								"endchar": 2,
								"char": 16,
								"type": "Value(Key key, Value default_value = Value.init)",
								"parameters": [
									{
										"type": "Key",
										"name": "key"
									},
									{
										"default": "Value.init",
										"type": "Value",
										"name": "default_value"
									}
								],
								"name": "getNothrow",
								"comment": "Workaround #12647\n",
								"endline": 113
							},
							{
								"kind": "function",
								"line": 124,
								"endchar": 2,
								"char": 7,
								"type": "void()",
								"name": "clear",
								"endline": 132
							},
							{
								"kind": "function",
								"line": 134,
								"endchar": 2,
								"char": 7,
								"type": "void(Value value, Key key)",
								"parameters": [
									{
										"type": "Value",
										"name": "value"
									},
									{
										"type": "Key",
										"name": "key"
									}
								],
								"name": "opIndexAssign",
								"endline": 141
							},
							{
								"kind": "function",
								"line": 143,
								"endchar": 2,
								"char": 19,
								"type": "inout ref inout(Value)(Key key)",
								"parameters": [
									{
										"type": "Key",
										"name": "key"
									}
								],
								"name": "opIndex",
								"endline": 148
							},
							{
								"kind": "template",
								"line": 150,
								"constraint": "op == \"in\"",
								"members": [
									{
										"kind": "function",
										"line": 150,
										"endchar": 2,
										"char": 16,
										"type": "inout inout(Value)*(Key key)",
										"parameters": [
											{
												"type": "Key",
												"name": "key"
											}
										],
										"name": "opBinaryRight",
										"endline": 155
									}
								],
								"char": 16,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"name": "opBinaryRight"
							},
							{
								"kind": "template",
								"line": 157,
								"constraint": "isOpApplyDg!(DG, Key, Value)",
								"members": [
									{
										"kind": "function",
										"line": 157,
										"endchar": 2,
										"char": 6,
										"type": "int(scope DG del)",
										"parameters": [
											{
												"storageClass": [
													"scope"
												],
												"type": "DG",
												"name": "del"
											}
										],
										"name": "opApply",
										"endline": 172
									}
								],
								"char": 6,
								"parameters": [
									{
										"kind": "type",
										"name": "DG"
									}
								],
								"name": "opApply"
							},
							{
								"kind": "function",
								"line": 174,
								"endchar": 2,
								"char": 17,
								"type": "const size_t(Key key)",
								"parameters": [
									{
										"type": "Key",
										"name": "key"
									}
								],
								"name": "findIndex",
								"endline": 185
							},
							{
								"kind": "function",
								"line": 187,
								"endchar": 2,
								"char": 17,
								"type": "const size_t(Key key)",
								"parameters": [
									{
										"type": "Key",
										"name": "key"
									}
								],
								"name": "findInsertIndex",
								"endline": 197
							},
							{
								"kind": "function",
								"line": 199,
								"endchar": 2,
								"char": 15,
								"type": "void(size_t amount)",
								"parameters": [
									{
										"type": "size_t",
										"name": "amount"
									}
								],
								"name": "grow",
								"endline": 206
							},
							{
								"kind": "function",
								"line": 208,
								"endchar": 2,
								"char": 15,
								"type": "@trusted void(size_t new_size)",
								"parameters": [
									{
										"type": "size_t",
										"name": "new_size"
									}
								],
								"name": "resize",
								"endline": 234
							}
						],
						"char": 1,
						"name": "HashMap"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "TKey"
					},
					{
						"kind": "type",
						"name": "TValue"
					},
					{
						"kind": "type",
						"default": "DefaultHashMapTraits!TKey",
						"name": "Traits"
					}
				],
				"name": "HashMap"
			}
		],
		"name": "vibe.utils.hashmap",
		"comment": "\tInternal hash map implementation.\n\n\tCopyright: © 2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\utils\\memory.d",
		"members": [
			{
				"kind": "function",
				"line": 23,
				"deco": "FNbZC4vibe5utils6memory9Allocator",
				"endchar": 1,
				"char": 11,
				"name": "defaultAllocator",
				"endline": 37
			},
			{
				"kind": "function",
				"line": 39,
				"deco": "FNbZC4vibe5utils6memory9Allocator",
				"endchar": 1,
				"char": 11,
				"name": "manualAllocator",
				"endline": 49
			},
			{
				"kind": "template",
				"line": 51,
				"members": [
					{
						"kind": "function",
						"line": 51,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Allocator allocator, ARGS args)",
						"parameters": [
							{
								"type": "Allocator",
								"name": "allocator"
							},
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"name": "allocObject",
						"endline": 61
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"defaultValue": "true",
						"deco": "b",
						"name": "MANAGED"
					},
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"name": "allocObject"
			},
			{
				"kind": "template",
				"line": 63,
				"members": [
					{
						"kind": "function",
						"line": 63,
						"endchar": 1,
						"char": 5,
						"type": "T[](Allocator allocator, size_t n)",
						"parameters": [
							{
								"type": "Allocator",
								"name": "allocator"
							},
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"name": "allocArray",
						"endline": 76
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"defaultValue": "true",
						"deco": "b",
						"name": "MANAGED"
					}
				],
				"name": "allocArray"
			},
			{
				"kind": "template",
				"line": 78,
				"members": [
					{
						"kind": "function",
						"line": 78,
						"endchar": 1,
						"char": 6,
						"type": "void(Allocator allocator, ref T[] array, bool call_destructors = true)",
						"parameters": [
							{
								"type": "Allocator",
								"name": "allocator"
							},
							{
								"storageClass": [
									"ref"
								],
								"type": "T[]",
								"name": "array"
							},
							{
								"deco": "b",
								"default": "true",
								"name": "call_destructors"
							}
						],
						"name": "freeArray",
						"endline": 90
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"defaultValue": "true",
						"deco": "b",
						"name": "MANAGED"
					}
				],
				"name": "freeArray"
			},
			{
				"kind": "interface",
				"line": 93,
				"members": [
					{
						"kind": "variable",
						"line": 95,
						"init": "16u",
						"storageClass": [
							"enum",
							"nothrow"
						],
						"deco": "k",
						"char": 14,
						"name": "alignment",
						"originalType": "size_t"
					},
					{
						"kind": "variable",
						"line": 96,
						"init": "15u",
						"storageClass": [
							"enum",
							"nothrow"
						],
						"deco": "k",
						"char": 14,
						"name": "alignmentMask",
						"originalType": "size_t"
					},
					{
						"kind": "function",
						"line": 98,
						"storageClass": [
							"abstract"
						],
						"deco": "FNbkZAv",
						"char": 9,
						"parameters": [
							{
								"deco": "k",
								"name": "sz"
							}
						],
						"out": {
							"kind": "function",
							"line": 99,
							"deco": "FNbKxAvZv",
							"endchar": 7,
							"char": 7,
							"parameters": [
								{
									"deco": "xAv",
									"storageClass": [
										"ref"
									],
									"name": "__result"
								}
							],
							"name": "__ensure",
							"originalType": "nothrow void(ref const void[] __result)",
							"endline": 99
						},
						"name": "alloc",
						"originalType": "nothrow void[](size_t sz)"
					},
					{
						"kind": "function",
						"line": 101,
						"storageClass": [
							"abstract"
						],
						"deco": "FNbAvkZAv",
						"in": {
							"kind": "function",
							"line": 102,
							"deco": "FNbZv",
							"endchar": 6,
							"char": 6,
							"name": "__require",
							"endline": 102
						},
						"char": 9,
						"parameters": [
							{
								"deco": "Av",
								"name": "mem"
							},
							{
								"deco": "k",
								"name": "new_sz"
							}
						],
						"out": {
							"kind": "function",
							"line": 106,
							"deco": "FNbKxAvZv",
							"endchar": 7,
							"char": 7,
							"parameters": [
								{
									"deco": "xAv",
									"storageClass": [
										"ref"
									],
									"name": "__result"
								}
							],
							"name": "__ensure",
							"originalType": "nothrow void(ref const void[] __result)",
							"endline": 106
						},
						"name": "realloc",
						"originalType": "nothrow void[](void[] mem, size_t new_sz)"
					},
					{
						"kind": "function",
						"line": 108,
						"storageClass": [
							"abstract"
						],
						"deco": "FNbAvZv",
						"in": {
							"kind": "function",
							"line": 109,
							"deco": "FNbZv",
							"endchar": 6,
							"char": 6,
							"name": "__require",
							"endline": 109
						},
						"char": 7,
						"parameters": [
							{
								"deco": "Av",
								"name": "mem"
							}
						],
						"name": "free"
					}
				],
				"char": 1,
				"name": "Allocator"
			},
			{
				"kind": "class",
				"line": 119,
				"members": [
					{
						"kind": "constructor",
						"line": 123,
						"deco": "FNbC4vibe5utils6memory9AllocatorZC4vibe5utils6memory13LockAllocator",
						"endchar": 48,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe5utils6memory9Allocator",
								"name": "base"
							}
						],
						"name": "this",
						"originalType": "nothrow (Allocator base)",
						"endline": 123
					},
					{
						"kind": "function",
						"line": 124,
						"deco": "FNbkZAv",
						"endchar": 2,
						"char": 9,
						"parameters": [
							{
								"deco": "k",
								"name": "sz"
							}
						],
						"name": "alloc",
						"originalType": "void[](size_t sz)",
						"endline": 133,
						"overrides": [
							"vibe.utils.memory.Allocator.alloc"
						]
					},
					{
						"kind": "function",
						"line": 134,
						"deco": "FNbAvkZAv",
						"endchar": 3,
						"in": {
							"kind": "function",
							"line": 135,
							"deco": "FNbZv",
							"endchar": 6,
							"char": 6,
							"name": "__require",
							"endline": 135
						},
						"char": 9,
						"parameters": [
							{
								"deco": "Av",
								"name": "mem"
							},
							{
								"deco": "k",
								"name": "new_sz"
							}
						],
						"name": "realloc",
						"originalType": "void[](void[] mem, size_t new_sz)",
						"endline": 148,
						"overrides": [
							"vibe.utils.memory.Allocator.realloc"
						]
					},
					{
						"kind": "function",
						"line": 149,
						"deco": "FNbAvZv",
						"endchar": 3,
						"in": {
							"kind": "function",
							"line": 150,
							"deco": "FNbZv",
							"endchar": 6,
							"char": 6,
							"name": "__require",
							"endline": 150
						},
						"char": 7,
						"parameters": [
							{
								"deco": "Av",
								"name": "mem"
							}
						],
						"name": "free",
						"originalType": "void(void[] mem)",
						"endline": 162,
						"overrides": [
							"vibe.utils.memory.Allocator.free"
						]
					}
				],
				"char": 1,
				"interfaces": [
					"vibe.utils.memory.Allocator"
				],
				"name": "LockAllocator",
				"comment": "\tSimple proxy allocator protecting its base allocator with a mutex.\n"
			},
			{
				"kind": "class",
				"line": 165,
				"members": [
					{
						"kind": "constructor",
						"line": 174,
						"deco": "FNbC4vibe5utils6memory9AllocatorZC4vibe5utils6memory14DebugAllocator",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe5utils6memory9Allocator",
								"name": "base_allocator"
							}
						],
						"name": "this",
						"originalType": "nothrow (Allocator base_allocator)",
						"endline": 178
					},
					{
						"kind": "function",
						"line": 180,
						"deco": "xFNdZk",
						"endchar": 73,
						"char": 19,
						"name": "allocatedBlockCount",
						"originalType": "const @property size_t()",
						"endline": 180
					},
					{
						"kind": "function",
						"line": 181,
						"deco": "xFNdZk",
						"endchar": 60,
						"char": 19,
						"name": "bytesAllocated",
						"originalType": "const @property size_t()",
						"endline": 181
					},
					{
						"kind": "function",
						"line": 182,
						"deco": "xFNdZk",
						"endchar": 66,
						"char": 19,
						"name": "maxBytesAllocated",
						"originalType": "const @property size_t()",
						"endline": 182
					},
					{
						"kind": "function",
						"line": 184,
						"deco": "FNbkZAv",
						"endchar": 2,
						"char": 9,
						"parameters": [
							{
								"deco": "k",
								"name": "sz"
							}
						],
						"name": "alloc",
						"originalType": "void[](size_t sz)",
						"endline": 196,
						"overrides": [
							"vibe.utils.memory.Allocator.alloc"
						]
					},
					{
						"kind": "function",
						"line": 198,
						"deco": "FNbAvkZAv",
						"endchar": 2,
						"char": 9,
						"parameters": [
							{
								"deco": "Av",
								"name": "mem"
							},
							{
								"deco": "k",
								"name": "new_size"
							}
						],
						"name": "realloc",
						"originalType": "void[](void[] mem, size_t new_size)",
						"endline": 211,
						"overrides": [
							"vibe.utils.memory.Allocator.realloc"
						]
					},
					{
						"kind": "function",
						"line": 212,
						"deco": "FNbAvZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Av",
								"name": "mem"
							}
						],
						"name": "free",
						"originalType": "void(void[] mem)",
						"endline": 220,
						"overrides": [
							"vibe.utils.memory.Allocator.free"
						]
					},
					{
						"kind": "destructor",
						"line": 165,
						"deco": "FNbZv",
						"char": 7,
						"name": "~this"
					}
				],
				"char": 7,
				"interfaces": [
					"vibe.utils.memory.Allocator"
				],
				"name": "DebugAllocator"
			},
			{
				"kind": "class",
				"line": 223,
				"members": [
					{
						"kind": "function",
						"line": 224,
						"deco": "FNbkZAv",
						"endchar": 2,
						"char": 9,
						"parameters": [
							{
								"deco": "k",
								"name": "sz"
							}
						],
						"name": "alloc",
						"originalType": "void[](size_t sz)",
						"endline": 230,
						"overrides": [
							"vibe.utils.memory.Allocator.alloc"
						]
					},
					{
						"kind": "function",
						"line": 232,
						"deco": "FNbAvkZAv",
						"endchar": 2,
						"char": 9,
						"parameters": [
							{
								"deco": "Av",
								"name": "mem"
							},
							{
								"deco": "k",
								"name": "new_size"
							}
						],
						"name": "realloc",
						"originalType": "void[](void[] mem, size_t new_size)",
						"endline": 256,
						"overrides": [
							"vibe.utils.memory.Allocator.realloc"
						]
					},
					{
						"kind": "function",
						"line": 258,
						"deco": "FNbAvZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Av",
								"name": "mem"
							}
						],
						"name": "free",
						"originalType": "void(void[] mem)",
						"endline": 261,
						"overrides": [
							"vibe.utils.memory.Allocator.free"
						]
					}
				],
				"char": 7,
				"interfaces": [
					"vibe.utils.memory.Allocator"
				],
				"name": "MallocAllocator"
			},
			{
				"kind": "class",
				"line": 264,
				"members": [
					{
						"kind": "function",
						"line": 265,
						"deco": "FNbkZAv",
						"endchar": 2,
						"char": 9,
						"parameters": [
							{
								"deco": "k",
								"name": "sz"
							}
						],
						"name": "alloc",
						"originalType": "void[](size_t sz)",
						"endline": 273,
						"overrides": [
							"vibe.utils.memory.Allocator.alloc"
						]
					},
					{
						"kind": "function",
						"line": 274,
						"deco": "FNbAvkZAv",
						"endchar": 2,
						"char": 9,
						"parameters": [
							{
								"deco": "Av",
								"name": "mem"
							},
							{
								"deco": "k",
								"name": "new_size"
							}
						],
						"name": "realloc",
						"originalType": "void[](void[] mem, size_t new_size)",
						"endline": 293,
						"overrides": [
							"vibe.utils.memory.Allocator.realloc"
						]
					},
					{
						"kind": "function",
						"line": 294,
						"deco": "FNbAvZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Av",
								"name": "mem"
							}
						],
						"name": "free",
						"originalType": "void(void[] mem)",
						"endline": 298,
						"overrides": [
							"vibe.utils.memory.Allocator.free"
						]
					}
				],
				"char": 7,
				"interfaces": [
					"vibe.utils.memory.Allocator"
				],
				"name": "GCAllocator"
			},
			{
				"kind": "class",
				"line": 301,
				"members": [
					{
						"kind": "constructor",
						"line": 311,
						"deco": "FNbC4vibe5utils6memory9AllocatorZC4vibe5utils6memory21AutoFreeListAllocator",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "C4vibe5utils6memory9Allocator",
								"name": "base_allocator"
							}
						],
						"name": "this",
						"originalType": "nothrow (Allocator base_allocator)",
						"endline": 316
					},
					{
						"kind": "function",
						"line": 318,
						"deco": "FNbkZAv",
						"endchar": 2,
						"char": 9,
						"parameters": [
							{
								"deco": "k",
								"name": "sz"
							}
						],
						"name": "alloc",
						"originalType": "void[](size_t sz)",
						"endline": 326,
						"overrides": [
							"vibe.utils.memory.Allocator.alloc"
						]
					},
					{
						"kind": "function",
						"line": 328,
						"deco": "FNbAvkZAv",
						"endchar": 2,
						"char": 9,
						"parameters": [
							{
								"deco": "Av",
								"name": "data"
							},
							{
								"deco": "k",
								"name": "sz"
							}
						],
						"name": "realloc",
						"originalType": "void[](void[] data, size_t sz)",
						"endline": 347,
						"overrides": [
							"vibe.utils.memory.Allocator.realloc"
						]
					},
					{
						"kind": "function",
						"line": 349,
						"deco": "FNbAvZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Av",
								"name": "data"
							}
						],
						"name": "free",
						"originalType": "void(void[] data)",
						"endline": 363,
						"overrides": [
							"vibe.utils.memory.Allocator.free"
						]
					}
				],
				"char": 7,
				"interfaces": [
					"vibe.utils.memory.Allocator"
				],
				"name": "AutoFreeListAllocator"
			},
			{
				"kind": "class",
				"line": 372,
				"members": [
					{
						"kind": "struct",
						"line": 373,
						"members": [
							{
								"kind": "variable",
								"line": 373,
								"deco": "PS4vibe5utils6memory13PoolAllocator4Pool",
								"char": 29,
								"name": "next",
								"offset": 0
							},
							{
								"kind": "variable",
								"line": 373,
								"deco": "Av",
								"char": 42,
								"name": "data",
								"offset": 4
							},
							{
								"kind": "variable",
								"line": 373,
								"deco": "Av",
								"char": 55,
								"name": "remaining",
								"offset": 12
							}
						],
						"char": 9,
						"name": "Pool"
					},
					{
						"kind": "struct",
						"line": 374,
						"members": [
							{
								"kind": "variable",
								"line": 374,
								"deco": "PS4vibe5utils6memory13PoolAllocator10Destructor",
								"char": 41,
								"name": "next",
								"offset": 0
							},
							{
								"kind": "variable",
								"line": 374,
								"deco": "PFPvZv",
								"char": 68,
								"name": "destructor",
								"offset": 4
							},
							{
								"kind": "variable",
								"line": 374,
								"deco": "Pv",
								"char": 86,
								"name": "object",
								"offset": 8
							}
						],
						"char": 9,
						"name": "Destructor"
					},
					{
						"kind": "constructor",
						"line": 383,
						"deco": "FNbkC4vibe5utils6memory9AllocatorZC4vibe5utils6memory13PoolAllocator",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "k",
								"name": "pool_size"
							},
							{
								"deco": "C4vibe5utils6memory9Allocator",
								"name": "base"
							}
						],
						"name": "this",
						"originalType": "nothrow (size_t pool_size, Allocator base)",
						"endline": 387
					},
					{
						"kind": "function",
						"line": 389,
						"deco": "FNdZk",
						"endchar": 2,
						"char": 19,
						"name": "totalSize",
						"originalType": "@property size_t()",
						"endline": 397
					},
					{
						"kind": "function",
						"line": 399,
						"deco": "FNdZk",
						"endchar": 2,
						"char": 19,
						"name": "allocatedSize",
						"originalType": "@property size_t()",
						"endline": 407
					},
					{
						"kind": "function",
						"line": 409,
						"deco": "FNbkZAv",
						"endchar": 2,
						"char": 9,
						"parameters": [
							{
								"deco": "k",
								"name": "sz"
							}
						],
						"name": "alloc",
						"originalType": "void[](size_t sz)",
						"endline": 444,
						"overrides": [
							"vibe.utils.memory.Allocator.alloc"
						]
					},
					{
						"kind": "function",
						"line": 446,
						"deco": "FNbAvkZAv",
						"endchar": 2,
						"char": 9,
						"parameters": [
							{
								"deco": "Av",
								"name": "arr"
							},
							{
								"deco": "k",
								"name": "newsize"
							}
						],
						"name": "realloc",
						"originalType": "void[](void[] arr, size_t newsize)",
						"endline": 466,
						"overrides": [
							"vibe.utils.memory.Allocator.realloc"
						]
					},
					{
						"kind": "function",
						"line": 468,
						"deco": "FNbAvZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Av",
								"name": "mem"
							}
						],
						"name": "free",
						"originalType": "void(void[] mem)",
						"endline": 470,
						"overrides": [
							"vibe.utils.memory.Allocator.free"
						]
					},
					{
						"kind": "function",
						"line": 472,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "freeAll",
						"endline": 491
					},
					{
						"kind": "function",
						"line": 493,
						"deco": "FZv",
						"endchar": 2,
						"char": 7,
						"name": "reset",
						"endline": 505
					}
				],
				"char": 7,
				"interfaces": [
					"vibe.utils.memory.Allocator"
				],
				"name": "PoolAllocator"
			},
			{
				"kind": "class",
				"line": 514,
				"members": [
					{
						"kind": "constructor",
						"line": 526,
						"deco": "FNbkC4vibe5utils6memory9AllocatorZC4vibe5utils6memory13FreeListAlloc",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "k",
								"name": "elem_size"
							},
							{
								"deco": "C4vibe5utils6memory9Allocator",
								"name": "base_allocator"
							}
						],
						"name": "this",
						"originalType": "nothrow (size_t elem_size, Allocator base_allocator)",
						"endline": 532
					},
					{
						"kind": "function",
						"line": 534,
						"deco": "xFNbNdZk",
						"endchar": 60,
						"char": 19,
						"name": "elementSize",
						"originalType": "const nothrow @property size_t()",
						"endline": 534
					},
					{
						"kind": "function",
						"line": 536,
						"deco": "FNbkZAv",
						"endchar": 2,
						"char": 9,
						"parameters": [
							{
								"deco": "k",
								"name": "sz"
							}
						],
						"name": "alloc",
						"originalType": "nothrow void[](size_t sz)",
						"endline": 540,
						"overrides": [
							"vibe.utils.memory.Allocator.alloc"
						]
					},
					{
						"kind": "function",
						"line": 542,
						"deco": "FNbZAv",
						"endchar": 2,
						"char": 9,
						"name": "alloc",
						"endline": 558
					},
					{
						"kind": "function",
						"line": 560,
						"deco": "FNbAvkZAv",
						"endchar": 2,
						"char": 9,
						"parameters": [
							{
								"deco": "Av",
								"name": "mem"
							},
							{
								"deco": "k",
								"name": "sz"
							}
						],
						"name": "realloc",
						"originalType": "nothrow void[](void[] mem, size_t sz)",
						"endline": 565,
						"overrides": [
							"vibe.utils.memory.Allocator.realloc"
						]
					},
					{
						"kind": "function",
						"line": 567,
						"deco": "FNbAvZv",
						"endchar": 2,
						"char": 7,
						"parameters": [
							{
								"deco": "Av",
								"name": "mem"
							}
						],
						"name": "free",
						"endline": 575,
						"overrides": [
							"vibe.utils.memory.Allocator.free"
						]
					}
				],
				"char": 7,
				"interfaces": [
					"vibe.utils.memory.Allocator"
				],
				"name": "FreeListAlloc"
			},
			{
				"kind": "template",
				"line": 578,
				"members": [
					{
						"kind": "variable",
						"line": 580,
						"init": "AllocSize!T",
						"storageClass": [
							"enum"
						],
						"char": 7,
						"name": "ElemSize"
					},
					{
						"kind": "template",
						"line": 588,
						"members": [
							{
								"kind": "function",
								"line": 588,
								"endchar": 2,
								"char": 5,
								"type": "TR(ARGS args)",
								"parameters": [
									{
										"type": "ARGS",
										"name": "args"
									}
								],
								"name": "alloc",
								"endline": 595
							}
						],
						"char": 5,
						"parameters": [
							{
								"kind": "tuple",
								"name": "ARGS"
							}
						],
						"name": "alloc"
					},
					{
						"kind": "function",
						"line": 597,
						"endchar": 2,
						"char": 7,
						"type": "void(TR obj)",
						"parameters": [
							{
								"type": "TR",
								"name": "obj"
							}
						],
						"name": "free",
						"endline": 607
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"defaultValue": "true",
						"deco": "b",
						"name": "USE_GC"
					},
					{
						"kind": "value",
						"defaultValue": "true",
						"deco": "b",
						"name": "INIT"
					}
				],
				"name": "FreeListObjectAlloc"
			},
			{
				"kind": "template",
				"line": 611,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"name": "AllocSize"
			},
			{
				"kind": "template",
				"line": 622,
				"members": [
					{
						"kind": "struct",
						"line": 622,
						"members": [
							{
								"kind": "variable",
								"line": 624,
								"init": "AllocSize!T",
								"storageClass": [
									"enum"
								],
								"char": 7,
								"name": "ElemSize"
							},
							{
								"kind": "variable",
								"line": 632,
								"char": 13,
								"type": "TR",
								"name": "m_object"
							},
							{
								"kind": "variable",
								"line": 633,
								"init": "518477847",
								"char": 17,
								"type": "size_t",
								"name": "m_magic"
							},
							{
								"kind": "template",
								"line": 635,
								"members": [
									{
										"kind": "function",
										"line": 635,
										"endchar": 2,
										"char": 21,
										"type": "FreeListRef(ARGS args)",
										"parameters": [
											{
												"type": "ARGS",
												"name": "args"
											}
										],
										"name": "opCall",
										"endline": 645
									}
								],
								"char": 21,
								"parameters": [
									{
										"kind": "tuple",
										"name": "ARGS"
									}
								],
								"name": "opCall"
							},
							{
								"kind": "destructor",
								"line": 647,
								"endchar": 2,
								"char": 2,
								"name": "~this",
								"endline": 655
							},
							{
								"kind": "function",
								"line": 666,
								"endchar": 2,
								"char": 7,
								"type": "void(FreeListRef other)",
								"parameters": [
									{
										"type": "FreeListRef",
										"name": "other"
									}
								],
								"name": "opAssign",
								"endline": 674
							},
							{
								"kind": "function",
								"line": 676,
								"endchar": 2,
								"char": 7,
								"type": "void()",
								"name": "clear",
								"endline": 696
							},
							{
								"kind": "function",
								"line": 698,
								"endchar": 72,
								"char": 22,
								"type": "const @property const(TR)()",
								"name": "get",
								"endline": 698
							},
							{
								"kind": "function",
								"line": 699,
								"endchar": 59,
								"char": 15,
								"type": "@property TR()",
								"name": "get",
								"endline": 699
							},
							{
								"kind": "function",
								"line": 702,
								"endchar": 2,
								"char": 28,
								"type": "const @property ref int()",
								"name": "refCount",
								"endline": 707
							},
							{
								"kind": "function",
								"line": 709,
								"endchar": 2,
								"char": 15,
								"type": "const void()",
								"name": "checkInvariants",
								"endline": 713
							}
						],
						"char": 1,
						"name": "FreeListRef"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"defaultValue": "true",
						"deco": "b",
						"name": "INIT"
					}
				],
				"name": "FreeListRef"
			}
		],
		"name": "vibe.utils.memory",
		"comment": "\tUtility functions for memory management\n\n\tNote that this module currently is a big sand box for testing allocation related stuff.\n\tNothing here, including the interfaces, is final but rather a lot of experimentation.\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\utils\\string.d",
		"members": [
			{
				"kind": "import",
				"line": 10,
				"char": 15,
				"name": "std.string"
			},
			{
				"kind": "function",
				"line": 28,
				"deco": "FNaNfxAhZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "xAh",
						"name": "str"
					}
				],
				"name": "sanitizeUTF8",
				"comment": "\tTakes a string with possibly invalid UTF8 sequences and outputs a valid UTF8 string as near to\n\tthe original as possible.\n",
				"originalType": "pure @safe string(in ubyte[] str)",
				"endline": 46
			},
			{
				"kind": "function",
				"line": 52,
				"deco": "FNaNbNfAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "str"
					}
				],
				"name": "stripUTF8Bom",
				"comment": "\tStrips the byte order mark of an UTF8 encoded string.\n\tThis is useful when the string is coming from a file.\n",
				"endline": 57
			},
			{
				"kind": "function",
				"line": 63,
				"deco": "FNaNfAyaAyaZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "str"
					},
					{
						"deco": "Aya",
						"name": "chars"
					}
				],
				"name": "allOf",
				"comment": "\tChecks if all characters in 'str' are contained in 'chars'.\n",
				"endline": 69
			},
			{
				"kind": "template",
				"line": 71,
				"members": [
					{
						"kind": "function",
						"line": 71,
						"endchar": 1,
						"char": 11,
						"type": "pure @safe ptrdiff_t(in Char[] s, dchar c, CaseSensitive cs = CaseSensitive.yes)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "Char[]",
								"name": "s"
							},
							{
								"deco": "w",
								"name": "c"
							},
							{
								"default": "CaseSensitive.yes",
								"type": "CaseSensitive",
								"name": "cs"
							}
						],
						"name": "indexOfCT",
						"endline": 86
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					}
				],
				"name": "indexOfCT"
			},
			{
				"kind": "function",
				"line": 91,
				"deco": "FNaNfAyaAyaZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "str"
					},
					{
						"deco": "Aya",
						"name": "chars"
					}
				],
				"name": "anyOf",
				"comment": "\tChecks if any character in 'str' is contained in 'chars'.\n",
				"endline": 97
			},
			{
				"kind": "function",
				"line": 101,
				"deco": "FNaNbNfAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "s"
					}
				],
				"name": "stripLeftA",
				"comment": "ASCII whitespace trimming (space and tab)\n",
				"endline": 106
			},
			{
				"kind": "function",
				"line": 109,
				"deco": "FNaNbNfAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "s"
					}
				],
				"name": "stripRightA",
				"comment": "ASCII whitespace trimming (space and tab)\n",
				"endline": 114
			},
			{
				"kind": "function",
				"line": 117,
				"deco": "FNaNbNfAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "s"
					}
				],
				"name": "stripA",
				"comment": "ASCII whitespace trimming (space and tab)\n",
				"endline": 120
			},
			{
				"kind": "function",
				"line": 123,
				"deco": "FNaNfAyaAyaZi",
				"endchar": 1,
				"char": 12,
				"parameters": [
					{
						"deco": "Aya",
						"name": "str"
					},
					{
						"deco": "Aya",
						"name": "chars"
					}
				],
				"name": "indexOfAny",
				"comment": "Finds the first occurence of any of the characters in `chars`\n",
				"originalType": "pure @safe sizediff_t(string str, string chars)",
				"endline": 129
			},
			{
				"kind": "alias",
				"line": 130,
				"char": 1,
				"name": "countUntilAny"
			},
			{
				"kind": "function",
				"line": 142,
				"deco": "FNaNbNfAyabZi",
				"endchar": 1,
				"char": 12,
				"parameters": [
					{
						"deco": "Aya",
						"name": "str"
					},
					{
						"deco": "b",
						"default": "true",
						"name": "nested"
					}
				],
				"name": "matchBracket",
				"comment": "\tFinds the closing bracket (works with any of '[', '$(LPAREN)', '<', '{').\n\n\tParams:\n\t\tstr = input string\n\t\tnested = whether to skip nested brackets\n\tReturns:\n\t\tThe index of the closing bracket or -1 for unbalanced strings\n\t\tand strings that don't start with a bracket.\n",
				"originalType": "pure nothrow @safe sizediff_t(string str, bool nested = true)",
				"endline": 162
			},
			{
				"kind": "template",
				"line": 179,
				"members": [
					{
						"kind": "function",
						"line": 179,
						"endchar": 1,
						"char": 8,
						"type": "string(Allocator alloc, string fmt, ARGS args)",
						"parameters": [
							{
								"type": "Allocator",
								"name": "alloc"
							},
							{
								"type": "string",
								"name": "fmt"
							},
							{
								"type": "ARGS",
								"name": "args"
							}
						],
						"name": "formatAlloc",
						"endline": 184
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "tuple",
						"name": "ARGS"
					}
				],
				"comment": "Same as std.string.format, just using an allocator.\n",
				"name": "formatAlloc"
			},
			{
				"kind": "function",
				"line": 187,
				"deco": "FNaNfAyaAyaZi",
				"endchar": 1,
				"char": 5,
				"parameters": [
					{
						"deco": "Aya",
						"name": "a"
					},
					{
						"deco": "Aya",
						"name": "b"
					}
				],
				"name": "icmp2",
				"comment": "Special version of icmp() with optimization for ASCII characters\n",
				"endline": 225
			}
		],
		"name": "vibe.utils.string",
		"comment": "\tUtility functions for string processing\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\utils\\validation.d",
		"members": [
			{
				"kind": "template",
				"line": 36,
				"members": [
					{
						"kind": "function",
						"line": 36,
						"endchar": 1,
						"char": 8,
						"type": "string(string str, size_t max_length = 64)",
						"parameters": [
							{
								"type": "string",
								"name": "str"
							},
							{
								"default": "64",
								"type": "size_t",
								"name": "max_length"
							}
						],
						"name": "validateEmail",
						"endline": 41
					}
				],
				"char": 8,
				"parameters": [],
				"comment": " Provides a simple email address validation.\n\n\tNote that the validation could be stricter in some cases than required. The user name\n\tis forced to be ASCII, which is not strictly required as of RFC 6531. It also does not\n\tallow quotiations for the user name part (RFC 5321).\n\n\tInvalid email adresses will cause an exception with the error description to be thrown.\n",
				"name": "validateEmail"
			},
			{
				"kind": "template",
				"line": 43,
				"constraint": "isOutputRange!(R, char)",
				"members": [
					{
						"kind": "function",
						"line": 43,
						"endchar": 1,
						"char": 6,
						"type": "bool(ref R error_sink, string str, size_t max_length = 64)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "error_sink"
							},
							{
								"type": "string",
								"name": "str"
							},
							{
								"default": "64",
								"type": "size_t",
								"name": "max_length"
							}
						],
						"name": "validateEmail",
						"endline": 76
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "ditto\n",
				"name": "validateEmail"
			},
			{
				"kind": "template",
				"line": 91,
				"members": [
					{
						"kind": "function",
						"line": 91,
						"endchar": 1,
						"char": 8,
						"type": "string(string str, int min_length = 3, int max_length = 32, string additional_chars = \"-_\", bool no_number_start = true)",
						"parameters": [
							{
								"type": "string",
								"name": "str"
							},
							{
								"deco": "i",
								"default": "3",
								"name": "min_length"
							},
							{
								"deco": "i",
								"default": "32",
								"name": "max_length"
							},
							{
								"default": "\"-_\"",
								"type": "string",
								"name": "additional_chars"
							},
							{
								"deco": "b",
								"default": "true",
								"name": "no_number_start"
							}
						],
						"name": "validateUserName",
						"endline": 96
					}
				],
				"char": 8,
				"parameters": [],
				"comment": " Validates a user name string.\n\n\tUser names may only contain ASCII letters and digits or any of the specified additional\n\tletters.\n\n\tInvalid user names will cause an exception with the error description to be thrown.\n",
				"name": "validateUserName"
			},
			{
				"kind": "template",
				"line": 98,
				"constraint": "isOutputRange!(R, char)",
				"members": [
					{
						"kind": "function",
						"line": 98,
						"endchar": 1,
						"char": 6,
						"type": "bool(ref R error_sink, string str, int min_length = 3, int max_length = 32, string additional_chars = \"-_\", bool no_number_start = true)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "error_sink"
							},
							{
								"type": "string",
								"name": "str"
							},
							{
								"deco": "i",
								"default": "3",
								"name": "min_length"
							},
							{
								"deco": "i",
								"default": "32",
								"name": "max_length"
							},
							{
								"default": "\"-_\"",
								"type": "string",
								"name": "additional_chars"
							},
							{
								"deco": "b",
								"default": "true",
								"name": "no_number_start"
							}
						],
						"name": "validateUserName",
						"endline": 116
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "ditto\n",
				"name": "validateUserName"
			},
			{
				"kind": "template",
				"line": 125,
				"members": [
					{
						"kind": "function",
						"line": 125,
						"endchar": 1,
						"char": 8,
						"type": "string(string str, string additional_chars = \"_\", string entity_name = \"An identifier\", bool no_number_start = true)",
						"parameters": [
							{
								"type": "string",
								"name": "str"
							},
							{
								"default": "\"_\"",
								"type": "string",
								"name": "additional_chars"
							},
							{
								"default": "\"An identifier\"",
								"type": "string",
								"name": "entity_name"
							},
							{
								"deco": "b",
								"default": "true",
								"name": "no_number_start"
							}
						],
						"name": "validateIdent",
						"endline": 130
					}
				],
				"char": 8,
				"parameters": [],
				"comment": " Validates an identifier string as used in most programming languages.\n\n\tThe identifier must begin with a letter or with any of the additional_chars and may\n\tcontain only ASCII letters and digits and any of the additional_chars.\n\n\tInvalid identifiers will cause an exception with the error description to be thrown.\n",
				"name": "validateIdent"
			},
			{
				"kind": "template",
				"line": 132,
				"constraint": "isOutputRange!(R, char)",
				"members": [
					{
						"kind": "function",
						"line": 132,
						"endchar": 1,
						"char": 6,
						"type": "bool(ref R error_sink, string str, string additional_chars = \"_\", string entity_name = \"An identifier\", bool no_number_start = true)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "error_sink"
							},
							{
								"type": "string",
								"name": "str"
							},
							{
								"default": "\"_\"",
								"type": "string",
								"name": "additional_chars"
							},
							{
								"default": "\"An identifier\"",
								"type": "string",
								"name": "entity_name"
							},
							{
								"deco": "b",
								"default": "true",
								"name": "no_number_start"
							}
						],
						"name": "validateIdent",
						"endline": 152
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "ditto\n",
				"name": "validateIdent"
			},
			{
				"kind": "template",
				"line": 156,
				"members": [
					{
						"kind": "function",
						"line": 156,
						"endchar": 1,
						"char": 8,
						"type": "string(string str, string str_confirm, size_t min_length = 8, size_t max_length = 64)",
						"parameters": [
							{
								"type": "string",
								"name": "str"
							},
							{
								"type": "string",
								"name": "str_confirm"
							},
							{
								"default": "8",
								"type": "size_t",
								"name": "min_length"
							},
							{
								"default": "64",
								"type": "size_t",
								"name": "max_length"
							}
						],
						"name": "validatePassword",
						"endline": 161
					}
				],
				"char": 8,
				"parameters": [],
				"comment": " Checks a password for minimum complexity requirements\n",
				"name": "validatePassword"
			},
			{
				"kind": "template",
				"line": 163,
				"constraint": "isOutputRange!(R, char)",
				"members": [
					{
						"kind": "function",
						"line": 163,
						"endchar": 1,
						"char": 6,
						"type": "bool(ref R error_sink, string str, string str_confirm, size_t min_length = 8, size_t max_length = 64)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "error_sink"
							},
							{
								"type": "string",
								"name": "str"
							},
							{
								"type": "string",
								"name": "str_confirm"
							},
							{
								"default": "8",
								"type": "size_t",
								"name": "min_length"
							},
							{
								"default": "64",
								"type": "size_t",
								"name": "max_length"
							}
						],
						"name": "validatePassword",
						"endline": 183
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "ditto\n",
				"name": "validatePassword"
			},
			{
				"kind": "function",
				"line": 187,
				"deco": "FNfAyakkAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "str"
					},
					{
						"deco": "k",
						"default": "0u",
						"name": "min_length"
					},
					{
						"deco": "k",
						"default": "0u",
						"name": "max_length"
					},
					{
						"deco": "Aya",
						"default": "\"String\"",
						"name": "entity_name"
					}
				],
				"name": "validateString",
				"comment": " Checks if a string falls within the specified length range.\n",
				"originalType": "@safe string(string str, size_t min_length = 0, size_t max_length = 0, string entity_name = \"String\")",
				"endline": 192
			},
			{
				"kind": "template",
				"line": 194,
				"constraint": "isOutputRange!(R, char)",
				"members": [
					{
						"kind": "function",
						"line": 194,
						"endchar": 1,
						"char": 6,
						"type": "bool(ref R error_sink, string str, size_t min_length = 0, size_t max_length = 0, string entity_name = \"String\")",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "error_sink"
							},
							{
								"type": "string",
								"name": "str"
							},
							{
								"default": "0",
								"type": "size_t",
								"name": "min_length"
							},
							{
								"default": "0",
								"type": "size_t",
								"name": "max_length"
							},
							{
								"default": "\"String\"",
								"type": "string",
								"name": "entity_name"
							}
						],
						"name": "validateString",
						"endline": 215
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "ditto\n",
				"name": "validateString"
			}
		],
		"name": "vibe.utils.validation",
		"comment": "\tString input validation routines\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\vibe.d",
		"members": [
			{
				"kind": "import",
				"line": 14,
				"char": 15,
				"name": "vibe.core.args"
			},
			{
				"kind": "import",
				"line": 15,
				"char": 15,
				"name": "vibe.core.concurrency"
			},
			{
				"kind": "import",
				"line": 16,
				"char": 15,
				"name": "vibe.core.core"
			},
			{
				"kind": "import",
				"line": 17,
				"char": 15,
				"name": "vibe.core.file"
			},
			{
				"kind": "import",
				"line": 18,
				"char": 15,
				"name": "vibe.core.log"
			},
			{
				"kind": "import",
				"line": 19,
				"char": 15,
				"name": "vibe.core.net"
			},
			{
				"kind": "import",
				"line": 20,
				"char": 15,
				"name": "vibe.core.sync"
			},
			{
				"kind": "import",
				"line": 21,
				"char": 15,
				"name": "vibe.crypto.passwordhash"
			},
			{
				"kind": "import",
				"line": 22,
				"char": 15,
				"name": "vibe.data.bson"
			},
			{
				"kind": "import",
				"line": 23,
				"char": 15,
				"name": "vibe.data.json"
			},
			{
				"kind": "import",
				"line": 24,
				"char": 15,
				"name": "vibe.db.mongo.mongo"
			},
			{
				"kind": "import",
				"line": 25,
				"char": 15,
				"name": "vibe.db.redis.redis"
			},
			{
				"kind": "import",
				"line": 26,
				"char": 15,
				"name": "vibe.http.auth.basic_auth"
			},
			{
				"kind": "import",
				"line": 27,
				"char": 15,
				"name": "vibe.http.client"
			},
			{
				"kind": "import",
				"line": 28,
				"char": 15,
				"name": "vibe.http.fileserver"
			},
			{
				"kind": "import",
				"line": 29,
				"char": 15,
				"name": "vibe.http.form"
			},
			{
				"kind": "import",
				"line": 30,
				"char": 15,
				"name": "vibe.http.proxy"
			},
			{
				"kind": "import",
				"line": 31,
				"char": 15,
				"name": "vibe.http.rest"
			},
			{
				"kind": "import",
				"line": 32,
				"char": 15,
				"name": "vibe.http.router"
			},
			{
				"kind": "import",
				"line": 33,
				"char": 15,
				"name": "vibe.http.server"
			},
			{
				"kind": "import",
				"line": 34,
				"char": 15,
				"name": "vibe.http.websockets"
			},
			{
				"kind": "import",
				"line": 35,
				"char": 15,
				"name": "vibe.inet.message"
			},
			{
				"kind": "import",
				"line": 36,
				"char": 15,
				"name": "vibe.inet.url"
			},
			{
				"kind": "import",
				"line": 37,
				"char": 15,
				"name": "vibe.inet.urltransfer"
			},
			{
				"kind": "import",
				"line": 38,
				"char": 15,
				"name": "vibe.mail.smtp"
			},
			{
				"kind": "import",
				"line": 40,
				"char": 15,
				"name": "vibe.stream.counting"
			},
			{
				"kind": "import",
				"line": 41,
				"char": 15,
				"name": "vibe.stream.memory"
			},
			{
				"kind": "import",
				"line": 42,
				"char": 15,
				"name": "vibe.stream.operations"
			},
			{
				"kind": "import",
				"line": 43,
				"char": 15,
				"name": "vibe.stream.ssl"
			},
			{
				"kind": "import",
				"line": 44,
				"char": 15,
				"name": "vibe.stream.zlib"
			},
			{
				"kind": "import",
				"line": 45,
				"char": 15,
				"name": "vibe.templ.diet"
			},
			{
				"kind": "import",
				"line": 46,
				"char": 15,
				"name": "vibe.templ.utils"
			},
			{
				"kind": "import",
				"line": 47,
				"char": 15,
				"name": "vibe.textfilter.html"
			},
			{
				"kind": "import",
				"line": 48,
				"char": 15,
				"name": "vibe.textfilter.markdown"
			},
			{
				"kind": "import",
				"line": 49,
				"char": 15,
				"name": "vibe.textfilter.urlencode"
			},
			{
				"kind": "import",
				"line": 50,
				"char": 15,
				"name": "vibe.utils.string"
			},
			{
				"kind": "import",
				"line": 51,
				"char": 15,
				"name": "vibe.web.web"
			},
			{
				"kind": "import",
				"line": 52,
				"char": 15,
				"name": "vibe.web.rest"
			},
			{
				"kind": "import",
				"line": 57,
				"char": 15,
				"name": "std.datetime"
			}
		],
		"name": "vibe.vibe",
		"comment": "\tProvides the full vibe.d API as a single import module.\n\n\tThis file provides the majority of the vibe API through a single import. Note that typical\n\tvibe.d applications will import 'vibe.d' instead to also get an implicit application entry\n\tpoint.\n\n\tCopyright: © 2012 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\web\\common.d",
		"members": [
			{
				"kind": "function",
				"line": 26,
				"deco": "FAyaE4vibe3web6common11MethodStyleZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "name"
					},
					{
						"deco": "E4vibe3web6common11MethodStyle",
						"name": "style"
					}
				],
				"name": "adjustMethodStyle",
				"comment": "\tAdjusts the naming convention for a given function name to the specified style.\n\n\tThe input name is assumed to be in lowerCamelCase (D-style) or PascalCase. Acronyms\n\t(e.g. \"HTML\") should be written all caps\n",
				"endline": 98
			},
			{
				"kind": "template",
				"line": 140,
				"members": [
					{
						"kind": "function",
						"line": 140,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "()",
						"name": "extractHTTPMethodAndName",
						"endline": 220
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "Func"
					}
				],
				"comment": "\tUses given function symbol to determine which HTTP method and\n\twhat URL path should be used to access it in REST API.\n\n\tIs designed for CTFE usage and will assert at run time.\n\n\tReturns:\n\t\tTuple of three elements:\n flag \"was UDA used to override path\"\n HTTPMethod extracted\n url path extracted\n",
				"name": "extractHTTPMethodAndName"
			},
			{
				"kind": "function",
				"line": 265,
				"deco": "FAyaZS4vibe3web6common20ContentTypeAttribute",
				"endchar": 1,
				"char": 22,
				"parameters": [
					{
						"deco": "Aya",
						"name": "data"
					}
				],
				"name": "contentType",
				"comment": "    UDA to defeine the ContentType for methods returning an InputStream or ubyte[]\n",
				"endline": 270
			},
			{
				"kind": "function",
				"line": 286,
				"deco": "FE4vibe4http6common10HTTPMethodZS4vibe3web6common15MethodAttribute",
				"endchar": 1,
				"char": 17,
				"parameters": [
					{
						"deco": "E4vibe4http6common10HTTPMethod",
						"name": "data"
					}
				],
				"name": "method",
				"comment": "\tUser Defined Attribute interface to force specific HTTP method in REST interface\n\tfor function in question. Usual URL generation rules are still applied so if there\n\tare any \"get\", \"query\" or similar prefixes, they are filtered out.\n\n\tExample:\n\t---\n\tinterface IAPI\n\t{\n\t\t// Will be \"POST /info\" instead of default \"GET /info\"\n\t\t@method(HTTPMethod.POST) getInfo();\n\t}\n\t---\n",
				"endline": 291
			},
			{
				"kind": "function",
				"line": 313,
				"deco": "FAyaZS4vibe3web6common13PathAttribute",
				"endchar": 1,
				"char": 15,
				"parameters": [
					{
						"deco": "Aya",
						"name": "data"
					}
				],
				"name": "path",
				"comment": "\tUser Defined Attribute interface to force specific URL path n REST interface\n\tfor function in question. Path attribute is relative though, not absolute.\n\n\tExample:\n\t---\n\tinterface IAPI\n\t{\n\t\t@path(\"info2\") getInfo();\n\t}\n\n\t// ...\n\n\tshared static this()\n\t{\n\t\tregisterRestInterface!IAPI(new URLRouter(), new API(), \"/root/\");\n\t\t// now IAPI.getInfo is tied to \"GET /root/info2\"\n\t}\n\t---\n",
				"endline": 318
			},
			{
				"kind": "function",
				"line": 325,
				"deco": "FAyaZS4vibe3web6common17RootPathAttribute",
				"endchar": 1,
				"char": 19,
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					}
				],
				"name": "rootPath",
				"comment": "\tUDA to define root URL prefix for annotated REST interface.\n\tEmpty path means deducing prefix from interface type name (see also rootPathFromName)\nExample:\n\n---\nimport vibe.http.router;\nimport vibe.web.rest;\n\n@rootPath(\"/oops\")\ninterface IAPI\n{\n\tint getFoo();\n}\n\nclass API : IAPI\n{\n\tint getFoo()\n\t{\n\t\treturn 42;\n\t}\n}\n\nauto router = new URLRouter();\nregisterRestInterface(router, new API());\nauto routes= router.getAllRoutes();\n\nassert(routes[0].pattern == \"/oops/foo\" && routes[0].method == HTTPMethod.GET);\n\n---\n",
				"endline": 330
			},
			{
				"kind": "function",
				"line": 362,
				"deco": "FNdZS4vibe3web6common17RootPathAttribute",
				"endchar": 1,
				"char": 29,
				"name": "rootPathFromName",
				"comment": "\tConvenience alias\nExample:\n\n---\nimport vibe.http.router;\nimport vibe.web.rest;\n\n@rootPathFromName\ninterface IAPI\n{\n\tint getFoo();\n}\n\nclass API : IAPI\n{\n\tint getFoo()\n\t{\n\t\treturn 42;\n\t}\n}\n\nauto router = new URLRouter();\nregisterRestInterface(router, new API());\nauto routes= router.getAllRoutes();\n\nassert(routes[0].pattern == \"/iapi/foo\" && routes[0].method == HTTPMethod.GET);\n\n---\n",
				"endline": 367
			},
			{
				"kind": "class",
				"line": 399,
				"base": "vibe.http.common.HTTPStatusException",
				"members": [
					{
						"kind": "constructor",
						"line": 405,
						"deco": "FiS4vibe4data4json4JsonAyaiC6object9ThrowableZC4vibe3web6common13RestException",
						"endchar": 2,
						"char": 2,
						"parameters": [
							{
								"deco": "i",
								"name": "status"
							},
							{
								"deco": "S4vibe4data4json4Json",
								"name": "jsonResult"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "i",
								"default": "__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"name": "this",
						"comment": "\n",
						"originalType": "(int status, Json jsonResult, string file = __FILE__, int line = __LINE__, Throwable next = null)",
						"endline": 415
					},
					{
						"kind": "function",
						"line": 418,
						"deco": "xFNdZxS4vibe4data4json4Json",
						"endchar": 66,
						"char": 24,
						"name": "jsonResult",
						"comment": "The HTTP status code\n",
						"endline": 418
					}
				],
				"char": 1,
				"name": "RestException",
				"comment": "\n \tRespresents a Rest error response\n"
			},
			{
				"kind": "function",
				"line": 490,
				"deco": "FAyaAyaZS4vibe3web6common17WebParamAttribute",
				"endchar": 1,
				"char": 19,
				"parameters": [
					{
						"deco": "Aya",
						"name": "identifier"
					},
					{
						"deco": "Aya",
						"name": "field"
					}
				],
				"name": "bodyParam",
				"comment": " Declare that a parameter will be transmitted to the API through the body.\n\n It will be serialized as part of a JSON object.\n The serialization format is currently not customizable.\n\n Params:\n - identifier: The name of the parameter to customize. A compiler error will be issued on mismatch.\n - field: The name of the field in the JSON object.\n\n ----\n @bodyParam(\"pack\", \"package\")\n void ship(int pack);\n // The server will receive the following body for a call to ship(42):\n // { \"package\": 42 }\n ----\n",
				"endline": 494
			},
			{
				"kind": "function",
				"line": 513,
				"deco": "FAyaAyaZS4vibe3web6common17WebParamAttribute",
				"endchar": 1,
				"char": 19,
				"parameters": [
					{
						"deco": "Aya",
						"name": "identifier"
					},
					{
						"deco": "Aya",
						"name": "field"
					}
				],
				"name": "headerParam",
				"comment": " Declare that a parameter will be transmitted to the API through the headers.\n\n If the parameter is a string, or any scalar type (float, int, char[], ...), it will be send as a string.\n If it's an aggregate, it will be serialized as JSON.\n However, passing aggregate via header isn't a good practice and should be avoided for new production code.\n\n Params:\n - identifier: The name of the parameter to customize. A compiler error will be issued on mismatch.\n - field: The name of the header field to use (e.g: 'Accept', 'Content-Type'...).\n\n ----\n // The server will receive the content of the \"Authorization\" header.\n @headerParam(\"auth\", \"Authorization\")\n void login(string auth);\n ----\n",
				"endline": 518
			},
			{
				"kind": "function",
				"line": 537,
				"deco": "FAyaAyaZS4vibe3web6common17WebParamAttribute",
				"endchar": 1,
				"char": 19,
				"parameters": [
					{
						"deco": "Aya",
						"name": "identifier"
					},
					{
						"deco": "Aya",
						"name": "field"
					}
				],
				"name": "queryParam",
				"comment": " Declare that a parameter will be transmitted to the API through the query string.\n\n It will be serialized as part of a JSON object, and will go through URL serialization.\n The serialization format is not customizable.\n\n Params:\n - identifier: The name of the parameter to customize. A compiler error will be issued on mismatch.\n - field: The field name to use.\n\n ----\n // For a call to postData(\"D is awesome\"), the server will receive the query:\n // POST /data?test=%22D is awesome%22\n @queryParam(\"data\", \"test\")\n void postData(string data);\n ----\n",
				"endline": 542
			},
			{
				"kind": "enum",
				"line": 547,
				"members": [
					{
						"kind": "enum member",
						"line": 550,
						"value": "0",
						"char": 2,
						"name": "unaltered",
						"comment": "Special value for free-style conventions\n"
					},
					{
						"kind": "enum member",
						"line": 552,
						"value": "1",
						"char": 2,
						"name": "camelCase",
						"comment": "camelCaseNaming\n"
					},
					{
						"kind": "enum member",
						"line": 554,
						"value": "2",
						"char": 2,
						"name": "pascalCase",
						"comment": "PascalCaseNaming\n"
					},
					{
						"kind": "enum member",
						"line": 556,
						"value": "3",
						"char": 2,
						"name": "lowerCase",
						"comment": "lowercasenaming\n"
					},
					{
						"kind": "enum member",
						"line": 558,
						"value": "4",
						"char": 2,
						"name": "upperCase",
						"comment": "UPPERCASENAMING\n"
					},
					{
						"kind": "enum member",
						"line": 560,
						"value": "5",
						"char": 2,
						"name": "lowerUnderscored",
						"comment": "lower_case_naming\n"
					},
					{
						"kind": "enum member",
						"line": 562,
						"value": "6",
						"char": 2,
						"name": "upperUnderscored",
						"comment": "UPPER_CASE_NAMING\n"
					},
					{
						"kind": "enum member",
						"line": 565,
						"value": "0",
						"char": 2,
						"name": "Unaltered",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 567,
						"value": "1",
						"char": 2,
						"name": "CamelCase",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 569,
						"value": "2",
						"char": 2,
						"name": "PascalCase",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 571,
						"value": "3",
						"char": 2,
						"name": "LowerCase",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 573,
						"value": "4",
						"char": 2,
						"name": "UpperCase",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 575,
						"value": "5",
						"char": 2,
						"name": "LowerUnderscored",
						"comment": "deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 577,
						"value": "6",
						"char": 2,
						"name": "UpperUnderscored",
						"comment": "deprecated\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "MethodStyle",
				"comment": "\tDetermines the naming convention of an identifier.\n"
			}
		],
		"name": "vibe.web.common",
		"comment": "\tContains common functionality for the REST and WEB interface generators.\n\n\tCopyright: © 2012-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Михаил Страшун\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\web\\i18n.d",
		"members": [
			{
				"kind": "template",
				"line": 30,
				"members": [
					{
						"kind": "function",
						"line": 30,
						"endchar": 128,
						"char": 47,
						"type": "@property TranslationContextAttribute!CONTEXT()",
						"name": "translationContext",
						"endline": 30
					}
				],
				"char": 47,
				"parameters": [
					{
						"kind": "type",
						"name": "CONTEXT"
					}
				],
				"comment": "\tAnnotates an interface method or class with translation information.\n\n\tThe translation context contains information about supported languages\n\tand the translated strings. Any translations will be automatically\n\tapplied to Diet templates, as well as strings passed to\n\t$(D vibe.web.web.trWeb).\n\n\tBy default, the \"Accept-Language\" header of the incoming request will be\n\tused to determine the language used. To override this behavior, add a\n\tstatic method $(D determineLanguage) to the translation context, which\n\ttakes the request and returns a language string (see also the second\n\texample).\nExample:\n\n---\nstruct TranslationContext {\n\timport std.typetuple;\n\talias languages = TypeTuple!(\"en_US\", \"de_DE\", \"fr_FR\");\n\t//mixin translationModule!\"app\";\n\t//mixin translationModule!\"somelib\";\n}\n\n@translationContext!TranslationContext\nclass MyWebInterface {\n\tvoid getHome()\n\t{\n\t\t//render!(\"home.dt\")\n\t}\n}\n\n---\nExample:\nDefining a custom function for determining the language.\n---\nimport vibe.http.server;\n\nstruct TranslationContext {\n\timport std.typetuple;\n\talias languages = TypeTuple!(\"en_US\", \"de_DE\", \"fr_FR\");\n\t//mixin translationModule!\"app\";\n\t//mixin translationModule!\"somelib\";\n\n\t// use language settings from the session instead of using the\n\t// \"Accept-Language\" header\n\tstatic string determineLanguage(HTTPServerRequest req)\n\t{\n\t\tif (!req.session) return null; // use default language\n\t\treturn req.session.get(\"language\", \"\");\n\t}\n}\n\n@translationContext!TranslationContext\nclass MyWebInterface {\n\tvoid getHome()\n\t{\n\t\t//render!(\"home.dt\")\n\t}\n}\n\n---\n",
				"name": "translationContext"
			},
			{
				"kind": "template",
				"line": 79,
				"members": [
					{
						"kind": "struct",
						"line": 79,
						"members": [
							{
								"kind": "alias",
								"line": 80,
								"char": 2,
								"type": "CONTEXT",
								"name": "Context"
							}
						],
						"char": 1,
						"name": "TranslationContextAttribute"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "CONTEXT"
					}
				],
				"name": "TranslationContextAttribute"
			},
			{
				"kind": "template",
				"line": 94,
				"members": [
					{
						"kind": "template",
						"line": 96,
						"members": [],
						"char": 8,
						"parameters": [
							{
								"kind": "value",
								"type": "size_t",
								"name": "i"
							}
						],
						"name": "file_mixin"
					},
					{
						"kind": "mixin",
						"line": 105,
						"char": 2,
						"name": "file_mixin!0"
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "NAME"
					}
				],
				"name": "translationModule"
			},
			{
				"kind": "template",
				"line": 108,
				"members": [
					{
						"kind": "function",
						"line": 108,
						"endchar": 1,
						"char": 8,
						"type": "string(string key, string context = null)",
						"parameters": [
							{
								"type": "string",
								"name": "key"
							},
							{
								"default": "null",
								"type": "string",
								"name": "context"
							}
						],
						"name": "tr",
						"endline": 124
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "CTX"
					},
					{
						"kind": "value",
						"deco": "Aya",
						"name": "LANG"
					}
				],
				"name": "tr"
			},
			{
				"kind": "function",
				"line": 235,
				"deco": "FAyaZAS4vibe3web4i18n10DeclString",
				"endchar": 1,
				"char": 14,
				"parameters": [
					{
						"deco": "Aya",
						"name": "text"
					}
				],
				"name": "extractDeclStrings",
				"endline": 277
			}
		],
		"name": "vibe.web.i18n",
		"comment": "\tInternationalization/translation support for the web interface module.\n\n\tCopyright: © 2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\web\\rest.d",
		"members": [
			{
				"kind": "import",
				"line": 11,
				"char": 15,
				"name": "vibe.web.common"
			},
			{
				"kind": "template",
				"line": 67,
				"members": [
					{
						"kind": "function",
						"line": 67,
						"endchar": 1,
						"char": 6,
						"type": "void(URLRouter router, TImpl instance, RestInterfaceSettings settings = null)",
						"parameters": [
							{
								"type": "URLRouter",
								"name": "router"
							},
							{
								"type": "TImpl",
								"name": "instance"
							},
							{
								"default": "null",
								"type": "RestInterfaceSettings",
								"name": "settings"
							}
						],
						"name": "registerRestInterface",
						"endline": 162
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "TImpl"
					}
				],
				"comment": "\tRegisters a REST interface and connects it the the given instance.\n\n\tEach method of the given class instance is mapped to the corresponing HTTP\n\tverb. Property methods are mapped to GET/PUT and all other methods are\n\tmapped according to their prefix verb. If the method has no known prefix,\n\tPOST is used.\n\n\tThe following table lists the mappings from prefix verb to HTTP verb:\n\n\t<table>\n\t\t<tr><th>Prefix</th><th>HTTP verb</th></tr>\n\t\t<tr><td>get</td><td>GET</td></tr>\n\t\t<tr><td>query</td><td>GET</td></tr>\n\t\t<tr><td>set</td><td>PUT</td></tr>\n\t\t<tr><td>put</td><td>PUT</td></tr>\n\t\t<tr><td>update</td><td>PATCH</td></tr>\n\t\t<tr><td>patch</td><td>PATCH</td></tr>\n\t\t<tr><td>add</td><td>POST</td></tr>\n\t\t<tr><td>create</td><td>POST</td></tr>\n\t\t<tr><td>post</td><td>POST</td></tr>\n\t</table>\n\n\tIf a method has its first parameter named 'id', it will be mapped to ':id/method' and\n    'id' is expected to be part of the URL instead of a JSON request. Parameters with default\n    values will be optional in the corresponding JSON request.\n\n\tAny interface that you return from a getter will be made available with the\n\tbase url and its name appended.\n\n\tParams:\n\t\trouter = The HTTP router on which the interface will be registered\n\t\tinstance = Class instance to use for the REST mapping - Note that TImpl\n\t\t\tmust either be an interface type, or a class which derives from a\n\t\t\tsingle interface\n\t\tsettings = Additional settings, such as the $(D MethodStyle), or the prefix.\n                           See $(D RestInterfaceSettings) for more details.\n\n\tSee_Also:\n\t\t$(D RestInterfaceClient) class for a seamless way to access such a generated API\n\nExample:\nThis is a very limited example of REST interface features. Please refer to\n\tthe \"rest\" project in the \"examples\" folder for a full overview.\n\n\tAll details related to HTTP are inferred from the interface declaration.\n---\ninterface IMyAPI\n{\n\t// GET /api/greeting\n\t@property string greeting();\n\n\t// PUT /api/greeting\n\t@property void greeting(string text);\n\n\t// POST /api/users\n\t@path(\"/users\")\n\tvoid addNewUser(string name);\n\n\t// GET /api/users\n\t@property string[] users();\n\n\t// GET /api/:id/name\n\tstring getName(int id);\n\n\t// GET /some_custom_json\n\tJson getSomeCustomJson();\n}\n\n// vibe.d takes care of all JSON encoding/decoding\n// and actual API implementation can work directly\n// with native types\n\nclass API : IMyAPI\n{\n\tprivate {\n\t\tstring m_greeting;\n\t\tstring[] m_users;\n\t}\n\n\t@property string greeting() { return m_greeting; }\n\t@property void greeting(string text) { m_greeting = text; }\n\n\tvoid addNewUser(string name) { m_users ~= name; }\n\n\t@property string[] users() { return m_users; }\n\n\tstring getName(int id) { return m_users[id]; }\n\n\tJson getSomeCustomJson()\n\t{\n\t\tJson ret = Json.emptyObject;\n\t\tret[\"somefield\"] = \"Hello, World!\";\n\t\treturn ret;\n\t}\n}\n\n// actual usage, this is usually done in app.d module\n// constructor\n\nvoid static_this()\n{\n\timport vibe.http.server, vibe.http.router;\n\n\tauto router = new URLRouter();\n\tregisterRestInterface(router, new API());\n\tlistenHTTP(new HTTPServerSettings(), router);\n}\n\n---\n",
				"name": "registerRestInterface"
			},
			{
				"kind": "template",
				"line": 165,
				"members": [
					{
						"kind": "function",
						"line": 165,
						"endchar": 1,
						"char": 6,
						"type": "void(URLRouter router, TImpl instance, MethodStyle style)",
						"parameters": [
							{
								"type": "URLRouter",
								"name": "router"
							},
							{
								"type": "TImpl",
								"name": "instance"
							},
							{
								"type": "MethodStyle",
								"name": "style"
							}
						],
						"name": "registerRestInterface",
						"endline": 168
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "TImpl"
					}
				],
				"comment": "ditto\n",
				"name": "registerRestInterface"
			},
			{
				"kind": "template",
				"line": 171,
				"members": [
					{
						"kind": "function",
						"line": 171,
						"endchar": 1,
						"char": 6,
						"type": "void(URLRouter router, TImpl instance, string url_prefix, MethodStyle style = MethodStyle.lowerUnderscored)",
						"parameters": [
							{
								"type": "URLRouter",
								"name": "router"
							},
							{
								"type": "TImpl",
								"name": "instance"
							},
							{
								"type": "string",
								"name": "url_prefix"
							},
							{
								"default": "MethodStyle.lowerUnderscored",
								"type": "MethodStyle",
								"name": "style"
							}
						],
						"name": "registerRestInterface",
						"endline": 179
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "TImpl"
					}
				],
				"comment": "ditto\n",
				"name": "registerRestInterface"
			},
			{
				"kind": "template",
				"line": 262,
				"members": [
					{
						"kind": "class",
						"line": 262,
						"members": [
							{
								"kind": "alias",
								"line": 273,
								"char": 2,
								"type": "void delegate(HTTPClientRequest req)",
								"name": "RequestFilter"
							},
							{
								"kind": "variable",
								"line": 276,
								"char": 7,
								"type": "URL",
								"name": "m_baseURL"
							},
							{
								"kind": "variable",
								"line": 277,
								"char": 15,
								"type": "MethodStyle",
								"name": "m_methodStyle"
							},
							{
								"kind": "variable",
								"line": 278,
								"char": 17,
								"type": "RequestFilter",
								"name": "m_requestFilter"
							},
							{
								"kind": "variable",
								"line": 279,
								"char": 25,
								"type": "RestInterfaceSettings",
								"name": "m_settings"
							},
							{
								"kind": "constructor",
								"line": 285,
								"endchar": 2,
								"char": 2,
								"type": "(RestInterfaceSettings settings)",
								"parameters": [
									{
										"type": "RestInterfaceSettings",
										"name": "settings"
									}
								],
								"name": "this",
								"comment": "\t\tCreates a new REST client implementation of $(D I).\n",
								"endline": 316
							},
							{
								"kind": "constructor",
								"line": 319,
								"endchar": 2,
								"char": 2,
								"type": "(string base_url, MethodStyle style = MethodStyle.lowerUnderscored)",
								"parameters": [
									{
										"type": "string",
										"name": "base_url"
									},
									{
										"default": "MethodStyle.lowerUnderscored",
										"type": "MethodStyle",
										"name": "style"
									}
								],
								"name": "this",
								"comment": "ditto\n",
								"endline": 322
							},
							{
								"kind": "constructor",
								"line": 325,
								"endchar": 2,
								"char": 2,
								"type": "(URL base_url, MethodStyle style = MethodStyle.lowerUnderscored)",
								"parameters": [
									{
										"type": "URL",
										"name": "base_url"
									},
									{
										"default": "MethodStyle.lowerUnderscored",
										"type": "MethodStyle",
										"name": "style"
									}
								],
								"name": "this",
								"comment": "ditto\n",
								"endline": 331
							},
							{
								"kind": "function",
								"line": 336,
								"storageClass": [
									"final"
								],
								"endchar": 2,
								"char": 32,
								"type": "@property RequestFilter()",
								"name": "requestFilter",
								"comment": "\t\tAn optional request filter that allows to modify each request before it is made.\n",
								"endline": 339
							},
							{
								"kind": "function",
								"line": 342,
								"storageClass": [
									"final"
								],
								"endchar": 2,
								"char": 23,
								"type": "@property void(RequestFilter v)",
								"parameters": [
									{
										"type": "RequestFilter",
										"name": "v"
									}
								],
								"name": "requestFilter",
								"comment": "ditto\n",
								"endline": 345
							},
							{
								"kind": "mixin",
								"line": 352,
								"char": 2,
								"name": "RestClientMethods!I"
							},
							{
								"kind": "function",
								"line": 371,
								"endchar": 3,
								"char": 8,
								"type": "const Json(HTTPMethod verb, string name, ref InetHeaderMap hdrs, string query, string body_)",
								"parameters": [
									{
										"type": "HTTPMethod",
										"name": "verb"
									},
									{
										"type": "string",
										"name": "name"
									},
									{
										"storageClass": [
											"in",
											"ref"
										],
										"type": "InetHeaderMap",
										"name": "hdrs"
									},
									{
										"type": "string",
										"name": "query"
									},
									{
										"type": "string",
										"name": "body_"
									}
								],
								"name": "request",
								"comment": " Perform a request to the interface using the given parameters.\n\n Params:\n verb = Kind of request (See $(D HTTPMethod) enum).\n name = Location to request. For a request on https://github.com/rejectedsoftware/vibe.d/issues?q=author%3ASantaClaus,\n\t\tit will be '/rejectedsoftware/vibe.d/issues'.\n hdrs = The headers to send. Some field might be overriden (such as Content-Length). However, Content-Type will NOT be overriden.\n query = The $(B encoded) query string. For a request on https://github.com/rejectedsoftware/vibe.d/issues?q=author%3ASantaClaus,\n\t\tit will be 'author%3ASantaClaus'.\n body_ = The body to send, as a string. If a Content-Type is present in $(D hdrs), it will be used, otherwise it will default to\n\t\tthe generic type \"application/json\".\n",
								"endline": 415
							},
							{
								"kind": "template",
								"line": 419,
								"members": [
									{
										"kind": "function",
										"line": 419,
										"endchar": 2,
										"char": 17,
										"type": "string(Ts params)",
										"parameters": [
											{
												"type": "Ts",
												"name": "params"
											}
										],
										"name": "genQuery",
										"endline": 445
									}
								],
								"char": 17,
								"parameters": [
									{
										"kind": "tuple",
										"name": "Ts"
									}
								],
								"comment": "Params are passed in a deterministic order: [Name, value]*\n",
								"name": "genQuery"
							},
							{
								"kind": "template",
								"line": 448,
								"members": [
									{
										"kind": "function",
										"line": 448,
										"endchar": 2,
										"char": 17,
										"type": "string(Ts params)",
										"parameters": [
											{
												"type": "Ts",
												"name": "params"
											}
										],
										"name": "genBody",
										"endline": 471
									}
								],
								"char": 17,
								"parameters": [
									{
										"kind": "tuple",
										"name": "Ts"
									}
								],
								"comment": "Params are passed in a deterministic order: [Name, value]*\n",
								"name": "genBody"
							},
							{
								"kind": "function",
								"line": 473,
								"endchar": 2,
								"char": 17,
								"type": "string(string name)",
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"name": "_stripName",
								"endline": 478
							}
						],
						"char": 1,
						"name": "RestInterfaceClient"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "I"
					}
				],
				"comment": "\tImplements the given interface by forwarding all public methods to a REST server.\n\n\tThe server must talk the same protocol as registerRestInterface() generates. Be sure to set\n\tthe matching method style for this. The RestInterfaceClient class will derive from the\n\tinterface that is passed as a template argument. It can be used as a drop-in replacement\n\tof the real implementation of the API this way.\nExample:\n\n---\ninterface IMyApi\n{\n\t// GET /status\n\tstring getStatus();\n\n\t// GET /greeting\n\t@property string greeting();\n\t// PUT /greeting\n\t@property void greeting(string text);\n\n\t// POST /new_user\n\tvoid addNewUser(string name);\n\t// GET /users\n\t@property string[] users();\n\t// GET /:id/name\n\tstring getName(int id);\n\n\tJson getSomeCustomJson();\n}\n\nvoid application()\n{\n\tauto api = new RestInterfaceClient!IMyApi(\"http://127.0.0.1/api/\");\n\n\tlogInfo(\"Status: %s\", api.getStatus());\n\tapi.greeting = \"Hello, World!\";\n\tlogInfo(\"Greeting message: %s\", api.greeting);\n\tapi.addNewUser(\"Peter\");\n\tapi.addNewUser(\"Igor\");\n\tlogInfo(\"Users: %s\", api.users);\n\tlogInfo(\"First user name: %s\", api.getName(0));\n}\n\n---\n",
				"name": "RestInterfaceClient"
			},
			{
				"kind": "class",
				"line": 522,
				"members": [
					{
						"kind": "variable",
						"line": 525,
						"deco": "S4vibe4inet3url3URL",
						"char": 6,
						"name": "baseURL",
						"comment": " The public URL below which the REST interface is registered.\n",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 529,
						"init": "cast(MethodStyle)5",
						"deco": "E4vibe3web6common11MethodStyle",
						"char": 14,
						"name": "methodStyle",
						"comment": " Naming convention used for the generated URLs.\n",
						"offset": 68
					},
					{
						"kind": "variable",
						"line": 536,
						"init": "true",
						"deco": "b",
						"char": 7,
						"name": "stripTrailingUnderscore",
						"comment": " Ignores a trailing underscore in method and function names.\n\n\t\tWith this setting set to $(D true), it's possible to use names in the\n\t\tREST interface that are reserved words in D.\n",
						"offset": 72
					},
					{
						"kind": "function",
						"line": 538,
						"deco": "xFNdZC4vibe3web4rest21RestInterfaceSettings",
						"endchar": 2,
						"char": 34,
						"name": "dup",
						"endline": 545
					}
				],
				"char": 1,
				"name": "RestInterfaceSettings",
				"comment": "\tEncapsulates settings used to customize the generated REST interface.\n"
			}
		],
		"name": "vibe.web.rest",
		"comment": "\tAutomatic REST interface and client code generation facilities.\n\n\tCopyright: © 2012-2013 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig, Михаил Страшун\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\web\\validation.d",
		"members": [
			{
				"kind": "struct",
				"line": 19,
				"members": [
					{
						"kind": "constructor",
						"line": 23,
						"storageClass": [
							"@disable"
						],
						"deco": "FNcZS4vibe3web10validation10ValidEmail",
						"char": 11,
						"name": "this",
						"originalType": "ref ()"
					},
					{
						"kind": "function",
						"line": 25,
						"deco": "xFNaNbNfZAya",
						"endchar": 63,
						"char": 9,
						"name": "toString",
						"endline": 25
					},
					{
						"kind": "function",
						"line": 28,
						"storageClass": [
							"static"
						],
						"deco": "FAyaPAyaZS3std8typecons48__T8NullableTS4vibe3web10validation10ValidEmailZ8Nullable",
						"endchar": 2,
						"char": 29,
						"parameters": [
							{
								"deco": "Aya",
								"name": "str"
							},
							{
								"deco": "PAya",
								"name": "error"
							}
						],
						"name": "fromStringValidate",
						"originalType": "Nullable!ValidEmail(string str, string* error)",
						"endline": 38
					}
				],
				"char": 1,
				"name": "ValidEmail",
				"comment": "\tValidated e-mail parameter type.\n\n\tSee_also: $(D vibe.utils.validation.validateEmail)\nExample:\n\n---\nclass WebService {\n\tvoid setEmail(ValidEmail email)\n\t{\n\t\t// email is enforced to be valid here\n\t}\n\n\tvoid updateProfileInfo(Nullable!ValidEmail email, Nullable!string full_name)\n\t{\n\t\t// email is optional, but always valid\n\t\t// full_name is optional and not validated\n\t}\n}\n\n---\n"
			},
			{
				"kind": "struct",
				"line": 63,
				"members": [
					{
						"kind": "constructor",
						"line": 67,
						"storageClass": [
							"@disable"
						],
						"deco": "FNcZS4vibe3web10validation13ValidUsername",
						"char": 11,
						"name": "this",
						"originalType": "ref ()"
					},
					{
						"kind": "function",
						"line": 69,
						"deco": "xFNaNbNfZAya",
						"endchar": 63,
						"char": 9,
						"name": "toString",
						"endline": 69
					},
					{
						"kind": "function",
						"line": 72,
						"storageClass": [
							"static"
						],
						"deco": "FAyaPAyaZS3std8typecons51__T8NullableTS4vibe3web10validation13ValidUsernameZ8Nullable",
						"endchar": 2,
						"char": 32,
						"parameters": [
							{
								"deco": "Aya",
								"name": "str"
							},
							{
								"deco": "PAya",
								"name": "error"
							}
						],
						"name": "fromStringValidate",
						"originalType": "Nullable!ValidUsername(string str, string* error)",
						"endline": 82
					}
				],
				"char": 1,
				"name": "ValidUsername",
				"comment": "\tValidated user name parameter type.\n\n\tSee_also: $(D vibe.utils.validation.validateUsername)\nExample:\n\n---\nclass WebService {\n\tvoid setUsername(ValidUsername username)\n\t{\n\t\t// username is enforced to be valid here\n\t}\n\n\tvoid updateProfileInfo(Nullable!ValidUsername username, Nullable!string full_name)\n\t{\n\t\t// username is optional, but always valid\n\t\t// full_name is optional and not validated\n\t}\n}\n\n---\n"
			},
			{
				"kind": "struct",
				"line": 107,
				"members": [
					{
						"kind": "constructor",
						"line": 111,
						"storageClass": [
							"@disable"
						],
						"deco": "FNcZS4vibe3web10validation13ValidPassword",
						"char": 11,
						"name": "this",
						"originalType": "ref ()"
					},
					{
						"kind": "function",
						"line": 113,
						"deco": "xFNaNbNfZAya",
						"endchar": 63,
						"char": 9,
						"name": "toString",
						"endline": 113
					},
					{
						"kind": "function",
						"line": 116,
						"storageClass": [
							"static"
						],
						"deco": "FAyaPAyaZS3std8typecons51__T8NullableTS4vibe3web10validation13ValidPasswordZ8Nullable",
						"endchar": 2,
						"char": 32,
						"parameters": [
							{
								"deco": "Aya",
								"name": "str"
							},
							{
								"deco": "PAya",
								"name": "error"
							}
						],
						"name": "fromStringValidate",
						"originalType": "Nullable!ValidPassword(string str, string* error)",
						"endline": 126
					}
				],
				"char": 1,
				"name": "ValidPassword",
				"comment": "\tValidated password parameter.\n\n\tSee_also: $(D vibe.utils.validation.validatePassword)\n"
			},
			{
				"kind": "template",
				"line": 133,
				"members": [
					{
						"kind": "struct",
						"line": 133,
						"members": [
							{
								"kind": "variable",
								"line": 135,
								"init": "CONFIRMED_PARAM",
								"storageClass": [
									"enum"
								],
								"char": 7,
								"name": "confirmedParameter"
							},
							{
								"kind": "variable",
								"line": 137,
								"char": 17,
								"type": "string",
								"name": "m_value"
							},
							{
								"kind": "function",
								"line": 139,
								"endchar": 63,
								"char": 9,
								"type": "const pure nothrow @safe string()",
								"name": "toString",
								"endline": 139
							},
							{
								"kind": "function",
								"line": 142,
								"storageClass": [
									"static"
								],
								"endchar": 63,
								"char": 17,
								"type": "Confirm(string str)",
								"parameters": [
									{
										"type": "string",
										"name": "str"
									}
								],
								"name": "fromString",
								"endline": 142
							}
						],
						"char": 1,
						"name": "Confirm"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "CONFIRMED_PARAM"
					}
				],
				"comment": "\tEnsures that the parameter value matches that of another parameter.\nExample:\n\n---\nclass WebService {\n\tvoid setPassword(ValidPassword password, Confirm!\"password\" password_confirmation)\n\t{\n\t\t// password is valid and guaranteed to equal password_confirmation\n\t}\n\n\tvoid setProfileInfo(string full_name, Nullable!ValidPassword password, Nullable!(Confirm!\"password\") password_confirmation)\n\t{\n\t\t// Password is valid and guaranteed to equal password_confirmation\n\t\t// It is allowed for both, password and password_confirmation\n\t\t// to be absent at the same time, but not for only one of them.\n\t}\n}\n\n---\n",
				"name": "Confirm"
			}
		],
		"name": "vibe.web.validation",
		"comment": "\tParameter validation types transparently supported for web interface methods.\n\n\tCopyright: © 2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	},
	{
		"kind": "module",
		"file": "source\\vibe\\web\\web.d",
		"members": [
			{
				"kind": "import",
				"line": 19,
				"char": 15,
				"name": "vibe.web.common"
			},
			{
				"kind": "import",
				"line": 20,
				"char": 15,
				"name": "vibe.web.i18n"
			},
			{
				"kind": "import",
				"line": 21,
				"char": 15,
				"name": "vibe.web.validation"
			},
			{
				"kind": "template",
				"line": 116,
				"members": [
					{
						"kind": "function",
						"line": 116,
						"endchar": 1,
						"char": 6,
						"type": "void(URLRouter router, C instance, WebInterfaceSettings settings = null)",
						"parameters": [
							{
								"type": "URLRouter",
								"name": "router"
							},
							{
								"type": "C",
								"name": "instance"
							},
							{
								"default": "null",
								"type": "WebInterfaceSettings",
								"name": "settings"
							}
						],
						"name": "registerWebInterface",
						"endline": 164
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"deco": "C6Object",
						"name": "C"
					},
					{
						"kind": "value",
						"defaultValue": "MethodStyle.lowerUnderscored",
						"deco": "E4vibe3web6common11MethodStyle",
						"name": "method_style"
					}
				],
				"comment": "\tRegisters a HTTP/web interface based on a class instance.\n\n\tEach public method of the given class instance will be mapped to a HTTP\n\troute. Method parameters will be sourced from either the query string\n\tor form data of the request, or, if the parameter name has an underscore\n\tprefixed, from the $(D vibe.http.server.HTTPServerRequest.params) map.\n\n\tThe latter can be used to inject custom data in various ways. Examples of\n\tthis are placeholders specified in a $D( @path) annotation, values computed\n\tby a $(D @before) annotation, error information generated by the\n\t$(D errorDisplay) annotation, or data injected manually in a HTTP method\n\thandler that processed the request prior to passing it to the generated\n\tweb interface handler routes.\n\n\tMethods that return a $(D class) or $(D interface) instance, instead of\n\tbeing mapped to a single HTTP route, will be mapped recursively by\n\titerating the public routes of the returned instance. This way, complex\n\tpath hierarchies can be mapped to class hierarchies.\n\n\tParameter_conversion_rules:\n\t\tFor mapping method parameters without a prefixed underscore to\n\t\tquery/form fields, the following rules are applied:\n\n\t\t$(UL\n\t\t\t$(LI An array of values is mapped to\n\t\t\t\t$(D &lt;parameter_name&gt;_&lt;index&gt;), where $(D index)\n\t\t\t\tdenotes the zero based index of the array entry. The length\n\t\t\t\tof the array is determined by searching for the first\n\t\t\t\tnon-existent index in the set of form fields.)\n\t\t\t$(LI $(D Nullable!T) typed parameters, as well as parameters with\n\t\t\t\tdefault values, are optional parameters and are allowed to be\n\t\t\t\tmissing in the set of form fields. All other parameter types\n\t\t\t\trequire the corresponding field to be present and will result\n\t\t\t\tin a runtime error otherwise.)\n\t\t\t$(LI $(D struct) type parameters that don't define a $(D fromString)\n\t\t\t\tor a $(D fromStringValidate) method will be mapped to one\n\t\t\t\tform field per struct member with a scheme similar to how\n\t\t\t\tarrays are treated: $(D &lt;parameter_name&gt;_&lt;member_name&gt;))\n\t\t\t$(LI Boolean parameters will be set to $(D true) if a form field of\n\t\t\t\tthe corresponding name is present and to $(D false) otherwise.\n\t\t\t\tThis is compatible to how check boxes in HTML forms work.)\n\t\t\t$(LI All other types of parameters will be converted from a string\n\t\t\t\tby using the first available means of the following:\n\t\t\t\ta static $(D fromStringValidate) method, a static $(D fromString)\n\t\t\t\tmethod, using $(D std.conv.to!T).)\n\t\t\t$(LI Any of these rules can be applied recursively, so that it is\n\t\t\t\tpossible to nest arrays and structs appropriately.)\n\t\t)\n\n\tSpecial_parameters:\n\t\t$(UL\n\t\t\t$(LI A parameter named $(D __error) will be populated automatically\n\t\t\t\twith error information, when an $(D @errorDisplay) attribute\n\t\t\t\tis in use.)\n\t\t\t$(LI An $(D InputStream) typed parameter will receive the request\n\t\t\t\tbody as an input stream. Note that this stream may be already\n\t\t\t\temptied if the request was subject to certain body parsing\n\t\t\t\toptions. See $(D vibe.http.server.HTTPServerOption).)\n\t\t\t$(LI Parameters of types $(D vibe.http.server.HTTPServerRequest),\n\t\t\t\t$(D vibe.http.server.HTTPServerResponse),\n\t\t\t\t$(D vibe.http.common.HTTPRequest) or\n\t\t\t\t$(D vibe.http.common.HTTPResponse) will receive the\n\t\t\t\trequest/response objects of the invoking request.)\n\t\t)\n\n\n\tSupported_attributes:\n\t\tThe following attributes are supported for annotating methods of the\n\t\tregistered class:\n\n\t\t$(D @before), $(D @after), $(D @errorDisplay),\n\t\t$(D @vibe.web.common.method), $(D @vibe.web.common.path),\n\t\t$(D @vibe.web.common.contentType)\n\n\tParams:\n\t\trouter = The HTTP router to register to\n\t\tinstance = Class instance to use for the web interface mapping\n\t\tsettings = Optional parameter to customize the mapping process\nExample:\nGives an overview of the basic features. For more advanced use, see the\n\texample in the \"examples/web/\" directory.\n---\nimport vibe.http.router;\nimport vibe.http.server;\nimport vibe.web.web;\n\nclass WebService {\n\tprivate {\n\t\tSessionVar!(string, \"login_user\") m_loginUser;\n\t}\n\n\t@path(\"/\")\n\tvoid getIndex(string _error = null)\n\t{\n\t\t//render!(\"index.dt\", _error);\n\t}\n\n\t// automatically mapped to: POST /login\n\t@errorDisplay!getIndex\n\tvoid postLogin(string username, string password)\n\t{\n\t\tenforceHTTP(username.length > 0, HTTPStatus.forbidden,\n\t\t\t\"User name must not be empty.\");\n\t\tenforceHTTP(password == \"secret\", HTTPStatus.forbidden,\n\t\t\t\"Invalid password.\");\n\t\tm_loginUser = username;\n\t\tredirect(\"/profile\");\n\t}\n\n\t// automatically mapped to: POST /logout\n\tvoid postLogout()\n\t{\n\t\tterminateSession();\n\t\tredirect(\"/\");\n\t}\n\n\t// automatically mapped to: GET /profile\n\tvoid getProfile()\n\t{\n\t\tenforceHTTP(m_loginUser.length > 0, HTTPStatus.forbidden,\n\t\t\t\"Must be logged in to access the profile.\");\n\t\t//render!(\"profile.dt\")\n\t}\n}\n\nvoid run()\n{\n\tauto router = new URLRouter;\n\trouter.registerWebInterface(new WebService);\n\n\tauto settings = new HTTPServerSettings;\n\tsettings.port = 8080;\n\tlistenHTTP(settings, router);\n}\n\n---\n",
				"name": "registerWebInterface"
			},
			{
				"kind": "template",
				"line": 237,
				"members": [
					{
						"kind": "template",
						"line": 238,
						"members": [
							{
								"kind": "function",
								"line": 238,
								"endchar": 2,
								"char": 7,
								"type": "void()",
								"name": "render",
								"endline": 276
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"defaultValue": "__MODULE__",
								"type": "string",
								"name": "MODULE"
							},
							{
								"kind": "value",
								"defaultValue": "__FUNCTION__",
								"type": "string",
								"name": "FUNCTION"
							}
						],
						"name": "render"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "diet_file"
					},
					{
						"kind": "tuple",
						"name": "ALIASES"
					}
				],
				"comment": "\tRenders a Diet template file to the current HTTP response.\n\n\tThis function is equivalent to vibe.http.server.render, but implicitly\n\twrites the result to the response object of the currently processed\n\trequest.\n\n\tNote that this may only be called from a function/method\n\tregistered using registerWebInterface.\n",
				"name": "render"
			},
			{
				"kind": "function",
				"line": 292,
				"deco": "FAyaZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "url"
					}
				],
				"name": "redirect",
				"comment": "\tRedirects to the given URL.\n\n\tThe URL may either be a full URL, including the protocol and server\n\tportion, or it may be the local part of the URI (the path and an\n\toptional query string). Finally, it may also be a relative path that is\n\tcombined with the path of the current request to yield an absolute\n\tpath.\n\n\tNote that this may only be called from a function/method\n\tregistered using registerWebInterface.\n",
				"endline": 309
			},
			{
				"kind": "function",
				"line": 318,
				"deco": "FZv",
				"endchar": 1,
				"char": 6,
				"name": "terminateSession",
				"comment": "\tTerminates the currently active session (if any).\n\n\tNote that this may only be called from a function/method\n\tregistered using registerWebInterface.\n",
				"endline": 325
			},
			{
				"kind": "function",
				"line": 333,
				"deco": "FAyaAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "text"
					},
					{
						"deco": "Aya",
						"default": "null",
						"name": "context"
					}
				],
				"name": "trWeb",
				"comment": "\tTranslates a text based on the language of the current web request.\n\n\tSee_also: $(D vibe.web.i18n.translationContext)\nExample:\n\n---\nstruct TRC {\n\timport std.typetuple;\n\talias languages = TypeTuple!(\"en_US\", \"de_DE\", \"fr_FR\");\n\t//mixin translationModule!\"test\";\n}\n\n@translationContext!TRC\nclass WebService {\n\tvoid index(HTTPServerResponse res)\n\t{\n\t\tres.writeBody(trWeb(\"This text will be translated!\"));\n\t}\n}\n\n---\n",
				"endline": 337
			},
			{
				"kind": "template",
				"line": 370,
				"members": [
					{
						"kind": "function",
						"line": 370,
						"endchar": 1,
						"char": 11,
						"type": "@property ()",
						"name": "errorDisplay",
						"endline": 373
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "alias",
						"name": "DISPLAY_METHOD"
					}
				],
				"comment": "\tAttribute to customize how errors/exceptions are displayed.\n\n\tThe first template parameter takes a function that maps an exception and an\n\toptional field name to a single error type. The result of this function\n\twill then be passed as the $(D _error) parameter to the method referenced\n\tby the second template parameter.\n\n\tSupported types for the $(D _error) parameter are $(D bool), $(D string),\n\t$(D Exception), or a user defined $(D struct). The $(D field) member, if\n\tpresent, will be set to null if the exception was thrown after the field\n\tvalidation has finished.\nExample:\nShows the basic error message display.\n---\nvoid getForm(string _error = null)\n{\n\t//render!(\"form.dt\", _error);\n}\n\n@errorDisplay!getForm\nvoid postForm(string name)\n{\n\tif (name.length == 0)\n\t\tthrow new Exception(\"Name must not be empty\");\n\tredirect(\"/\");\n}\n\n---\nExample:\nAdvanced error display including the offending form field.\n---\nstruct FormError {\n\t// receives the original error message\n\tstring error;\n\t// receives the name of the field that caused the error, if applicable\n\tstring field;\n}\n\nvoid getForm(FormError _error = FormError.init)\n{\n\t//render!(\"form.dt\", _error);\n}\n\n// throws an error if the submitted form value is not a valid integer\n@errorDisplay!getForm\nvoid postForm(int ingeter)\n{\n\tredirect(\"/\");\n}\n\n---\n",
				"name": "errorDisplay"
			},
			{
				"kind": "class",
				"line": 417,
				"members": [
					{
						"kind": "variable",
						"line": 418,
						"init": "\"/\"",
						"deco": "Aya",
						"char": 9,
						"name": "urlPrefix",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 419,
						"init": "true",
						"deco": "b",
						"char": 7,
						"name": "ignoreTrailingSlash",
						"offset": 16
					},
					{
						"kind": "function",
						"line": 421,
						"deco": "xFNdZC4vibe3web3web20WebInterfaceSettings",
						"endchar": 2,
						"char": 33,
						"name": "dup",
						"endline": 425
					}
				],
				"char": 1,
				"name": "WebInterfaceSettings",
				"comment": "\tEncapsulates settings used to customize the generated web interface.\n"
			},
			{
				"kind": "template",
				"line": 442,
				"members": [
					{
						"kind": "struct",
						"line": 442,
						"members": [
							{
								"kind": "variable",
								"line": 444,
								"char": 5,
								"type": "T",
								"name": "m_initValue"
							},
							{
								"kind": "constructor",
								"line": 449,
								"endchar": 45,
								"char": 2,
								"type": "(T init_val)",
								"parameters": [
									{
										"type": "T",
										"name": "init_val"
									}
								],
								"name": "this",
								"comment": " Initializes a session var with a constant value.\nExample:\n\n---\nclass MyService {\n\tSessionVar!(int, \"someInt\") m_someInt = 42;\n\n\tvoid index() {\n\t\tassert(m_someInt == 42);\n\t}\n}\n\n\n---\n",
								"endline": 449
							},
							{
								"kind": "function",
								"line": 466,
								"endchar": 2,
								"char": 21,
								"type": "@property const(T)()",
								"name": "value",
								"comment": " Accesses the current value of the session variable.\n\n\t\tAny access will automatically start a new session and set the\n\t\tinitializer value, if necessary.\n",
								"endline": 477
							},
							{
								"kind": "function",
								"line": 479,
								"endchar": 2,
								"char": 17,
								"type": "@property void(T new_value)",
								"parameters": [
									{
										"type": "T",
										"name": "new_value"
									}
								],
								"name": "value",
								"comment": "ditto\n",
								"endline": 485
							},
							{
								"kind": "function",
								"line": 487,
								"endchar": 55,
								"char": 7,
								"type": "void(T new_value)",
								"parameters": [
									{
										"type": "T",
										"name": "new_value"
									}
								],
								"name": "opAssign",
								"endline": 487
							}
						],
						"char": 1,
						"name": "SessionVar"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"deco": "Aya",
						"name": "name"
					}
				],
				"comment": "\tMaps a web interface member variable to a session field.\n\n\tSetting a SessionVar variable will implicitly start a session, if none\n\thas been started yet. The content of the variable will be stored in\n\tthe session store and is automatically serialized and deserialized.\n\n\tNote that variables of type SessionVar must only be used from within\n\thandler functions of a class that was registered using\n\t$(D registerWebInterface). Also note that two different session\n\tvariables with the same $(D name) parameter will access the same\n\tunderlying data.\n",
				"name": "SessionVar"
			},
			{
				"kind": "template",
				"line": 493,
				"members": [
					{
						"kind": "struct",
						"line": 493,
						"members": [
							{
								"kind": "alias",
								"line": 496,
								"char": 2,
								"type": "DISPLAY_METHOD",
								"name": "displayMethod"
							},
							{
								"kind": "variable",
								"line": 497,
								"init": "__traits(identifier, DISPLAY_METHOD)",
								"storageClass": [
									"enum"
								],
								"char": 7,
								"name": "displayMethodName"
							},
							{
								"kind": "template",
								"line": 499,
								"members": [],
								"char": 10,
								"parameters": [
									{
										"kind": "value",
										"type": "size_t",
										"name": "idx"
									}
								],
								"name": "GetErrorParamType"
							},
							{
								"kind": "alias",
								"line": 507,
								"char": 2,
								"type": "GetErrorParamType!0",
								"name": "ErrorParamType"
							},
							{
								"kind": "function",
								"line": 509,
								"endchar": 2,
								"char": 17,
								"type": "ErrorParamType(Exception ex, string field)",
								"parameters": [
									{
										"type": "Exception",
										"name": "ex"
									},
									{
										"type": "string",
										"name": "field"
									}
								],
								"name": "getError",
								"endline": 518
							}
						],
						"char": 1,
						"name": "ErrorDisplayAttribute"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "DISPLAY_METHOD"
					}
				],
				"name": "ErrorDisplayAttribute"
			}
		],
		"name": "vibe.web.web",
		"comment": "\tImplements a declarative framework for building web interfaces.\n\n\tThis module contains the sister funtionality to the $(D vibe.web.rest)\n\tmodule. While the REST interface generator is meant for stateless\n\tmachine-to-machine communication, this module aims at implementing\n\tuser facing web services. Apart from that, both systems use the same\n\tdeclarative approach.\n\n\tSee $(D registerWebInterface) for an overview of how the system works.\n\n\tCopyright: © 2013-2014 RejectedSoftware e.K.\n\tLicense: Subject to the terms of the MIT license, as written in the included LICENSE.txt file.\n\tAuthors: Sönke Ludwig\n"
	}
]
